{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/thomas/Dev/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/home/thomas/Dev/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/thomas/Dev/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";import{Edge}from'./Edge.js';// import {Node} from './Node.js'; \nexport var Graph=/*#__PURE__*/function(){function Graph(V){_classCallCheck(this,Graph);this.V=V;this.E=0;this.AdjList=new Map();}/**\n     * \n     * @param {Node} v \n     */_createClass(Graph,[{key:\"addVertex\",value:function addVertex(v){this.AdjList.set(v,[]);this.V++;}/**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */},{key:\"addEdge\",value:function addEdge(v,w,weight){if(weight==undefined)throw'weight is undefined';var e=new Edge(v,w,weight);this.AdjList.get(v).push(e);this.AdjList.get(w).push(e);this.E++;}},{key:\"addEdgeFromEdge\",value:function addEdgeFromEdge(edge){var v=edge.either();var w=edge.other(v);this.AdjList.get(v).push(edge);this.AdjList.get(w).push(edge);this.E++;}/**\n     * @returns {Edge[]} edges\n     */},{key:\"getEdges\",value:function getEdges(){var edgeList=[];var nodes=this.AdjList.keys();// iterate over the vertices\nvar _iterator=_createForOfIteratorHelper(nodes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var node=_step.value;//get all edges that contain that vertex\nvar edges=this.AdjList.get(node);//iterate over all these edges\nvar _iterator2=_createForOfIteratorHelper(edges),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var e=_step2.value;if(node.index<e.other(node).index)edgeList.push(e);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return edgeList;}},{key:\"removeAllEdges\",value:function removeAllEdges(){var newMap=new Map();var _iterator3=_createForOfIteratorHelper(this.AdjList),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var node=_step3.value;newMap.set(node,[]);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}this.AdjList=newMap;this.E=0;}},{key:\"removeEdge\",value:function removeEdge(v1,v2){var e=this.findEdge(v1,v2);this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e),1);this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e),1);}/**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */},{key:\"findEdge\",value:function findEdge(v1,v2){var edges=this.getEdges();var _iterator4=_createForOfIteratorHelper(edges),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var e=_step4.value;var node1=e.either();var node2=e.other(node1);if(node1.index==v1.index&&node2.index==v2.index||node2.index==v1.index&&node1.index==v2.index)return e;}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}},{key:\"getNeighbors\",value:function getNeighbors(node){var out=[];var _iterator5=_createForOfIteratorHelper(this.AdjList.get(node)),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var edge=_step5.value;out.push(edge.other(node));}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return out;}/**\n     * \n     * @returns {Node[]} nodes \n     */},{key:\"getNodes\",value:function getNodes(){var nodes=[];var _iterator6=_createForOfIteratorHelper(this.AdjList.keys()),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var node=_step6.value;nodes.push(node);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return nodes;}},{key:\"printGraph\",value:function printGraph(){// get all the vertices\nvar get_keys=this.AdjList.keys();// iterate over the vertices\nvar _iterator7=_createForOfIteratorHelper(get_keys),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var node=_step7.value;var str=node.index+\": \";//get all edges that contain that vertex\nvar edges=this.AdjList.get(node);//iterate over all these edges\nvar _iterator8=_createForOfIteratorHelper(edges),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var e=_step8.value;str+=e.other(node).index+\" (w: \"+e.weight+\")  \";}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}console.log(str);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}}}]);return Graph;}();// // Using the above implemented graph class\n// var g = new Graph(6);\n// var vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n// // adding vertices\n// for (var i = 0; i < vertices.length; i++) {\n//     g.addVertex(vertices[i]);\n// }\n// // adding edges\n// g.addEdge(vertices[0], vertices[1], 2);\n// g.addEdge(vertices[0], vertices[2], 3);\n// // prints all vertex and\n// // its adjacency list\n// g.printGraph();","map":{"version":3,"names":["Edge","Graph","V","_classCallCheck","E","AdjList","Map","_createClass","key","value","addVertex","v","set","addEdge","w","weight","undefined","e","get","push","addEdgeFromEdge","edge","either","other","getEdges","edgeList","nodes","keys","_iterator","_createForOfIteratorHelper","_step","s","n","done","node","edges","_iterator2","_step2","index","err","f","removeAllEdges","newMap","_iterator3","_step3","removeEdge","v1","v2","findEdge","splice","indexOf","_iterator4","_step4","node1","node2","getNeighbors","out","_iterator5","_step5","getNodes","_iterator6","_step6","printGraph","get_keys","_iterator7","_step7","str","_iterator8","_step8","console","log"],"sources":["/home/thomas/Dev/RouteOptimizationVisualizer/src/Graph.js"],"sourcesContent":["import {Edge} from './Edge.js'; \n// import {Node} from './Node.js'; \n\nexport class Graph {\n    constructor(V) {\n        this.V = V;\n        this.E = 0;\n        this.AdjList = new Map();\n    }\n\n    /**\n     * \n     * @param {Node} v \n     */\n    addVertex(v) {\n        this.AdjList.set(v, []);\n        this.V++;\n    }\n\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */\n    addEdge(v, w, weight) {\n        if (weight == undefined)\n            throw 'weight is undefined';\n        let e = new Edge(v, w, weight); \n        this.AdjList.get(v).push(e);\n        this.AdjList.get(w).push(e);\n        this.E++;\n    }\n\n    addEdgeFromEdge(edge) {\n        let v = edge.either();\n        let w = edge.other(v);\n        this.AdjList.get(v).push(edge);\n        this.AdjList.get(w).push(edge);\n        this.E++;\n    }\n\n    /**\n     * @returns {Edge[]} edges\n     */\n    getEdges() {\n        let edgeList = [];\n        let nodes = this.AdjList.keys();\n        // iterate over the vertices\n        for (let node of nodes) {\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                if (node.index < e.other(node).index)\n                    edgeList.push(e);\n            }\n        }\n        return edgeList;\n    }\n\n    removeAllEdges() {\n        let newMap = new Map();\n        for (let node of this.AdjList) {\n            newMap.set(node, []);\n        }\n        this.AdjList = newMap;\n        this.E = 0;\n    }\n\n    removeEdge(v1, v2) {\n        let e = this.findEdge(v1, v2);\n        this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e), 1);\n        this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e), 1);\n    }\n\n    /**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */\n    findEdge(v1, v2) {\n        let edges = this.getEdges();\n        for (let e of edges) {\n            let node1 = e.either();\n            let node2 = e.other(node1);\n            if (node1.index == v1.index && node2.index == v2.index || node2.index == v1.index && node1.index == v2.index)\n                return e; \n        }\n    }\n\n    getNeighbors(node) {\n        let out = [];\n        for (let edge of this.AdjList.get(node)) {\n            out.push(edge.other(node));\n        }\n        return out;\n    }\n\n    /**\n     * \n     * @returns {Node[]} nodes \n     */\n    getNodes() {\n        let nodes = [];\n        for (let node of this.AdjList.keys()) {\n            nodes.push(node);\n        }\n        return nodes;\n    }\n\n    printGraph() {\n        // get all the vertices\n        var get_keys = this.AdjList.keys();\n \n        // iterate over the vertices\n        for (let node of get_keys) {\n            let str = node.index  + \": \";\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                str += e.other(node).index + \" (w: \" + e.weight + \")  \";\n            }\n            console.log(str);\n        }\n    }\n}\n\n// // Using the above implemented graph class\n// var g = new Graph(6);\n// var vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n \n// // adding vertices\n// for (var i = 0; i < vertices.length; i++) {\n//     g.addVertex(vertices[i]);\n// }\n \n// // adding edges\n// g.addEdge(vertices[0], vertices[1], 2);\n// g.addEdge(vertices[0], vertices[2], 3);\n \n// // prints all vertex and\n// // its adjacency list\n// g.printGraph();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}