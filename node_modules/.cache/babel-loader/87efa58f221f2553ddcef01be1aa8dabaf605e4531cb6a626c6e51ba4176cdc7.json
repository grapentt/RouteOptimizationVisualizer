{"ast":null,"code":"import { Graph } from './Graph.js';\nimport { Node } from './Node.js';\nimport { Edge } from './Edge.js';\nimport { Edmonds } from './Blossom.js';\nlet WIDTH = window.innerWidth; //\"static variables\" like in java\nlet HEIGHT = window.innerHeight * 3 / 5;\nlet speed = 5;\nlet startNode = new Node(WIDTH / 2, HEIGHT / 2, 0);\nlet count = 1; //count the nodes\nlet graph = new Graph(0);\nlet totalGraph = new Graph(0);\nlet startDefined = false;\nlet algo = \"Not Defined\";\nlet localSearch = \"Not defined\";\n// state is 0 if no path found yet\n// 1 if we already have a solution (that we might want to improve)\nlet state = 0;\nlet eulerCycle = [];\nconst sketch = p => {\n  let addingNodes = false;\n  let isRunning = false;\n  let clearingBoard = false;\n  //let algoFinished = false;\n\n  p.setup = () => {\n    p.createCanvas(WIDTH, HEIGHT);\n  };\n  p.windowResized = () => {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight * 3 / 5;\n    p.resizeCanvas(WIDTH, HEIGHT);\n  };\n  p.draw = async () => {\n    p.background(220);\n    //draw the nodes\n    //mouse position and already added nodes white\n    p.fill(\"#fff\");\n    p.circle(p.mouseX, p.mouseY, 10);\n    if (startDefined) {\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        if (node.color) p.fill(node.color);else p.fill(\"#fff\");\n        p.circle(node.x, node.y, 10);\n      }\n      //draw edges \n      drawEdges(p);\n    }\n    //start node pink\n    p.fill(255, 0, 200);\n    p.circle(startNode.x, startNode.y, 10);\n\n    //if we did not find any solution yet, we will run a algorithm to find inital solution\n    if (state == 0) {\n      if (isRunning) {\n        isRunning = false;\n        switch (algo) {\n          case 'Nearest Insertion':\n            await insertion(\"nearest\");\n            break;\n          case 'Farthest Insertion':\n            await insertion(\"farthest\");\n            break;\n          case 'Nearest Neighbor':\n            await nearestNeighbor(startNode, new Array(graph.V).fill(false), false);\n            break;\n          case 'Nearest Neighbor Look Ahead (made up)':\n            await nearestNeighborImproved();\n            break;\n          case 'Brute Force':\n            await bruteForce(startNode, new Array(graph.V).fill(false), 0);\n            break;\n          case 'Cluster naively':\n            await clusterNaively();\n            break;\n          case 'Christofides':\n            await christofides();\n            break;\n          default:\n            isRunning = false;\n        }\n        state = 1;\n      }\n    }\n    if (state == 1) {\n      console.log(\"In state == 1 with isRunning: \" + isRunning);\n      if (isRunning) {\n        isRunning = false;\n        switch (localSearch) {\n          case '2-opt':\n            await twoOpt();\n            break;\n          default:\n        }\n      }\n    }\n  };\n  function anyNodeHasNeighbors() {\n    return graph.E > 0;\n  }\n  function drawEdges(p) {\n    //displayNeihbors(startNode);\n    if (anyNodeHasNeighbors()) {\n      let edges = graph.getEdges();\n      for (let e of edges) {\n        if (e.color) {\n          p.stroke(e.color);\n        } else p.stroke('black');\n        let v1 = e.either();\n        let v2 = e.other(v1);\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        p.line(x1, y1, x2, y2);\n      }\n    }\n  }\n  function removeAllEdges() {\n    let tempGraph = new Graph(0);\n    for (let node of graph.getNodes()) tempGraph.addVertex(node);\n    graph = tempGraph;\n    totalGraph = new Graph(0);\n  }\n  p.mouseClicked = async () => {\n    if (addingNodes) addNodes(p);\n    //the algorithm updates the paths that p.draw() displays\n  };\n\n  /**\n   * Adding nodes to canvas\n   * @param {}\n   */\n  function addNodes(p) {\n    if (!startDefined) {\n      graph.addVertex(startNode);\n      startDefined = true;\n    }\n    p.loop();\n    //if Y is smaller than HEIGHT, the click was outside of canvas (probably on button) and the don't add\n    if (p.mouseY < HEIGHT && p.mouseY > 0) {\n      let node = new Node(p.mouseX, p.mouseY, count++);\n      graph.addVertex(node);\n    }\n  }\n\n  //this function \"sends\" data/additional parameters to our function. When ever the props change, the change is passed here\n  p.updateWithProps = function (newProps) {\n    if (newProps.removeEdges) {\n      removeAllEdges();\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        node.color = '#fff';\n      }\n      state = 0;\n    }\n    addingNodes = newProps.addingNodes;\n    console.log(\"Updating is running to: \" + i);\n    isRunning = newProps.isRunning;\n    clearingBoard = newProps.clearinBoard;\n    if (clearingBoard) {\n      startNode = new Node(WIDTH / 2, HEIGHT / 2, 0, []);\n      count = 1; //count the nodes\n      graph = new Graph(0);\n      startDefined = false;\n      totalGraph = new Graph(0);\n      state = 0;\n    }\n    if (!newProps.algo !== algo) algo = newProps.algo;\n    if (!newProps.localSearch !== localSearch) localSearch = newProps.localSearch;\n    if (!newProps.speed !== speed) speed = newProps.speed;\n    if (speed == 0) speed = 1;\n    //whenever a prop changes we start the loop again (it's only stopped after the path got displayed)\n    p.loop();\n  };\n  /*\n      async function runAlgorithm() {\n        for (let i = 0; i < nodes.length; ++i) {\n          adj[i] = nodes[i];\n        }\n        adj[nodes.length] = nodes[0];\n      }\n  */\n\n  async function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time / speed));\n  }\n  function displayNodes() {\n    graph.printGraph();\n  }\n\n  /**\n   * Mode has to be \"nearest\" or \"farthest\" and decides\n   * whether we run nearestInsertion or farthestInsertion.\n   * @param {string} mode \n   */\n  async function insertion(mode) {\n    //add the startNode\n    let toAdd = startNode;\n    var included = new Array(graph.V).fill(false);\n    included[toAdd.index] = true;\n\n    //add the first node\n    let node = null;\n    switch (mode) {\n      case \"nearest\":\n        node = findNode(startNode, included, \"closest\");\n        break;\n      case \"farthest\":\n        node = findNode(startNode, included, \"farthest\");\n        break;\n      default:\n    }\n    addEdge(startNode, node, euclidDistance(startNode, node));\n    included[node.index] = true;\n    await delay(1000);\n\n    //the second node is inserted slightly different than the remaining ones\n    let arr = null;\n    switch (mode) {\n      case \"nearest\":\n        arr = findClosestOrFarthestToIncluded(included, \"closest\");\n        break;\n      case \"farthest\":\n        arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n        break;\n      default:\n    }\n    let root = arr[0];\n    toAdd = arr[1];\n    let followUp = arr[2];\n    addEdge(root, toAdd, euclidDistance(root, toAdd));\n    addEdge(followUp, toAdd, euclidDistance(followUp, toAdd));\n    included[toAdd.index] = true;\n    await delay(1000);\n\n    //we know how many nodes well have to add, so for loop\n    for (let i = 0; i < graph.V - 3; ++i) {\n      let arr = null;\n      switch (mode) {\n        case \"nearest\":\n          arr = findClosestOrFarthestToIncluded(included, \"closest\");\n          break;\n        case \"farthest\":\n          arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n          break;\n        default:\n      }\n      let root = arr[0];\n      let toAdd = arr[1];\n      let followUp = arr[2];\n      //remove edge between root and followUp\n      removeEdge(root, followUp);\n      //mark the three nodes\n      toAdd.color = \"#ae2a0d\";\n      root.color = \"#0f61e8\";\n      followUp.color = \"#0f61e8\";\n      await delay(1000);\n      //add edges\n      addEdge(root, toAdd, euclidDistance(root, toAdd));\n      await delay(400);\n      addEdge(toAdd, followUp, euclidDistance(toAdd, followUp));\n      included[toAdd.index] = true;\n      await delay(1000);\n      toAdd.color = \"#fff\";\n      root.color = \"#fff\";\n      followUp.color = \"#fff\";\n    }\n    //algoFinished = true;\n  }\n\n  /**\n   * \n   * @param {boolean[]} included \n   * @param {string} mode \n   * @returns \n   */\n  function findClosestOrFarthestToIncluded(included, mode) {\n    if (mode !== \"closest\" && mode !== \"farthest\") throw 'Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"';\n    let curMinOrMax = Number.MAX_VALUE; //min\n    if (mode == \"farthest\") {\n      curMinOrMax = Number.MIN_VALUE; //max\n    }\n\n    let root = null;\n    let closestToRoot = null;\n\n    //iterating through all non - included nodes\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    for (let node of nonIncludedNodes) {\n      //and find closest distance to included \n      let [closestDist, potentialRoot] = findClosestNode(node, getIncludedNodes(included));\n      //if that cloeset dist is greate than curMax, than the node is considered to be farther from included\n      if (mode == \"closest\") {\n        if (closestDist < curMinOrMax) {\n          curMinOrMax = closestDist;\n          root = potentialRoot;\n          closestToRoot = node;\n        }\n      }\n      if (mode == \"farthest\") {\n        if (closestDist > curMinOrMax) {\n          curMinOrMax = closestDist;\n          root = potentialRoot;\n          closestToRoot = node;\n        }\n      }\n    }\n    let rootEdges = graph.AdjList.get(root);\n    let firstRootNeighbor = rootEdges[0].other(root);\n    if (rootEdges.length == 1) return [root, closestToRoot, firstRootNeighbor];\n    let secondRootNeighbor = rootEdges[1].other(root);\n    let newDist1 = euclidDistance(closestToRoot, firstRootNeighbor);\n    let newDist2 = euclidDistance(closestToRoot, secondRootNeighbor);\n    let oldDist1 = euclidDistance(root, firstRootNeighbor);\n    let oldDist2 = euclidDistance(root, secondRootNeighbor);\n    if (newDist1 - oldDist1 < newDist2 - oldDist2) return [root, closestToRoot, firstRootNeighbor];\n    return [root, closestToRoot, secondRootNeighbor];\n  }\n\n  /**\n   * \n   * @param {Node} node \n   * @param {Node} nodes \n   * @returns [closestDist, closestNode]\n   */\n  function findClosestNode(node, nodes) {\n    let closestNode = null;\n    let closestDist = Number.MAX_VALUE;\n    for (let v of nodes) {\n      let dist = euclidDistance(node, v);\n      if (dist < closestDist) {\n        closestDist = dist;\n        closestNode = v;\n      }\n    }\n    return [closestDist, closestNode];\n  }\n  function removeEdge(node1, node2) {\n    graph.removeEdge(node1, node2);\n  }\n\n  /**\n   * Adds an edge between the node node1 and node2 that have to exist in the graph\n   * @param {Node} node1 \n   * @param {Node} node2\n   */\n  function addEdge(node1, node2, weight) {\n    if (node1.index == node2.index) throw 'nodes cannot be the same';\n    graph.addEdge(node1, node2, weight);\n  }\n\n  /**\n   * This function runs nearestNeigbor on the global graph, starting from\n   * curNode, only visiting non-included nodes (as given by the included array).\n   * The boolean value timeOnlyFromCurNode specifies whether the function returns the\n   * total travel time from startNode to startNode, or only from curNode to startNode.\n   * @param {Node} curNode \n   * @param {boolean[]} included \n   * @param {boolean} timeOnlyFromCurNode \n   * @returns \n   */\n  async function nearestNeighbor(curNode, included, timeOnlyFromCurNode) {\n    if (timeOnlyFromCurNode == undefined) timeOnlyFromCurNode = false;\n    let time = 0;\n    //algoFinished = false;\n    included[curNode.index] = true;\n    //adj.push(curNode);\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    for (let i = 0; i < nonIncludedNodes.length; ++i) {\n      let node = findNode(curNode, included, \"closest\");\n      //add an edge between node and curNode\n      let weight = euclidDistance(node, curNode);\n      time += weight;\n      addEdge(node, curNode, weight);\n      curNode = node;\n      included[curNode.index] = true;\n\n      //adj.push(curNode);\n      await delay(300);\n    }\n    let weight = euclidDistance(curNode, startNode);\n    time += weight;\n    addEdge(curNode, startNode, weight);\n    await delay(300);\n    if (timeOnlyFromCurNode) return time;\n    return await calculateTravelTime();\n    //algoFinished = true;\n  }\n\n  async function calculateTravelTime(start) {\n    let time = 0;\n    let V = graph.V;\n    let included = new Array(V).fill(false);\n    included[startNode.index] = true;\n    let curNode = startNode;\n    //adding all nodes\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let edgesToCurNode = graph.AdjList.get(curNode);\n      for (let edge of edgesToCurNode) {\n        let neighbor = edge.other(curNode);\n        if (!included[neighbor.index]) {\n          time += edge.weight;\n          included[neighbor.index] = true;\n          curNode = neighbor;\n          break;\n        }\n      }\n    }\n    let lastEdge = graph.findEdge(curNode, startNode);\n    time += lastEdge.weight;\n    return time;\n  }\n  function getNonIncludedNodes(included) {\n    let out = [];\n    for (let v of graph.getNodes()) {\n      if (!included[v.index]) out.push(v);\n    }\n    return out;\n  }\n  function getIncludedNodes(included) {\n    let out = [];\n    for (let v of graph.getNodes()) {\n      if (included[v.index]) out.push(v);\n    }\n    return out;\n  }\n\n  /**\n   * \n   * @param {Node} curNode \n   * @param {boolean[]} included \n   * @param {double} time \n   * @returns \n   */\n  async function bruteForce(curNode, included, time) {\n    included[curNode.index] = true;\n    let neighbors = getNonIncludedNodes(included);\n    if (neighbors.length == 0) {\n      let weight = euclidDistance(startNode, curNode);\n      addEdge(startNode, curNode, weight);\n      return time + weight;\n    }\n    let minTime = Number.MAX_VALUE;\n    let bestNeighbor = null;\n    for (let neighbor of neighbors) {\n      let includedCopy = JSON.parse(JSON.stringify(included));\n      let tempGraph = copyGraph(graph);\n      addEdge(curNode, neighbor, euclidDistance(curNode, neighbor));\n      await delay(300);\n      let finishTime = await bruteForce(neighbor, includedCopy, time + euclidDistance(curNode, neighbor));\n      if (finishTime < minTime) {\n        minTime = finishTime;\n        bestNeighbor = neighbor;\n      }\n      graph = copyGraph(tempGraph);\n      await delay(300);\n    }\n    addEdge(curNode, bestNeighbor, euclidDistance(curNode, bestNeighbor));\n    await delay(400);\n    return bruteForce(bestNeighbor, included, time + euclidDistance(curNode, bestNeighbor));\n  }\n  async function nearestNeighborImproved() {\n    let curNode = startNode;\n    let included = new Array(graph.V).fill(false);\n    included[curNode.index] = true;\n    //in every iteration add one node\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let min = Number.MAX_VALUE;\n      let potentialNextNode = null;\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      //iterate through all non-included nodes\n      for (let v of nonIncludedNodes) {\n        let tempGraph = copyGraph(graph);\n        let includedCopy = JSON.parse(JSON.stringify(included));\n        addEdge(curNode, v, euclidDistance(curNode, v));\n        let time = await nearestNeighbor(v, includedCopy, true);\n        time += euclidDistance(curNode, v);\n        delay(300);\n        if (time < min) {\n          potentialNextNode = v;\n          min = time;\n        }\n        graph = copyGraph(tempGraph);\n      }\n      addEdge(curNode, potentialNextNode, euclidDistance(curNode, potentialNextNode));\n      curNode = potentialNextNode;\n      included[curNode.index] = true;\n      await delay(300);\n    }\n    addEdge(curNode, startNode, euclidDistance(curNode, startNode));\n  }\n  function copyGraph(g) {\n    let newGraph = new Graph(0);\n    for (let node of g.getNodes()) {\n      newGraph.addVertex(node);\n    }\n    for (let edge of g.getEdges()) {\n      newGraph.addEdgeFromEdge(edge);\n    }\n    return newGraph;\n  }\n\n  /**\n   * This method finds the closest or farthets Node to curNode, \n   * that is not yet inclueded (true in the included array). The \n   * mode decides if we find closest or farthets and has to be\n   * \"closest\" or \"farthsest\".\n   * @param {*} curNode \n   * @param {*} included \n   * @param {string} mode\n   * @returns \n   */\n  function findNode(curNode, included, mode) {\n    if (mode !== \"closest\" && mode !== \"farthest\") throw 'Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"';\n    let minOrMax = Number.MAX_VALUE; //min\n    if (mode == \"farthest\") minOrMax = Number.MIN_VALUE; //max\n    let curClosestOrFarthest = null;\n    for (let node of graph.getNodes()) {\n      if (included[node.index]) continue;\n      let dist = euclidDistance(curNode, node);\n      //let dist = graph.findEdge(curNode, node).weight;\n      if (mode == \"closest\") {\n        if (dist < minOrMax) {\n          minOrMax = dist;\n          curClosestOrFarthest = node;\n        }\n      } else {\n        if (dist > minOrMax) {\n          minOrMax = dist;\n          curClosestOrFarthest = node;\n        }\n      }\n    }\n    return curClosestOrFarthest;\n  }\n\n  /**\n   * \n   * @param {Node} node1 \n   * @param {Node} node2 \n   * @returns \n   */\n  function euclidDistance(node1, node2) {\n    if (!node1 || !node2) {\n      throw 'a node for dist does not exists';\n      return;\n    }\n    let result = (node1.x - node2.x) * (node1.x - node2.x) + (node1.y - node2.y) * (node1.y - node2.y);\n    return Math.sqrt(result);\n  }\n  async function christofides() {\n    await computeMST();\n    let nodesWithOddDegree = await getNodesWithOddDegree(graph);\n    for (var node of nodesWithOddDegree) {\n      node.color = \"#ae2a0d\";\n    }\n    // await delay(15000);\n    await findPerfectMatchingMinWeight(nodesWithOddDegree);\n    await findEulerianCycle();\n\n    // for (node of eulerCycle) {\n    //   console.log(node.index+  \"-\");\n    // }\n    let included = new Array(graph.V).fill(false);\n    var curNode = eulerCycle.pop();\n    var temp = curNode;\n    // we have to go back to this one in the end\n    var first = curNode;\n    included[curNode.index] = true;\n    while (eulerCycle.length > 0) {\n      curNode = eulerCycle.pop();\n      if (!included[curNode.index]) {\n        included[curNode.index] = true;\n        addEdge(temp, curNode, euclidDistance(temp, curNode));\n        temp = curNode;\n      }\n    }\n    addEdge(temp, first, euclidDistance(curNode, first));\n    // let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n    // //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n    // edge.color = 255;\n    // graph.addEdgeFromEdge(edge);\n  }\n\n  async function findEulerianCycle() {\n    // Find a vertex with odd degree\n    let v = graph.getNodes()[0];\n    for (var node of graph.getNodes()) {\n      if (graph.getNeighbors(node).length % 2 == 1) {\n        v = node;\n        break;\n      }\n    }\n    // Print tour starting from oddv\n    await printEulerUtil(v);\n  }\n  async function printEulerUtil(v) {\n    eulerCycle.push(v);\n\n    //Print Euler tour starting from vertex u\n\n    // Recur for all the vertices adjacent to\n    // this vertex\n    for (let node of graph.getNeighbors(v)) {\n      await delay(3000);\n      // If edge u-v is not removed and it's a\n      // valid next edge\n      if (await isValidNextEdge(v, node)) {\n        graph.removeEdge(v, node);\n        await printEulerUtil(node);\n        break;\n      }\n    }\n  }\n\n  // The function to check if edge u-v can be considered\n  // as next edge in Euler Tout\n  async function isValidNextEdge(u, v) {\n    // The edge u-v is valid in one of the following\n    // two cases:\n    // 1) If v is the only adjacent vertex of u\n    let count = graph.getNeighbors(u).length;\n    if (count == 1) return true;\n\n    // 2) If there are multiple adjacents, then u-v\n    //    is not a bridge\n    // Do following steps to check if u-v is a bridge\n\n    // 2.a) count of vertices reachable from u\n    let visited = new Array(graph.V);\n    visited.fill(false);\n    let count1 = await DFSCount(u, visited);\n\n    // 2.b) Remove edge (u, v) and after removing\n    // the edge, count vertices reachable from u\n    graph.removeEdge(u, v);\n    visited.fill(false);\n    let count2 = await DFSCount(u, visited);\n\n    // 2.c) Add the edge back to the graph\n    graph.addEdge(u, v, euclidDistance(u, v));\n    // 2.d) If count1 is greater, then edge (u, v)\n    // is a bridge\n    return count1 > count2 ? false : true;\n  }\n  async function DFSCount(v, visited) {\n    // Mark the current node as visited\n    visited[v.index] = true;\n    let count = 1;\n\n    // Recur for all vertices adjacent to this vertex\n\n    for (let node of graph.getNeighbors(v)) {\n      if (!visited[node.index]) count += await DFSCount(node, visited);\n    }\n    return count;\n    let nodesWithOddDegree = getNodesWithOddDegree(graph);\n    await findPerfectMatchingMinWeight();\n    let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n    //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n    edge.color = 255;\n    graph.addEdgeFromEdge(edge);\n    //min-cost-max matching is harder than I thought...\n  }\n\n  /**\n   * \n   * @param {Node} {even number of nodes} \n   */\n  async function findPerfectMatchingMinWeight(nodes) {\n    var edmondsEdges = [];\n    for (var i = 0; i < nodes.length - 1; ++i) {\n      for (var j = i + 1; j < nodes.length; ++j) {\n        var v = nodes[i];\n        var w = nodes[j];\n        var weight = euclidDistance(v, w);\n        edmondsEdges.push([v.index, w.index, -weight]);\n      }\n    }\n    var edmonds = new Edmonds(edmondsEdges);\n    var result = edmonds.maxWeightMatching();\n    for (var i = 0; i < result.length; ++i) {\n      var indexV = i;\n      var indexW = result[i];\n      var v = graph.getNodes().find(node => node.index === indexV);\n      var w = graph.getNodes().find(node => node.index === indexW);\n      if (indexV < indexW) {\n        addEdge(v, w, euclidDistance(v, w));\n      }\n    }\n  }\n  function getNodesWithOddDegree(g) {\n    let out = [];\n    for (let node of g.getNodes()) {\n      if (g.getNeighbors(node).length % 2 == 1) {\n        out.push(node);\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Computes MST from the global variable totalGraph, that we also initialize here\n   */\n  async function computeMST() {\n    //first fill total graph if not already done\n    fillTotalGraph();\n    let distTo = new Array(graph.V).fill(Number.MAX_VALUE);\n    let included = new Array(graph.V).fill(false);\n    distTo[startNode.index] = 0;\n    included[startNode.index] = true;\n    updateDistances(startNode, distTo);\n    //adding V nodes to MST\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let node = shortestAddableNodeToIncluded(distTo, included);\n      let [weight, root] = findClosestNode(node, getIncludedNodes(included));\n      addEdge(root, node, weight);\n      included[node.index] = true;\n      updateDistances(node, distTo);\n      graph.printGraph();\n      await delay(300);\n    }\n  }\n  function updateDistances(node, distTo) {\n    let neighbors = totalGraph.getNeighbors(node);\n    neighbors.forEach(v => {\n      distTo[v.index] = totalGraph.findEdge(v, node).weight;\n    });\n  }\n\n  /**\n   * This function returns a node and the edge connecting this node\n   * with one that is included such that the weight is minimal.\n   * @param {double[]} distTo \n   * @param {boolean[]} included \n   */\n  function shortestAddableNodeToIncluded(distTo, included) {\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    let closestDist = Number.MAX_VALUE;\n    let closestNode = null;\n    for (let node of nonIncludedNodes) {\n      if (distTo[node.index] < closestDist) {\n        closestDist = distTo[node.index];\n        closestNode = node;\n      }\n    }\n    return closestNode;\n  }\n\n  /**\n   * Creates a total graph (edges between all nodes)\n   */\n  function fillTotalGraph() {\n    if (totalGraph.V == 0) {\n      let nodes = graph.getNodes();\n      let allNodesAdded = false;\n      for (let i = 0; i < nodes.length; ++i) {\n        if (!allNodesAdded) totalGraph.addVertex(nodes[i]);\n        for (let j = i + 1; j < nodes.length; ++j) {\n          if (!allNodesAdded) totalGraph.addVertex(nodes[j]);\n          let weight = euclidDistance(nodes[i], nodes[j]);\n          let edge = new Edge(nodes[i], nodes[j], weight);\n          totalGraph.addEdgeFromEdge(edge);\n        }\n        if (!allNodesAdded) allNodesAdded = true;\n      }\n    }\n  }\n  function getPath() {\n    let path = [];\n    let visited = new Array(graph.V).fill(false);\n    let cur = startNode;\n    for (let i = 0; i < graph.V - 1; ++i) {\n      path.push(cur);\n      visited[cur.index] = true;\n      // get both neighbors\n      let neighbors = graph.getNeighbors(cur);\n      cur = visited[neighbors[0].index] ? neighbors[1] : neighbors[0];\n    }\n    path.push(startNode);\n    // for (let node of path) {\n    //   console.log(node.index + \"-\");\n    // }\n    return path;\n  }\n  function getLength(path) {\n    let length = 0;\n    let n = path.length;\n    for (let i = 0; i < n - 1; ++i) {\n      length += euclidDistance(path[i], path[i + 1]);\n    }\n    return length;\n  }\n  async function do2Opt(path, i, j) {\n    console.log(\"Vorher\");\n    for (let node of path) {\n      console.log(node.index);\n    }\n    path[i].color = \"#0f61e8\";\n    path[i + 1].color = \"#0f61e8\";\n    path[j].color = \"#0f61e8\";\n    path[j + 1].color = \"#0f61e8\";\n    path[i].color = \"#0f61e8\";\n    path[j + 1].color = \"#0f61e8\";\n    path[j].color = \"#0f61e8\";\n    path[i + 1].color = \"#0f61e8\";\n    console.log(\"i, j \" + i + \", \" + j);\n    console.log(\"indizes: path[i]\" + path[i].index);\n    console.log(\"indizes: path[i+1]\" + path[i + 1].index);\n    console.log(\"indizes: path[j]\" + path[j].index);\n    console.log(\"indizes: path[j+1]\" + path[j + 1].index);\n\n    // find out why not defined sometimes!\n    let oldEdge1 = graph.findEdge(path[i], path[i + 1]);\n    let oldEdge2 = graph.findEdge(path[j], path[j + 1]);\n    oldEdge1.color = \"#0f61e8\";\n    oldEdge2.color = \"#0f61e8\";\n    await delay(3000);\n    let newEdge1 = new Edge(path[i], path[j], euclidDistance(path[i], path[j]));\n    newEdge1.color = \"#ae2a0d\";\n    let newEdge2 = new Edge(path[i + 1], path[j + 1], euclidDistance(path[i + 1], path[j + 1]));\n    newEdge2.color = \"#ae2a0d\";\n    await delay(3000);\n    graph.addEdgeFromEdge(newEdge1);\n    graph.addEdgeFromEdge(newEdge2);\n    await delay(3000);\n    removeEdge(path[i], path[i + 1]);\n    removeEdge(path[j], path[j + 1]);\n    await delay(4000);\n    newEdge1.color = \"#000000\";\n    newEdge2.color = \"#000000\";\n    path = getPath();\n    console.log(\"Nachher\");\n    for (let node of path) {\n      console.log(node.index);\n    }\n    path[i].color = \"#fff\";\n    path[i + 1].color = \"#fff\";\n    path[j].color = \"#fff\";\n    path[j + 1].color = \"#fff\";\n    path[i].color = \"#fff\";\n    path[j + 1].color = \"#fff\";\n    path[j].color = \"#fff\";\n    path[i + 1].color = \"#fff\";\n    await delay(3000);\n  }\n  async function twoOpt() {\n    console.log(\"In twoOpt\");\n    let foundImprovement = true;\n    let path = getPath();\n    let curLength = getLength(path);\n    let n = path.length;\n    while (foundImprovement) {\n      console.log(\"In while loop\");\n      foundImprovement = false;\n      loop1: for (let i = 0; i < n - 2; i++) {\n        console.log(\"i : \" + i);\n        for (let j = i + 1; j < n - 1; j++) {\n          // first subtract new lengths\n          var gain = -euclidDistance(path[i], path[j]);\n          gain -= euclidDistance(path[i + 1], path[j + 1]);\n          // then add old lengths\n          gain += euclidDistance(path[i], path[i + 1]);\n          gain += euclidDistance(path[j], path[j + 1]);\n          // If old length is greater than new length\n          if (gain > 1e-4) {\n            console.log(\"Is bigger: \" + gain);\n            await do2Opt(path, i, j);\n            curLength -= gain;\n            foundImprovement = true;\n            path = getPath();\n            break loop1;\n          }\n          gain = 0;\n        }\n      }\n    }\n  }\n\n  /**\n   * \n   * @param {number of clusters} k \n   */\n  async function clusterNaively(k) {\n    fillTotalGraph();\n    let nodesPerCluster = totalGraph.V / k;\n    let edges = totalGraph.getEdges();\n    edges.sort((e1, e2) => e1.weight >= e2.weight ? 1 : -1);\n    //add small edges to cluster, if it doesn't exceed its size (size is naively n/k)\n    for (let e of edges) {\n      await delay(1000);\n      let v1 = e.either();\n      let v2 = e.other(v1);\n      console.log(\"v1: \" + v1.index);\n      console.log(\"v2: \" + v2.index);\n      //case 1, both nodes not included\n      if (!v1.root && !v2.root) {\n        v2.root = v1;\n        v1.isRoot = true;\n        v1.children = 1;\n        addEdge(v1, v2, e.weight);\n        console.log(\"v1 and v2 both had no root. Now children \" + v1.children);\n        continue;\n      }\n      if (v1.isRoot && !v2.root || v1.root && !v2.root) {\n        if (v1.isRoot) {\n          if (v1.children + 1 < nodesPerCluster) {\n            v2.root = v1;\n            v1.children++;\n          }\n        } else {\n          v2.root = v1.root;\n          v1.root.children++;\n        }\n        addEdge(v1, v2, e.weight);\n        continue;\n      }\n      if (v2.isRoot && !v1.root || v2.root && !v1.root) {\n        if (v2.root.children + 1 < nodesPerCluster) {\n          v1.root = v2.root;\n          v2.root.children++;\n          addEdge(v1, v2, e.weight);\n        }\n        continue;\n      }\n      if (v1.root && v2.root) {\n        if (v1.root.children + 1 + v2.root + 1 < nodesPerCluster) {\n          let temp = v1.root.children + 1;\n          v1.root = v2.root;\n          v2.root.children += temp;\n          addEdge(v1, v2, e.weight);\n        }\n        continue;\n      }\n    }\n  }\n};\nexport default sketch;","map":{"version":3,"names":["Graph","Node","Edge","Edmonds","WIDTH","window","innerWidth","HEIGHT","innerHeight","speed","startNode","count","graph","totalGraph","startDefined","algo","localSearch","state","eulerCycle","sketch","p","addingNodes","isRunning","clearingBoard","setup","createCanvas","windowResized","resizeCanvas","draw","background","fill","circle","mouseX","mouseY","nodes","getNodes","node","color","x","y","drawEdges","insertion","nearestNeighbor","Array","V","nearestNeighborImproved","bruteForce","clusterNaively","christofides","console","log","twoOpt","anyNodeHasNeighbors","E","edges","getEdges","e","stroke","v1","either","v2","other","x1","y1","x2","y2","line","removeAllEdges","tempGraph","addVertex","mouseClicked","addNodes","loop","updateWithProps","newProps","removeEdges","i","clearinBoard","delay","time","Promise","resolve","setTimeout","displayNodes","printGraph","mode","toAdd","included","index","findNode","addEdge","euclidDistance","arr","findClosestOrFarthestToIncluded","root","followUp","removeEdge","curMinOrMax","Number","MAX_VALUE","MIN_VALUE","closestToRoot","nonIncludedNodes","getNonIncludedNodes","closestDist","potentialRoot","findClosestNode","getIncludedNodes","rootEdges","AdjList","get","firstRootNeighbor","length","secondRootNeighbor","newDist1","newDist2","oldDist1","oldDist2","closestNode","v","dist","node1","node2","weight","curNode","timeOnlyFromCurNode","undefined","calculateTravelTime","start","edgesToCurNode","edge","neighbor","lastEdge","findEdge","out","push","neighbors","minTime","bestNeighbor","includedCopy","JSON","parse","stringify","copyGraph","finishTime","min","potentialNextNode","g","newGraph","addEdgeFromEdge","minOrMax","curClosestOrFarthest","result","Math","sqrt","computeMST","nodesWithOddDegree","getNodesWithOddDegree","findPerfectMatchingMinWeight","findEulerianCycle","pop","temp","first","getNeighbors","printEulerUtil","isValidNextEdge","u","visited","count1","DFSCount","count2","edmondsEdges","j","w","edmonds","maxWeightMatching","indexV","indexW","find","fillTotalGraph","distTo","updateDistances","shortestAddableNodeToIncluded","forEach","allNodesAdded","getPath","path","cur","getLength","n","do2Opt","oldEdge1","oldEdge2","newEdge1","newEdge2","foundImprovement","curLength","loop1","gain","k","nodesPerCluster","sort","e1","e2","isRoot","children"],"sources":["/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js"],"sourcesContent":["import {Graph} from './Graph.js';\nimport {Node} from './Node.js';\nimport {Edge} from './Edge.js';\nimport {Edmonds} from './Blossom.js'; \n\nlet WIDTH = window.innerWidth; //\"static variables\" like in java\nlet HEIGHT = window.innerHeight *3/ 5;\nlet speed = 5; \n\nlet startNode = new Node(WIDTH / 2, HEIGHT / 2, 0);\nlet count = 1; //count the nodes\nlet graph = new Graph(0);\nlet totalGraph = new Graph(0);\nlet startDefined = false;\nlet algo = \"Not Defined\";\nlet localSearch = \"Not defined\";\n// state is 0 if no path found yet\n// 1 if we already have a solution (that we might want to improve)\nlet state = 0;\nlet eulerCycle = [];\n\nconst sketch = (p) => {\n\n  let addingNodes = false;\n  let isRunning = false;\n  let clearingBoard = false;\n  //let algoFinished = false;\n\n\n  p.setup = () => {\n    p.createCanvas(WIDTH, HEIGHT);\n  };\n\n  p.windowResized = () => {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight *3/5;\n    p.resizeCanvas(WIDTH, HEIGHT);\n  }\n\n  p.draw = async () => {\n    p.background(220);\n    //draw the nodes\n    //mouse position and already added nodes white\n    p.fill(\"#fff\");\n    p.circle(p.mouseX, p.mouseY, 10);\n    if (startDefined) {\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        if (node.color)\n          p.fill(node.color);\n        else \n          p.fill(\"#fff\");\n        p.circle(node.x, node.y, 10);\n      }\n      //draw edges \n      drawEdges(p);\n    }\n     //start node pink\n     p.fill(255, 0, 200);\n     p.circle(startNode.x, startNode.y, 10);\n\n    //if we did not find any solution yet, we will run a algorithm to find inital solution\n    if (state == 0) {\n      if (isRunning) {\n        isRunning = false;\n        switch(algo) {\n          case 'Nearest Insertion':\n            await insertion(\"nearest\");\n            break;\n            case 'Farthest Insertion':\n              await insertion(\"farthest\");\n              break;\n            case 'Nearest Neighbor':\n              await nearestNeighbor(startNode, new Array(graph.V).fill(false), false);\n              break;\n            case 'Nearest Neighbor Look Ahead (made up)':\n              await nearestNeighborImproved();\n              break;\n            case 'Brute Force':\n              await bruteForce(startNode, new Array(graph.V).fill(false), 0);\n              break;\n            case 'Cluster naively':\n              await clusterNaively();\n              break;\n            case 'Christofides':\n              await christofides();\n              break;\n            default:\n              isRunning = false;\n        }\n        state = 1;\n      }\n    }\n    if (state == 1) {\n      console.log(\"In state == 1 with isRunning: \" + isRunning);\n      if (isRunning) {\n        isRunning = false;\n        switch (localSearch) {\n          case '2-opt':\n            await twoOpt();\n            break;\n          default:\n        }\n      }\n    }\n\n  };\n\n\n  function anyNodeHasNeighbors() {\n    return graph.E > 0;\n  }\n\n\n  function drawEdges(p) {\n    //displayNeihbors(startNode);\n    if (anyNodeHasNeighbors()) {\n      let edges = graph.getEdges();\n      for (let e of edges) {\n        if (e.color) {\n          p.stroke(e.color);\n        }\n        else \n          p.stroke('black');\n        let v1 = e.either();\n        let v2 = e.other(v1);\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        p.line(x1, y1, x2, y2);\n      }\n    }\n  }\n\n\n  function removeAllEdges() {\n    let tempGraph = new Graph(0);\n    for (let node of graph.getNodes())\n      tempGraph.addVertex(node);\n    graph = tempGraph;\n    totalGraph = new Graph(0);\n  }\n\n\n  \n  p.mouseClicked = async () => {\n    if (addingNodes) \n      addNodes(p);\n    //the algorithm updates the paths that p.draw() displays\n  };\n\n  /**\n   * Adding nodes to canvas\n   * @param {}\n   */\n  function addNodes(p) {\n    if (!startDefined) {\n      graph.addVertex(startNode);\n      startDefined = true;\n    }\n    p.loop();\n    //if Y is smaller than HEIGHT, the click was outside of canvas (probably on button) and the don't add\n    if (p.mouseY < HEIGHT && p.mouseY > 0) {\n      let node = new Node(p.mouseX, p.mouseY, count++);\n      graph.addVertex(node);\n    }\n  }\n\n    //this function \"sends\" data/additional parameters to our function. When ever the props change, the change is passed here\n    p.updateWithProps = function (newProps) {\n      if (newProps.removeEdges) {\n        removeAllEdges();\n        let nodes = graph.getNodes();\n        for (let node of nodes) {\n          node.color = '#fff';\n        }\n        state = 0;\n      }\n      addingNodes = newProps.addingNodes;\n      console.log(\"Updating is running to: \" + i)\n      isRunning = newProps.isRunning;\n      clearingBoard = newProps.clearinBoard;\n      if (clearingBoard) {\n        startNode = new Node(WIDTH / 2, HEIGHT / 2, 0, []);\n        count = 1; //count the nodes\n        graph = new Graph(0);\n        startDefined = false;\n        totalGraph = new Graph(0);\n        state = 0;\n      }\n      if (!newProps.algo !== algo)\n        algo = newProps.algo;\n      if (!newProps.localSearch !== localSearch)\n        localSearch = newProps.localSearch;\n      if (!newProps.speed !== speed) \n        speed = newProps.speed;\n      if (speed == 0)\n        speed = 1;\n      //whenever a prop changes we start the loop again (it's only stopped after the path got displayed)\n      p.loop();\n    }\n/*\n    async function runAlgorithm() {\n      for (let i = 0; i < nodes.length; ++i) {\n        adj[i] = nodes[i];\n      }\n      adj[nodes.length] = nodes[0];\n    }\n*/\n\nasync function delay(time) {\n  return new Promise(resolve => setTimeout(resolve, time/speed));\n}\n    \n    \n    function displayNodes() {\n      graph.printGraph();\n    }\n\n    /**\n     * Mode has to be \"nearest\" or \"farthest\" and decides\n     * whether we run nearestInsertion or farthestInsertion.\n     * @param {string} mode \n     */\n    async function insertion(mode) {\n      //add the startNode\n      let toAdd = startNode;\n      var included = new Array(graph.V).fill(false);\n      included[toAdd.index] = true;\n\n      //add the first node\n      let node = null;\n      switch(mode) {\n        case \"nearest\":\n          node = findNode(startNode, included, \"closest\");\n          break;\n        case \"farthest\":\n          node = findNode(startNode, included, \"farthest\");\n          break;\n        default:\n\n      }\n      addEdge(startNode, node, euclidDistance(startNode, node));\n      included[node.index] = true;\n      await delay(1000);\n\n      //the second node is inserted slightly different than the remaining ones\n      let arr = null;\n      switch(mode) {\n        case \"nearest\":\n          arr = findClosestOrFarthestToIncluded(included, \"closest\");\n          break;\n        case \"farthest\":\n          arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n          break;\n        default:\n      }\n      let root = arr[0];\n      toAdd = arr[1];\n      let followUp = arr[2];\n      addEdge(root, toAdd, euclidDistance(root, toAdd));\n      addEdge(followUp, toAdd, euclidDistance(followUp, toAdd));\n      included[toAdd.index] = true;\n      await delay(1000);\n\n      //we know how many nodes well have to add, so for loop\n      for (let i = 0; i< graph.V-3; ++i) {\n        let arr = null;\n        switch(mode) {\n          case \"nearest\":\n            arr = findClosestOrFarthestToIncluded(included, \"closest\");\n            break;\n          case \"farthest\":\n            arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n            break;\n          default:\n\n        }\n        let root = arr[0];\n        let toAdd = arr[1];\n        let followUp = arr[2];\n        //remove edge between root and followUp\n        removeEdge(root, followUp);\n        //mark the three nodes\n        toAdd.color = \"#ae2a0d\";\n        root.color = \"#0f61e8\";\n        followUp.color = \"#0f61e8\";\n        await delay(1000);\n        //add edges\n        addEdge(root, toAdd, euclidDistance(root, toAdd));\n        await delay(400);\n        addEdge(toAdd, followUp, euclidDistance(toAdd, followUp)); \n        included[toAdd.index] = true;\n        await delay(1000);\n        toAdd.color = \"#fff\";\n        root.color = \"#fff\";\n        followUp.color = \"#fff\";\n      }\n      //algoFinished = true;\n    }\n\n    /**\n     * \n     * @param {boolean[]} included \n     * @param {string} mode \n     * @returns \n     */\n    function findClosestOrFarthestToIncluded(included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n\n      let curMinOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\") {\n        curMinOrMax = Number.MIN_VALUE; //max\n      }\n      let root = null;\n      let closestToRoot = null;\n      \n      //iterating through all non - included nodes\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let node of nonIncludedNodes) {\n        //and find closest distance to included \n        let [closestDist, potentialRoot] = findClosestNode(node, getIncludedNodes(included));\n        //if that cloeset dist is greate than curMax, than the node is considered to be farther from included\n        if (mode == \"closest\") {\n          if (closestDist < curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n        if (mode == \"farthest\") {\n          if (closestDist > curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n      }\n      let rootEdges = graph.AdjList.get(root);\n\n      let firstRootNeighbor = rootEdges[0].other(root);\n      if (rootEdges.length == 1)\n        return [root, closestToRoot, firstRootNeighbor];\n      let secondRootNeighbor =  rootEdges[1].other(root);\n      let newDist1 = euclidDistance(closestToRoot, firstRootNeighbor);\n      let newDist2 = euclidDistance(closestToRoot, secondRootNeighbor);\n      let oldDist1 = euclidDistance(root, firstRootNeighbor);\n      let oldDist2 = euclidDistance(root, secondRootNeighbor);\n\n      if (newDist1 - oldDist1 < newDist2 -oldDist2)\n        return [root, closestToRoot, firstRootNeighbor];\n      return [root, closestToRoot, secondRootNeighbor];\n    }\n\n    /**\n     * \n     * @param {Node} node \n     * @param {Node} nodes \n     * @returns [closestDist, closestNode]\n     */\n    function findClosestNode(node, nodes) {\n      let closestNode = null;\n      let closestDist = Number.MAX_VALUE;\n      for (let v of nodes) {\n        let dist = euclidDistance(node, v);\n        if (dist < closestDist) {\n          closestDist = dist;\n          closestNode = v;\n        }\n      }\n      return [closestDist, closestNode];\n    }\n\n    function removeEdge(node1, node2) {\n      graph.removeEdge(node1, node2);\n    }\n\n    /**\n     * Adds an edge between the node node1 and node2 that have to exist in the graph\n     * @param {Node} node1 \n     * @param {Node} node2\n     */\n    function addEdge (node1, node2, weight) {\n      if (node1.index == node2.index)\n        throw('nodes cannot be the same');\n      graph.addEdge(node1, node2, weight);\n    }\n    \n    /**\n     * This function runs nearestNeigbor on the global graph, starting from\n     * curNode, only visiting non-included nodes (as given by the included array).\n     * The boolean value timeOnlyFromCurNode specifies whether the function returns the\n     * total travel time from startNode to startNode, or only from curNode to startNode.\n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {boolean} timeOnlyFromCurNode \n     * @returns \n     */\n    async function nearestNeighbor(curNode, included, timeOnlyFromCurNode) {\n      if (timeOnlyFromCurNode == undefined)\n        timeOnlyFromCurNode = false;\n      let time = 0;\n      //algoFinished = false;\n      included[curNode.index] = true;\n      //adj.push(curNode);\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let i = 0; i < nonIncludedNodes.length; ++i) {\n        let node = findNode(curNode, included, \"closest\");\n        //add an edge between node and curNode\n        let weight = euclidDistance(node, curNode);\n        time += weight;\n        addEdge(node, curNode, weight);\n\n        curNode = node;\n        included[curNode.index] = true;\n\n        //adj.push(curNode);\n        await delay(300);\n      }\n      let weight = euclidDistance(curNode, startNode);\n      time += weight;\n      addEdge(curNode, startNode, weight);\n      await delay(300);\n      if (timeOnlyFromCurNode)\n        return time;\n      return await calculateTravelTime();\n      //algoFinished = true;\n    }\n\n    \n    async function calculateTravelTime(start) {\n      let time = 0;\n      let V = graph.V;\n      let included = new Array(V).fill(false);\n      included[startNode.index] = true;\n      let curNode = startNode;\n      //adding all nodes\n      for (let i = 0; i<graph.V-1; ++i) {\n        let edgesToCurNode = graph.AdjList.get(curNode);\n        for (let edge of edgesToCurNode) {\n          let neighbor = edge.other(curNode);\n          if (!included[neighbor.index]) {\n            time += edge.weight;\n            included[neighbor.index] = true;\n            curNode = neighbor;\n            break;\n          }\n        }\n      }\n      let lastEdge = graph.findEdge(curNode, startNode);\n      time += lastEdge.weight;\n      return time;\n    }\n\n    function getNonIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (!included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    function getIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    /**\n     * \n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {double} time \n     * @returns \n     */\n    async function bruteForce(curNode, included, time) {\n      included[curNode.index] = true;\n      let neighbors = getNonIncludedNodes(included);\n      if (neighbors.length == 0) {\n        let weight = euclidDistance(startNode, curNode);\n        addEdge(startNode, curNode, weight);\n        return time + weight;\n      }\n      let minTime = Number.MAX_VALUE;\n      let bestNeighbor = null;\n      for (let neighbor of neighbors) {\n        let includedCopy = JSON.parse(JSON.stringify(included));\n        let tempGraph = copyGraph(graph);\n        addEdge(curNode, neighbor, euclidDistance(curNode, neighbor));\n        await delay(300);\n        let finishTime = await bruteForce(neighbor, includedCopy, time + euclidDistance(curNode, neighbor));\n        if (finishTime < minTime) {\n          minTime = finishTime;\n          bestNeighbor = neighbor;\n        }\n        graph = copyGraph(tempGraph);\n        await delay(300);\n      }\n      addEdge(curNode, bestNeighbor, euclidDistance(curNode, bestNeighbor));\n      await delay(400);\n      return bruteForce(bestNeighbor, included, time + euclidDistance(curNode, bestNeighbor));\n    }\n\n    async function nearestNeighborImproved() {\n      let curNode = startNode;\n      let included = new Array(graph.V).fill(false);\n      included[curNode.index] = true;\n      //in every iteration add one node\n      for (let i = 0; i<graph.V -1; ++i) {\n        let min = Number.MAX_VALUE;\n        let potentialNextNode = null;\n        let nonIncludedNodes = getNonIncludedNodes(included);\n        //iterate through all non-included nodes\n        for (let v of nonIncludedNodes) {\n          let tempGraph = copyGraph(graph);\n          let includedCopy = JSON.parse(JSON.stringify(included));\n          addEdge(curNode, v, euclidDistance(curNode, v));\n          let time = await nearestNeighbor(v, includedCopy, true);\n          time += euclidDistance(curNode, v);\n          delay(300);\n          if (time < min) {\n            potentialNextNode = v;\n            min = time;\n          }      \n          graph = copyGraph(tempGraph);\n        }\n        \n        addEdge(curNode, potentialNextNode, euclidDistance(curNode, potentialNextNode));\n        curNode = potentialNextNode;\n        included[curNode.index] = true;\n        await delay(300);\n      }\n      addEdge(curNode, startNode, euclidDistance(curNode, startNode));\n    }\n\n    function copyGraph(g) {\n      let newGraph = new Graph(0);\n      for (let node of g.getNodes()){\n        newGraph.addVertex(node);\n      }\n      for (let edge of g.getEdges()) {\n        newGraph.addEdgeFromEdge(edge);\n      }\n      return newGraph;\n    }\n\n    /**\n     * This method finds the closest or farthets Node to curNode, \n     * that is not yet inclueded (true in the included array). The \n     * mode decides if we find closest or farthets and has to be\n     * \"closest\" or \"farthsest\".\n     * @param {*} curNode \n     * @param {*} included \n     * @param {string} mode\n     * @returns \n     */\n    function findNode(curNode, included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n      let minOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\")\n        minOrMax = Number.MIN_VALUE; //max\n      let curClosestOrFarthest = null;\n      for (let node of graph.getNodes()) {\n        if (included[node.index])\n          continue;\n        let dist = euclidDistance(curNode, node);\n        //let dist = graph.findEdge(curNode, node).weight;\n        if (mode == \"closest\") {\n          if (dist < minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n        else {\n          if (dist > minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n      }\n      return curClosestOrFarthest;\n    }\n\n    /**\n     * \n     * @param {Node} node1 \n     * @param {Node} node2 \n     * @returns \n     */\n    function euclidDistance(node1, node2) {\n      if (!node1 || !node2) {\n        throw('a node for dist does not exists');\n        return\n      }\n      let result = (node1.x - node2.x) * (node1.x - node2.x) + (node1.y - node2.y) * (node1.y - node2.y);\n      return Math.sqrt(result);\n    }\n\n    async function christofides() {\n      await computeMST();\n\n\n      let nodesWithOddDegree = await getNodesWithOddDegree(graph);  \n\n      for (var node of nodesWithOddDegree) {\n        node.color = \"#ae2a0d\";\n      }\n      // await delay(15000);\n      await findPerfectMatchingMinWeight(nodesWithOddDegree);\n      await findEulerianCycle();\n    \n      // for (node of eulerCycle) {\n      //   console.log(node.index+  \"-\");\n      // }\n      let included = new Array(graph.V).fill(false);\n      var curNode = eulerCycle.pop();\n      var temp = curNode;\n      // we have to go back to this one in the end\n      var first = curNode;\n      included[curNode.index] = true;\n      while (eulerCycle.length > 0) {\n        curNode = eulerCycle.pop();\n        if (!included[curNode.index]) {\n          included[curNode.index] = true;\n          addEdge(temp, curNode, euclidDistance(temp, curNode));\n          temp = curNode;\n        }\n      }\n\n      addEdge(temp, first, euclidDistance(curNode, first));\n      // let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n      // //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n      // edge.color = 255;\n      // graph.addEdgeFromEdge(edge);\n      \n    }\n\n    async function findEulerianCycle() {\n      // Find a vertex with odd degree\n      let v = graph.getNodes()[0];\n      for (var node of graph.getNodes()) {\n        if (graph.getNeighbors(node).length % 2== 1) {\n          v = node;\n          break;\n        }\n      }\n      // Print tour starting from oddv\n      await printEulerUtil(v);\n    \n    }\n\n    async function printEulerUtil(v) {\n      eulerCycle.push(v);\n\n      //Print Euler tour starting from vertex u\n    \n      // Recur for all the vertices adjacent to\n      // this vertex\n      for (let node of graph.getNeighbors(v)) {\n        await delay(3000);\n        // If edge u-v is not removed and it's a\n        // valid next edge\n        if (await isValidNextEdge(v, node)) {\n          graph.removeEdge(v, node);\n          await printEulerUtil(node);\n          break;\n        }\n      }\n    }\n\n\n    // The function to check if edge u-v can be considered\n    // as next edge in Euler Tout\n    async function isValidNextEdge(u, v) {\n      // The edge u-v is valid in one of the following\n      // two cases:\n      // 1) If v is the only adjacent vertex of u\n      let count = graph.getNeighbors(u).length; \n      if (count == 1) \n        return true;\n\n      // 2) If there are multiple adjacents, then u-v\n      //    is not a bridge\n      // Do following steps to check if u-v is a bridge\n      \n      // 2.a) count of vertices reachable from u\n      let visited = new Array(graph.V);\n      visited.fill(false);\n      let count1 = await DFSCount(u, visited);\n      \n      // 2.b) Remove edge (u, v) and after removing\n      // the edge, count vertices reachable from u\n      graph.removeEdge(u, v);\n      visited.fill(false);\n      let count2 = await DFSCount(u, visited);\n\n      // 2.c) Add the edge back to the graph\n      graph.addEdge(u, v, euclidDistance(u, v));\n      // 2.d) If count1 is greater, then edge (u, v)\n      // is a bridge\n      return count1 > count2 ? false : true;\n    }\n\n\n    async function DFSCount(v, visited) {\n      // Mark the current node as visited\n      visited[v.index] = true;\n      let count = 1;\n      \n      // Recur for all vertices adjacent to this vertex\n      \n      for (let node of graph.getNeighbors(v)) {\n        if (!visited[node.index]) \n          count += await DFSCount(node, visited);\n      }\n      return count;\n      let nodesWithOddDegree = getNodesWithOddDegree(graph);  \n      await findPerfectMatchingMinWeight();\n      let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n      //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n      edge.color = 255;\n      graph.addEdgeFromEdge(edge);\n      //min-cost-max matching is harder than I thought...\n      \n    }\n\n    /**\n     * \n     * @param {Node} {even number of nodes} \n     */\n    async function findPerfectMatchingMinWeight(nodes) {\n      var edmondsEdges = [];\n      for (var i = 0; i< nodes.length-1; ++i) {\n        for (var j = i+1; j < nodes.length; ++j) {\n          var v = nodes[i];\n          var w = nodes[j];\n          var weight = euclidDistance(v, w);\n          edmondsEdges.push([v.index, w.index, - weight])\n        }\n      }\n      var edmonds = new Edmonds(edmondsEdges);\n\n      var result = edmonds.maxWeightMatching();\n      \n\n      for (var i = 0; i < result.length; ++i) {\n        var indexV = i;\n        var indexW = result[i];\n        var v = graph.getNodes().find(node => node.index === indexV);\n        var w = graph.getNodes().find(node => node.index === indexW);\n        if (indexV < indexW) {\n          addEdge(v, w, euclidDistance(v, w));\n        }\n      }\n    } \n\n\n    function getNodesWithOddDegree(g) {\n      let out = [];\n      for (let node of g.getNodes()) {\n        if (g.getNeighbors(node).length % 2 == 1){\n          out.push(node);\n        }\n      }\n      return out;\n    }\n\n    /**\n     * Computes MST from the global variable totalGraph, that we also initialize here\n     */\n    async function computeMST() {\n      //first fill total graph if not already done\n      fillTotalGraph();\n      let distTo = new Array(graph.V).fill(Number.MAX_VALUE);\n      let included = new Array(graph.V).fill(false);\n      distTo[startNode.index] = 0;\n      included[startNode.index] = true;\n      updateDistances(startNode, distTo);\n      //adding V nodes to MST\n      for (let i = 0; i< graph.V-1; ++i) {\n        let node = shortestAddableNodeToIncluded(distTo, included);\n        let [weight, root] = findClosestNode(node, getIncludedNodes(included));\n        addEdge(root, node, weight);\n        included[node.index] = true;\n        updateDistances(node, distTo);\n        graph.printGraph();\n        await delay(300);\n      }\n    }\n\n    function updateDistances(node, distTo) {\n      let neighbors = totalGraph.getNeighbors(node);\n      neighbors.forEach(v => {\n        distTo[v.index] = totalGraph.findEdge(v, node).weight;\n      });\n    }\n\n    /**\n     * This function returns a node and the edge connecting this node\n     * with one that is included such that the weight is minimal.\n     * @param {double[]} distTo \n     * @param {boolean[]} included \n     */\n    function shortestAddableNodeToIncluded(distTo, included) {\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      let closestDist = Number.MAX_VALUE;\n      let closestNode = null;\n      for (let node of nonIncludedNodes) {\n        if (distTo[node.index] < closestDist) {\n          closestDist = distTo[node.index];\n          closestNode = node;\n        }\n      }\n      return closestNode;\n    }\n\n    /**\n     * Creates a total graph (edges between all nodes)\n     */\n    function fillTotalGraph() {\n      if (totalGraph.V == 0) {\n        let nodes = graph.getNodes();\n        let allNodesAdded = false;\n        for (let i = 0; i < nodes.length; ++i) {\n          if (!allNodesAdded)\n            totalGraph.addVertex(nodes[i]);\n          for (let j = i+1; j< nodes.length; ++j) {\n            if (!allNodesAdded) \n              totalGraph.addVertex(nodes[j]);\n            let weight = euclidDistance(nodes[i], nodes[j]);\n            let edge = new Edge(nodes[i], nodes[j], weight);\n            totalGraph.addEdgeFromEdge(edge);\n          }\n          if (!allNodesAdded) \n            allNodesAdded = true;\n        }\n      }\n    }\n\n    function getPath() {\n      let path = [];\n      let visited = new Array(graph.V).fill(false);\n      let cur = startNode;\n      for (let i = 0; i < graph.V - 1; ++i) {\n        path.push(cur);\n        visited[cur.index] = true;\n        // get both neighbors\n        let neighbors = graph.getNeighbors(cur);\n        cur = visited[neighbors[0].index] ? neighbors[1] : neighbors[0]; \n      }\n      path.push(startNode);\n      // for (let node of path) {\n      //   console.log(node.index + \"-\");\n      // }\n      return path;\n    }\n\n    function getLength(path) {\n      let length = 0;\n      let n = path.length;\n      for (let i = 0; i < n-1; ++i) {\n        length += euclidDistance(path[i], path[i+1]);\n      }\n      return length;\n    }\n\n    async function do2Opt(path, i, j) {\n      console.log(\"Vorher\");\n      for (let node of path) {\n        console.log(node.index);\n      }\n      path[i].color = \"#0f61e8\";\n      path[i+1].color = \"#0f61e8\";\n      path[j].color = \"#0f61e8\";\n      path[j+1].color = \"#0f61e8\";\n\n      path[i].color = \"#0f61e8\";\n      path[j+1].color = \"#0f61e8\";\n      path[j].color = \"#0f61e8\";\n      path[i+1].color = \"#0f61e8\";\n\n      console.log(\"i, j \" + i + \", \" + j);\n      console.log(\"indizes: path[i]\" + path[i].index );\n      console.log(\"indizes: path[i+1]\" + path[i+1].index );\n      console.log(\"indizes: path[j]\" + path[j].index );\n      console.log(\"indizes: path[j+1]\" + path[j+1].index );\n      \n\n\n      // find out why not defined sometimes!\n      let oldEdge1 = graph.findEdge(path[i], path[i+1]);\n      let oldEdge2 = graph.findEdge(path[j], path[j+1]);\n      oldEdge1.color = \"#0f61e8\";\n      oldEdge2.color = \"#0f61e8\";\n      await delay(3000);\n      let newEdge1 = new Edge(path[i], path[j], euclidDistance(path[i], path[j]));\n      newEdge1.color = \"#ae2a0d\";\n      let newEdge2 = new Edge(path[i+1], path[j+1], euclidDistance(path[i+1], path[j+1]));\n      newEdge2.color = \"#ae2a0d\";\n      await delay(3000);\n      graph.addEdgeFromEdge(newEdge1);\n      graph.addEdgeFromEdge(newEdge2);\n      await delay(3000);\n      removeEdge(path[i], path[i+1]);\n      removeEdge(path[j], path[j+1]);\n      await delay(4000);\n      newEdge1.color = \"#000000\";\n      newEdge2.color = \"#000000\";\n\n      path = getPath();\n      console.log(\"Nachher\");\n      for (let node of path) {\n        console.log(node.index);\n      }\n\n\n      path[i].color = \"#fff\";\n      path[i+1].color = \"#fff\";\n      path[j].color = \"#fff\";\n      path[j+1].color = \"#fff\";\n\n      path[i].color = \"#fff\";\n      path[j+1].color = \"#fff\";\n      path[j].color = \"#fff\";\n      path[i+1].color = \"#fff\";\n      await delay(3000);\n\n\n    }\n\n    async function twoOpt() {\n      console.log(\"In twoOpt\");\n      let foundImprovement = true;\n      let path = getPath();\n      let curLength = getLength(path);\n      let n = path.length;\n      while (foundImprovement) {\n        console.log(\"In while loop\");\n        foundImprovement = false;\n        loop1:\n        for (let i = 0; i < n - 2; i++) {\n          console.log(\"i : \" + i);\n          for (let j = i + 1; j < n-1; j++) {\n            // first subtract new lengths\n            var gain = -euclidDistance(path[i], path[j]);\n            gain -= euclidDistance(path[i+1], path[j+1]);\n            // then add old lengths\n            gain += euclidDistance(path[i], path[i+1]);\n            gain += euclidDistance(path[j], path[j+1]);\n            // If old length is greater than new length\n            if (gain > 1e-4) {\n              console.log(\"Is bigger: \" + gain);\n              await do2Opt(path, i, j);\n              curLength -= gain;\n              foundImprovement = true;\n              path = getPath();\n              break loop1;\n            }\n            gain = 0;\n          }\n        }\n      }\n    }\n\n    /**\n     * \n     * @param {number of clusters} k \n     */\n    async function clusterNaively(k) {\n      fillTotalGraph();\n      let nodesPerCluster = totalGraph.V/k;\n      let edges = totalGraph.getEdges();\n      edges.sort((e1, e2) => (e1.weight >= e2.weight) ? 1 : -1);\n      //add small edges to cluster, if it doesn't exceed its size (size is naively n/k)\n      for (let e of edges) {\n        await delay(1000);    \n        let v1 = e.either();\n        let v2 = e.other(v1);\n        console.log(\"v1: \" + v1.index);\n        console.log(\"v2: \" + v2.index);    \n        //case 1, both nodes not included\n        if (!v1.root && !v2.root) {\n          v2.root = v1;\n          v1.isRoot = true;\n          v1.children = 1;\n          addEdge(v1, v2, e.weight);\n          console.log(\"v1 and v2 both had no root. Now children \" + v1.children);\n          continue;\n        }\n        if (v1.isRoot && !v2.root || v1.root && !v2.root) {\n            if (v1.isRoot) {\n              if (v1.children + 1 < nodesPerCluster) {\n                v2.root = v1;\n                v1.children++;\n              }\n            }\n            else {\n              v2.root = v1.root; \n              v1.root.children++;\n            }\n            addEdge(v1, v2, e.weight);\n            continue;\n          }\n        if (v2.isRoot && !v1.root || v2.root && !v1.root) {\n          if (v2.root.children + 1 < nodesPerCluster) {\n            v1.root = v2.root;\n            v2.root.children++;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n        if (v1.root && v2.root) {\n          if (v1.root.children + 1 + v2.root + 1 < nodesPerCluster) {\n            let temp = v1.root.children + 1;\n            v1.root = v2.root;\n            v2.root.children += temp;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n      }\n\n    }\n\n    \n\n}\n\nexport default sketch;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}