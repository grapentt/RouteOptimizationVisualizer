{"ast":null,"code":"import { Graph } from './Graph.js';\nimport { Node } from './Node.js';\nimport { Edge } from './Edge.js';\nlet WIDTH = window.innerWidth; //\"static variables\" like in java\nlet HEIGHT = window.innerHeight * 3 / 5;\nlet speed = 5;\nlet startNode = new Node(WIDTH / 2, HEIGHT / 2, 0);\nlet count = 1; //count the nodes\nlet graph = new Graph(0);\nlet totalGraph = new Graph(0);\nlet startDefined = false;\nlet algo = \"Not Defined\";\nconst sketch = p => {\n  let addingNodes = false;\n  let isRunning = false;\n  let clearingBoard = false;\n  //let algoFinished = false;\n\n  p.setup = () => {\n    p.createCanvas(WIDTH, HEIGHT);\n  };\n  p.windowResized = () => {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight * 3 / 5;\n    p.resizeCanvas(WIDTH, HEIGHT);\n  };\n  p.draw = async () => {\n    console.log(\"props are: addingNodes \" + addingNodes + \" isRunnung: \" + isRunning);\n    p.background(220);\n    //draw the nodes\n    //mouse position and already added nodes white\n    p.fill(\"#fff\");\n    p.circle(p.mouseX, p.mouseY, 10);\n    if (startDefined) {\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        if (node.color) p.fill(node.color);else p.fill(\"#fff\");\n        p.circle(node.x, node.y, 10);\n      }\n      //draw edges \n      drawEdges(p);\n    }\n    //start node pink\n    p.fill(255, 0, 200);\n    p.circle(startNode.x, startNode.y, 10);\n  };\n  function anyNodeHasNeighbors() {\n    return graph.E > 0;\n  }\n  function drawEdges(p) {\n    //displayNeihbors(startNode);\n    if (anyNodeHasNeighbors()) {\n      let edges = graph.getEdges();\n      for (let e of edges) {\n        if (e.color) {\n          p.stroke(e.color);\n        } else p.stroke('black');\n        let v1 = e.either();\n        let v2 = e.other(v1);\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        p.line(x1, y1, x2, y2);\n      }\n    }\n  }\n  function removeAllEdges() {\n    let tempGraph = new Graph(0);\n    for (let node of graph.getNodes()) tempGraph.addVertex(node);\n    graph = tempGraph;\n    totalGraph = new Graph(0);\n  }\n  p.mouseClicked = async () => {\n    if (addingNodes) addNodes(p);\n    //the algorithm updates the paths that p.draw() displays\n  };\n\n  /**\n   * Adding nodes to canvas\n   * @param {}\n   */\n  function addNodes(p) {\n    if (!startDefined) {\n      graph.addVertex(startNode);\n      startDefined = true;\n    }\n    p.loop();\n    //if Y is smaller than HEIGHT, the click was outside of canvas (probably on button) and the don't add\n    if (p.mouseY < HEIGHT) {\n      let node = new Node(p.mouseX, p.mouseY, count++);\n      graph.addVertex(node);\n    }\n  }\n\n  //this function \"sends\" data/additional parameters to our function. When ever the props change, the change is passed here\n  p.updateWithProps = function (newProps) {\n    if (!newProps.isRunning) removeAllEdges();\n    addingNodes = newProps.addingNodes;\n    isRunning = newProps.isRunning;\n    clearingBoard = newProps.clearinBoard;\n    if (clearingBoard) {\n      startNode = new Node(WIDTH / 2, HEIGHT / 2, 0, []);\n      count = 1; //count the nodes\n      graph = new Graph(0);\n      startDefined = false;\n      totalGraph = new Graph(0);\n    }\n    if (!newProps.algo !== algo) algo = newProps.algo;\n    if (!newProps.speed !== speed) speed = newProps.speed;\n    if (speed == 0) speed = 1;\n    //whenever a prop changes we start the loop again (it's only stopped after the path got displayed)\n    p.loop();\n  };\n  /*\n      async function runAlgorithm() {\n        for (let i = 0; i < nodes.length; ++i) {\n          adj[i] = nodes[i];\n        }\n        adj[nodes.length] = nodes[0];\n      }\n  */\n\n  async function delay(time) {\n    return new Promise(resolve => setTimeout(resolve, time / speed));\n  }\n  function displayNodes() {\n    graph.printGraph();\n  }\n\n  /**\n   * Mode has to be \"nearest\" or \"farthest\" and decides\n   * whether we run nearestInsertion or farthestInsertion.\n   * @param {string} mode \n   */\n  async function insertion(mode) {\n    //add the startNode\n    let toAdd = startNode;\n    var included = new Array(graph.V).fill(false);\n    included[toAdd.index] = true;\n\n    //add the first node\n    let node = null;\n    switch (mode) {\n      case \"nearest\":\n        node = findNode(startNode, included, \"closest\");\n        break;\n      case \"farthest\":\n        node = findNode(startNode, included, \"farthest\");\n        break;\n      default:\n    }\n    addEdge(startNode, node, euclidDistance(startNode, node));\n    included[node.index] = true;\n    await delay(1000);\n\n    //the second node is inserted slightly different than the remaining ones\n    let arr = null;\n    switch (mode) {\n      case \"nearest\":\n        arr = findClosestOrFarthestToIncluded(included, \"closest\");\n        break;\n      case \"farthest\":\n        arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n        break;\n      default:\n    }\n    let root = arr[0];\n    toAdd = arr[1];\n    let followUp = arr[2];\n    addEdge(root, toAdd, euclidDistance(root, toAdd));\n    addEdge(followUp, toAdd, euclidDistance(followUp, toAdd));\n    included[toAdd.index] = true;\n    await delay(1000);\n\n    //we know how many nodes well have to add, so for loop\n    for (let i = 0; i < graph.V - 3; ++i) {\n      let arr = null;\n      switch (mode) {\n        case \"nearest\":\n          arr = findClosestOrFarthestToIncluded(included, \"closest\");\n          break;\n        case \"farthest\":\n          arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n          break;\n        default:\n      }\n      let root = arr[0];\n      let toAdd = arr[1];\n      let followUp = arr[2];\n      //remove edge between root and followUp\n      removeEdge(root, followUp);\n      //mark the three nodes\n      toAdd.color = \"#ae2a0d\";\n      root.color = \"#0f61e8\";\n      followUp.color = \"#0f61e8\";\n      await delay(1000);\n      //add edges\n      addEdge(root, toAdd, euclidDistance(root, toAdd));\n      await delay(400);\n      addEdge(toAdd, followUp, euclidDistance(toAdd, followUp));\n      included[toAdd.index] = true;\n      await delay(1000);\n      toAdd.color = \"#fff\";\n      root.color = \"#fff\";\n      followUp.color = \"#fff\";\n    }\n    //algoFinished = true;\n  }\n\n  /**\n   * \n   * @param {boolean[]} included \n   * @param {string} mode \n   * @returns \n   */\n  function findClosestOrFarthestToIncluded(included, mode) {\n    if (mode !== \"closest\" && mode !== \"farthest\") throw 'Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"';\n    let curMinOrMax = Number.MAX_VALUE; //min\n    if (mode == \"farthest\") {\n      curMinOrMax = Number.MIN_VALUE; //max\n    }\n\n    let root = null;\n    let closestToRoot = null;\n\n    //iterating through all non - included nodes\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    for (let node of nonIncludedNodes) {\n      //and find closest distance to included \n      let [closestDist, potentialRoot] = findClosestNode(node, getIncludedNodes(included));\n      //if that cloeset dist is greate than curMax, than the node is considered to be farther from included\n      if (mode == \"closest\") {\n        if (closestDist < curMinOrMax) {\n          curMinOrMax = closestDist;\n          root = potentialRoot;\n          closestToRoot = node;\n        }\n      }\n      if (mode == \"farthest\") {\n        if (closestDist > curMinOrMax) {\n          curMinOrMax = closestDist;\n          root = potentialRoot;\n          closestToRoot = node;\n        }\n      }\n    }\n    let rootEdges = graph.AdjList.get(root);\n    let firstRootNeighbor = rootEdges[0].other(root);\n    if (rootEdges.length == 1) return [root, closestToRoot, firstRootNeighbor];\n    let secondRootNeighbor = rootEdges[1].other(root);\n    let newDist1 = euclidDistance(closestToRoot, firstRootNeighbor);\n    let newDist2 = euclidDistance(closestToRoot, secondRootNeighbor);\n    let oldDist1 = euclidDistance(root, firstRootNeighbor);\n    let oldDist2 = euclidDistance(root, secondRootNeighbor);\n    if (newDist1 - oldDist1 < newDist2 - oldDist2) return [root, closestToRoot, firstRootNeighbor];\n    return [root, closestToRoot, secondRootNeighbor];\n  }\n\n  /**\n   * \n   * @param {Node} node \n   * @param {Node} nodes \n   * @returns [closestDist, closestNode]\n   */\n  function findClosestNode(node, nodes) {\n    let closestNode = null;\n    let closestDist = Number.MAX_VALUE;\n    for (let v of nodes) {\n      let dist = euclidDistance(node, v);\n      if (dist < closestDist) {\n        closestDist = dist;\n        closestNode = v;\n      }\n    }\n    return [closestDist, closestNode];\n  }\n  function removeEdge(node1, node2) {\n    graph.removeEdge(node1, node2);\n  }\n\n  /**\n   * Adds an edge between the node node1 and node2 that have to exist in the graph\n   * @param {Node} node1 \n   * @param {Node} node2\n   */\n  function addEdge(node1, node2, weight) {\n    if (node1.index == node2.index) throw 'nodes cannot be the same';\n    graph.addEdge(node1, node2, weight);\n  }\n\n  /**\n   * This function runs nearestNeigbor on the global graph, starting from\n   * curNode, only visiting non-included nodes (as given by the included array).\n   * The boolean value timeOnlyFromCurNode specifies whether the function returns the\n   * total travel time from startNode to startNode, or only from curNode to startNode.\n   * @param {Node} curNode \n   * @param {boolean[]} included \n   * @param {boolean} timeOnlyFromCurNode \n   * @returns \n   */\n  async function nearestNeighbor(curNode, included, timeOnlyFromCurNode) {\n    if (timeOnlyFromCurNode == undefined) timeOnlyFromCurNode = false;\n    let time = 0;\n    //algoFinished = false;\n    included[curNode.index] = true;\n    //adj.push(curNode);\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    for (let i = 0; i < nonIncludedNodes.length; ++i) {\n      let node = findNode(curNode, included, \"closest\");\n      //add an edge between node and curNode\n      let weight = euclidDistance(node, curNode);\n      time += weight;\n      addEdge(node, curNode, weight);\n      curNode = node;\n      included[curNode.index] = true;\n\n      //adj.push(curNode);\n      await delay(300);\n    }\n    let weight = euclidDistance(curNode, startNode);\n    time += weight;\n    addEdge(curNode, startNode, weight);\n    await delay(300);\n    if (timeOnlyFromCurNode) return time;\n    return await calculateTravelTime();\n    //algoFinished = true;\n  }\n\n  async function calculateTravelTime(start) {\n    let time = 0;\n    let V = graph.V;\n    let included = new Array(V).fill(false);\n    included[startNode.index] = true;\n    let curNode = startNode;\n    //adding all nodes\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let edgesToCurNode = graph.AdjList.get(curNode);\n      for (let edge of edgesToCurNode) {\n        let neighbor = edge.other(curNode);\n        if (!included[neighbor.index]) {\n          time += edge.weight;\n          included[neighbor.index] = true;\n          curNode = neighbor;\n          break;\n        }\n      }\n    }\n    let lastEdge = graph.findEdge(curNode, startNode);\n    time += lastEdge.weight;\n    return time;\n  }\n  function getNonIncludedNodes(included) {\n    let out = [];\n    for (let v of graph.getNodes()) {\n      if (!included[v.index]) out.push(v);\n    }\n    return out;\n  }\n  function getIncludedNodes(included) {\n    let out = [];\n    for (let v of graph.getNodes()) {\n      if (included[v.index]) out.push(v);\n    }\n    return out;\n  }\n\n  /**\n   * \n   * @param {Node} curNode \n   * @param {boolean[]} included \n   * @param {double} time \n   * @returns \n   */\n  async function bruteForce(curNode, included, time) {\n    included[curNode.index] = true;\n    let neighbors = getNonIncludedNodes(included);\n    if (neighbors.length == 0) {\n      let weight = euclidDistance(startNode, curNode);\n      addEdge(startNode, curNode, weight);\n      return time + weight;\n    }\n    let minTime = Number.MAX_VALUE;\n    let bestNeighbor = null;\n    for (let neighbor of neighbors) {\n      let includedCopy = JSON.parse(JSON.stringify(included));\n      let tempGraph = copyGraph(graph);\n      addEdge(curNode, neighbor, euclidDistance(curNode, neighbor));\n      await delay(300);\n      let finishTime = await bruteForce(neighbor, includedCopy, time + euclidDistance(curNode, neighbor));\n      if (finishTime < minTime) {\n        minTime = finishTime;\n        bestNeighbor = neighbor;\n      }\n      graph = copyGraph(tempGraph);\n      await delay(300);\n    }\n    addEdge(curNode, bestNeighbor, euclidDistance(curNode, bestNeighbor));\n    await delay(400);\n    return bruteForce(bestNeighbor, included, time + euclidDistance(curNode, bestNeighbor));\n  }\n  async function nearestNeighborImproved() {\n    let curNode = startNode;\n    let included = new Array(graph.V).fill(false);\n    included[curNode.index] = true;\n    //in every iteration add one node\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let min = Number.MAX_VALUE;\n      let potentialNextNode = null;\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      //iterate through all non-included nodes\n      for (let v of nonIncludedNodes) {\n        let tempGraph = copyGraph(graph);\n        let includedCopy = JSON.parse(JSON.stringify(included));\n        addEdge(curNode, v, euclidDistance(curNode, v));\n        let time = await nearestNeighbor(v, includedCopy, true);\n        time += euclidDistance(curNode, v);\n        delay(300);\n        if (time < min) {\n          potentialNextNode = v;\n          min = time;\n        }\n        graph = copyGraph(tempGraph);\n      }\n      addEdge(curNode, potentialNextNode, euclidDistance(curNode, potentialNextNode));\n      curNode = potentialNextNode;\n      included[curNode.index] = true;\n      await delay(300);\n    }\n    addEdge(curNode, startNode, euclidDistance(curNode, startNode));\n  }\n  function copyGraph(g) {\n    let newGraph = new Graph(0);\n    for (let node of g.getNodes()) {\n      newGraph.addVertex(node);\n    }\n    for (let edge of g.getEdges()) {\n      newGraph.addEdgeFromEdge(edge);\n    }\n    return newGraph;\n  }\n\n  /**\n   * This method finds the closest or farthets Node to curNode, \n   * that is not yet inclueded (true in the included array). The \n   * mode decides if we find closest or farthets and has to be\n   * \"closest\" or \"farthsest\".\n   * @param {*} curNode \n   * @param {*} included \n   * @param {string} mode\n   * @returns \n   */\n  function findNode(curNode, included, mode) {\n    if (mode !== \"closest\" && mode !== \"farthest\") throw 'Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"';\n    let minOrMax = Number.MAX_VALUE; //min\n    if (mode == \"farthest\") minOrMax = Number.MIN_VALUE; //max\n    let curClosestOrFarthest = null;\n    for (let node of graph.getNodes()) {\n      if (included[node.index]) continue;\n      let dist = euclidDistance(curNode, node);\n      //let dist = graph.findEdge(curNode, node).weight;\n      if (mode == \"closest\") {\n        if (dist < minOrMax) {\n          minOrMax = dist;\n          curClosestOrFarthest = node;\n        }\n      } else {\n        if (dist > minOrMax) {\n          minOrMax = dist;\n          curClosestOrFarthest = node;\n        }\n      }\n    }\n    return curClosestOrFarthest;\n  }\n\n  /**\n   * \n   * @param {Node} node1 \n   * @param {Node} node2 \n   * @returns \n   */\n  function euclidDistance(node1, node2) {\n    if (!node1 || !node2) {\n      throw 'a node for dist does not exists';\n      return;\n    }\n    let result = (node1.x - node2.x) * (node1.x - node2.x) + (node1.y - node2.y) * (node1.y - node2.y);\n    return Math.sqrt(result);\n  }\n  async function christofides() {\n    await computeMST();\n    let nodesWithOddDegree = getNodesWithOddDegree(graph);\n    await findPerfectMatchingMinWeight();\n    let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n    //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n    edge.color = 255;\n    graph.addEdgeFromEdge(edge);\n    //min-cost-max matching is harder than I thought...\n  }\n\n  /**\n   * \n   * @param {Node} {even number of nodes} \n   */\n  async function findPerfectMatchingMinWeight(nodes) {}\n  function getNodesWithOddDegree(g) {\n    let out = [];\n    for (let node of g.getNodes()) {\n      if (g.getNeighbors(node).length % 2 == 1) {\n        out.push(node);\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Computes MST from the global variable totalGraph, that we also initialize here\n   */\n  async function computeMST() {\n    //first fill total graph if not already done\n    fillTotalGraph();\n    let distTo = new Array(graph.V).fill(Number.MAX_VALUE);\n    let included = new Array(graph.V).fill(false);\n    distTo[startNode.index] = 0;\n    included[startNode.index] = true;\n    updateDistances(startNode, distTo);\n    //adding V nodes to MST\n    for (let i = 0; i < graph.V - 1; ++i) {\n      let node = shortestAddableNodeToIncluded(distTo, included);\n      let [weight, root] = findClosestNode(node, getIncludedNodes(included));\n      addEdge(root, node, weight);\n      included[node.index] = true;\n      updateDistances(node, distTo);\n      await delay(300);\n    }\n  }\n  function updateDistances(node, distTo) {\n    let neighbors = totalGraph.getNeighbors(node);\n    neighbors.forEach(v => {\n      distTo[v.index] = totalGraph.findEdge(v, node).weight;\n    });\n  }\n\n  /**\n   * This function returns a node and the edge connecting this node\n   * with one that is included such that the weight is minimal.\n   * @param {double[]} distTo \n   * @param {boolean[]} included \n   */\n  function shortestAddableNodeToIncluded(distTo, included) {\n    let nonIncludedNodes = getNonIncludedNodes(included);\n    let closestDist = Number.MAX_VALUE;\n    let closestNode = null;\n    for (let node of nonIncludedNodes) {\n      if (distTo[node.index] < closestDist) {\n        closestDist = distTo[node.index];\n        closestNode = node;\n      }\n    }\n    return closestNode;\n  }\n\n  /**\n   * Creates a total graph (edges between all nodes)\n   */\n  function fillTotalGraph() {\n    if (totalGraph.V == 0) {\n      let nodes = graph.getNodes();\n      let allNodesAdded = false;\n      for (let i = 0; i < nodes.length; ++i) {\n        if (!allNodesAdded) totalGraph.addVertex(nodes[i]);\n        for (let j = i + 1; j < nodes.length; ++j) {\n          if (!allNodesAdded) totalGraph.addVertex(nodes[j]);\n          let weight = euclidDistance(nodes[i], nodes[j]);\n          let edge = new Edge(nodes[i], nodes[j], weight);\n          totalGraph.addEdgeFromEdge(edge);\n        }\n        if (!allNodesAdded) allNodesAdded = true;\n      }\n    }\n  }\n\n  /**\n   * \n   * @param {number of clusters} k \n   */\n  async function clusterNaively(k) {\n    fillTotalGraph();\n    let nodesPerCluster = totalGraph.V / k;\n    let edges = totalGraph.getEdges();\n    edges.sort((e1, e2) => e1.weight >= e2.weight ? 1 : -1);\n    //add small edges to cluster, if it doesn't exceed its size (size is naively n/k)\n    for (let e of edges) {\n      await delay(1000);\n      let v1 = e.either();\n      let v2 = e.other(v1);\n      console.log(\"v1: \" + v1.index);\n      console.log(\"v2: \" + v2.index);\n      //case 1, both nodes not included\n      if (!v1.root && !v2.root) {\n        v2.root = v1;\n        v1.isRoot = true;\n        v1.children = 1;\n        addEdge(v1, v2, e.weight);\n        console.log(\"v1 and v2 both had no root. Now children \" + v1.children);\n        continue;\n      }\n      if (v1.isRoot && !v2.root || v1.root && !v2.root) {\n        if (v1.isRoot) {\n          if (v1.children + 1 < nodesPerCluster) {\n            v2.root = v1;\n            v1.children++;\n          }\n        } else {\n          v2.root = v1.root;\n          v1.root.children++;\n        }\n        addEdge(v1, v2, e.weight);\n        continue;\n      }\n      if (v2.isRoot && !v1.root || v2.root && !v1.root) {\n        if (v2.root.children + 1 < nodesPerCluster) {\n          v1.root = v2.root;\n          v2.root.children++;\n          addEdge(v1, v2, e.weight);\n        }\n        continue;\n      }\n      if (v1.root && v2.root) {\n        if (v1.root.children + 1 + v2.root + 1 < nodesPerCluster) {\n          let temp = v1.root.children + 1;\n          v1.root = v2.root;\n          v2.root.children += temp;\n          addEdge(v1, v2, e.weight);\n        }\n        continue;\n      }\n    }\n  }\n};\nexport default sketch;","map":{"version":3,"names":["Graph","Node","Edge","WIDTH","window","innerWidth","HEIGHT","innerHeight","speed","startNode","count","graph","totalGraph","startDefined","algo","sketch","p","addingNodes","isRunning","clearingBoard","setup","createCanvas","windowResized","resizeCanvas","draw","console","log","background","fill","circle","mouseX","mouseY","nodes","getNodes","node","color","x","y","drawEdges","anyNodeHasNeighbors","E","edges","getEdges","e","stroke","v1","either","v2","other","x1","y1","x2","y2","line","removeAllEdges","tempGraph","addVertex","mouseClicked","addNodes","loop","updateWithProps","newProps","clearinBoard","delay","time","Promise","resolve","setTimeout","displayNodes","printGraph","insertion","mode","toAdd","included","Array","V","index","findNode","addEdge","euclidDistance","arr","findClosestOrFarthestToIncluded","root","followUp","i","removeEdge","curMinOrMax","Number","MAX_VALUE","MIN_VALUE","closestToRoot","nonIncludedNodes","getNonIncludedNodes","closestDist","potentialRoot","findClosestNode","getIncludedNodes","rootEdges","AdjList","get","firstRootNeighbor","length","secondRootNeighbor","newDist1","newDist2","oldDist1","oldDist2","closestNode","v","dist","node1","node2","weight","nearestNeighbor","curNode","timeOnlyFromCurNode","undefined","calculateTravelTime","start","edgesToCurNode","edge","neighbor","lastEdge","findEdge","out","push","bruteForce","neighbors","minTime","bestNeighbor","includedCopy","JSON","parse","stringify","copyGraph","finishTime","nearestNeighborImproved","min","potentialNextNode","g","newGraph","addEdgeFromEdge","minOrMax","curClosestOrFarthest","result","Math","sqrt","christofides","computeMST","nodesWithOddDegree","getNodesWithOddDegree","findPerfectMatchingMinWeight","getNeighbors","fillTotalGraph","distTo","updateDistances","shortestAddableNodeToIncluded","forEach","allNodesAdded","j","clusterNaively","k","nodesPerCluster","sort","e1","e2","isRoot","children","temp"],"sources":["/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js"],"sourcesContent":["import {Graph} from './Graph.js';\nimport {Node} from './Node.js';\nimport {Edge} from './Edge.js';\n\nlet WIDTH = window.innerWidth; //\"static variables\" like in java\nlet HEIGHT = window.innerHeight *3/ 5;\nlet speed = 5; \n\nlet startNode = new Node(WIDTH / 2, HEIGHT / 2, 0);\nlet count = 1; //count the nodes\nlet graph = new Graph(0);\nlet totalGraph = new Graph(0);\nlet startDefined = false;\nlet algo = \"Not Defined\";\n\nconst sketch = (p) => {\n\n  let addingNodes = false;\n  let isRunning = false;\n  let clearingBoard = false;\n  //let algoFinished = false;\n\n\n  p.setup = () => {\n    p.createCanvas(WIDTH, HEIGHT);\n  };\n\n  p.windowResized = () => {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight *3/5;\n    p.resizeCanvas(WIDTH, HEIGHT);\n  }\n\n  p.draw = async () => {\n    console.log(\"props are: addingNodes \" + addingNodes + \" isRunnung: \" + isRunning);\n    p.background(220);\n    //draw the nodes\n    //mouse position and already added nodes white\n    p.fill(\"#fff\");\n    p.circle(p.mouseX, p.mouseY, 10);\n    if (startDefined) {\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        if (node.color)\n          p.fill(node.color);\n        else \n          p.fill(\"#fff\");\n        p.circle(node.x, node.y, 10);\n      }\n      //draw edges \n      drawEdges(p);\n    }\n     //start node pink\n     p.fill(255, 0, 200);\n     p.circle(startNode.x, startNode.y, 10);\n\n\n     \n  };\n\n\n  function anyNodeHasNeighbors() {\n    return graph.E > 0;\n  }\n\n\n  function drawEdges(p) {\n    //displayNeihbors(startNode);\n    if (anyNodeHasNeighbors()) {\n      let edges = graph.getEdges();\n      for (let e of edges) {\n        if (e.color) {\n          p.stroke(e.color);\n        }\n        else \n          p.stroke('black');\n        let v1 = e.either();\n        let v2 = e.other(v1);\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        p.line(x1, y1, x2, y2);\n      }\n    }\n  }\n\n\n  function removeAllEdges() {\n    let tempGraph = new Graph(0);\n    for (let node of graph.getNodes())\n      tempGraph.addVertex(node);\n    graph = tempGraph;\n    totalGraph = new Graph(0);\n  }\n\n\n  \n  p.mouseClicked = async () => {\n    if (addingNodes) \n      addNodes(p);\n    //the algorithm updates the paths that p.draw() displays\n  };\n\n  /**\n   * Adding nodes to canvas\n   * @param {}\n   */\n  function addNodes(p) {\n    if (!startDefined) {\n      graph.addVertex(startNode);\n      startDefined = true;\n    }\n    p.loop();\n    //if Y is smaller than HEIGHT, the click was outside of canvas (probably on button) and the don't add\n    if (p.mouseY < HEIGHT) {\n      let node = new Node(p.mouseX, p.mouseY, count++);\n      graph.addVertex(node);\n    }\n  }\n\n    //this function \"sends\" data/additional parameters to our function. When ever the props change, the change is passed here\n    p.updateWithProps = function (newProps) {\n      if (!newProps.isRunning)\n        removeAllEdges();\n      addingNodes = newProps.addingNodes;\n      isRunning = newProps.isRunning;\n      clearingBoard = newProps.clearinBoard;\n      if (clearingBoard) {\n        startNode = new Node(WIDTH / 2, HEIGHT / 2, 0, []);\n        count = 1; //count the nodes\n        graph = new Graph(0);\n        startDefined = false;\n        totalGraph = new Graph(0);\n      }\n      if (!newProps.algo !== algo)\n        algo = newProps.algo;\n      if (!newProps.speed !== speed) \n        speed = newProps.speed;\n      if (speed == 0)\n        speed = 1;\n      //whenever a prop changes we start the loop again (it's only stopped after the path got displayed)\n      p.loop();\n    }\n/*\n    async function runAlgorithm() {\n      for (let i = 0; i < nodes.length; ++i) {\n        adj[i] = nodes[i];\n      }\n      adj[nodes.length] = nodes[0];\n    }\n*/\n\n    async function delay(time) {\n      return new Promise(resolve => setTimeout(resolve, time/speed));\n    }\n    \n    \n    function displayNodes() {\n      graph.printGraph();\n    }\n\n    /**\n     * Mode has to be \"nearest\" or \"farthest\" and decides\n     * whether we run nearestInsertion or farthestInsertion.\n     * @param {string} mode \n     */\n    async function insertion(mode) {\n      //add the startNode\n      let toAdd = startNode;\n      var included = new Array(graph.V).fill(false);\n      included[toAdd.index] = true;\n\n      //add the first node\n      let node = null;\n      switch(mode) {\n        case \"nearest\":\n          node = findNode(startNode, included, \"closest\");\n          break;\n        case \"farthest\":\n          node = findNode(startNode, included, \"farthest\");\n          break;\n        default:\n\n      }\n      addEdge(startNode, node, euclidDistance(startNode, node));\n      included[node.index] = true;\n      await delay(1000);\n\n      //the second node is inserted slightly different than the remaining ones\n      let arr = null;\n      switch(mode) {\n        case \"nearest\":\n          arr = findClosestOrFarthestToIncluded(included, \"closest\");\n          break;\n        case \"farthest\":\n          arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n          break;\n        default:\n      }\n      let root = arr[0];\n      toAdd = arr[1];\n      let followUp = arr[2];\n      addEdge(root, toAdd, euclidDistance(root, toAdd));\n      addEdge(followUp, toAdd, euclidDistance(followUp, toAdd));\n      included[toAdd.index] = true;\n      await delay(1000);\n\n      //we know how many nodes well have to add, so for loop\n      for (let i = 0; i< graph.V-3; ++i) {\n        let arr = null;\n        switch(mode) {\n          case \"nearest\":\n            arr = findClosestOrFarthestToIncluded(included, \"closest\");\n            break;\n          case \"farthest\":\n            arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n            break;\n          default:\n\n        }\n        let root = arr[0];\n        let toAdd = arr[1];\n        let followUp = arr[2];\n        //remove edge between root and followUp\n        removeEdge(root, followUp);\n        //mark the three nodes\n        toAdd.color = \"#ae2a0d\";\n        root.color = \"#0f61e8\";\n        followUp.color = \"#0f61e8\";\n        await delay(1000);\n        //add edges\n        addEdge(root, toAdd, euclidDistance(root, toAdd));\n        await delay(400);\n        addEdge(toAdd, followUp, euclidDistance(toAdd, followUp)); \n        included[toAdd.index] = true;\n        await delay(1000);\n        toAdd.color = \"#fff\";\n        root.color = \"#fff\";\n        followUp.color = \"#fff\";\n      }\n      //algoFinished = true;\n    }\n\n    /**\n     * \n     * @param {boolean[]} included \n     * @param {string} mode \n     * @returns \n     */\n    function findClosestOrFarthestToIncluded(included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n\n      let curMinOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\") {\n        curMinOrMax = Number.MIN_VALUE; //max\n      }\n      let root = null;\n      let closestToRoot = null;\n      \n      //iterating through all non - included nodes\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let node of nonIncludedNodes) {\n        //and find closest distance to included \n        let [closestDist, potentialRoot] = findClosestNode(node, getIncludedNodes(included));\n        //if that cloeset dist is greate than curMax, than the node is considered to be farther from included\n        if (mode == \"closest\") {\n          if (closestDist < curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n        if (mode == \"farthest\") {\n          if (closestDist > curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n      }\n      let rootEdges = graph.AdjList.get(root);\n\n      let firstRootNeighbor = rootEdges[0].other(root);\n      if (rootEdges.length == 1)\n        return [root, closestToRoot, firstRootNeighbor];\n      let secondRootNeighbor =  rootEdges[1].other(root);\n      let newDist1 = euclidDistance(closestToRoot, firstRootNeighbor);\n      let newDist2 = euclidDistance(closestToRoot, secondRootNeighbor);\n      let oldDist1 = euclidDistance(root, firstRootNeighbor);\n      let oldDist2 = euclidDistance(root, secondRootNeighbor);\n\n      if (newDist1 - oldDist1 < newDist2 -oldDist2)\n        return [root, closestToRoot, firstRootNeighbor];\n      return [root, closestToRoot, secondRootNeighbor];\n    }\n\n    /**\n     * \n     * @param {Node} node \n     * @param {Node} nodes \n     * @returns [closestDist, closestNode]\n     */\n    function findClosestNode(node, nodes) {\n      let closestNode = null;\n      let closestDist = Number.MAX_VALUE;\n      for (let v of nodes) {\n        let dist = euclidDistance(node, v);\n        if (dist < closestDist) {\n          closestDist = dist;\n          closestNode = v;\n        }\n      }\n      return [closestDist, closestNode];\n    }\n\n    function removeEdge(node1, node2) {\n      graph.removeEdge(node1, node2);\n    }\n\n    /**\n     * Adds an edge between the node node1 and node2 that have to exist in the graph\n     * @param {Node} node1 \n     * @param {Node} node2\n     */\n    function addEdge (node1, node2, weight) {\n      if (node1.index == node2.index)\n      throw('nodes cannot be the same');\n      graph.addEdge(node1, node2, weight);\n    }\n    \n    /**\n     * This function runs nearestNeigbor on the global graph, starting from\n     * curNode, only visiting non-included nodes (as given by the included array).\n     * The boolean value timeOnlyFromCurNode specifies whether the function returns the\n     * total travel time from startNode to startNode, or only from curNode to startNode.\n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {boolean} timeOnlyFromCurNode \n     * @returns \n     */\n    async function nearestNeighbor(curNode, included, timeOnlyFromCurNode) {\n      if (timeOnlyFromCurNode == undefined)\n        timeOnlyFromCurNode = false;\n      let time = 0;\n      //algoFinished = false;\n      included[curNode.index] = true;\n      //adj.push(curNode);\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let i = 0; i < nonIncludedNodes.length; ++i) {\n        let node = findNode(curNode, included, \"closest\");\n        //add an edge between node and curNode\n        let weight = euclidDistance(node, curNode);\n        time += weight;\n        addEdge(node, curNode, weight);\n\n        curNode = node;\n        included[curNode.index] = true;\n\n        //adj.push(curNode);\n        await delay(300);\n      }\n      let weight = euclidDistance(curNode, startNode);\n      time += weight;\n      addEdge(curNode, startNode, weight);\n      await delay(300);\n      if (timeOnlyFromCurNode)\n        return time;\n      return await calculateTravelTime();\n      //algoFinished = true;\n    }\n\n    \n    async function calculateTravelTime(start) {\n      let time = 0;\n      let V = graph.V;\n      let included = new Array(V).fill(false);\n      included[startNode.index] = true;\n      let curNode = startNode;\n      //adding all nodes\n      for (let i = 0; i<graph.V-1; ++i) {\n        let edgesToCurNode = graph.AdjList.get(curNode);\n        for (let edge of edgesToCurNode) {\n          let neighbor = edge.other(curNode);\n          if (!included[neighbor.index]) {\n            time += edge.weight;\n            included[neighbor.index] = true;\n            curNode = neighbor;\n            break;\n          }\n        }\n      }\n      let lastEdge = graph.findEdge(curNode, startNode);\n      time += lastEdge.weight;\n      return time;\n    }\n\n    function getNonIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (!included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    function getIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    /**\n     * \n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {double} time \n     * @returns \n     */\n    async function bruteForce(curNode, included, time) {\n      included[curNode.index] = true;\n      let neighbors = getNonIncludedNodes(included);\n      if (neighbors.length == 0) {\n        let weight = euclidDistance(startNode, curNode);\n        addEdge(startNode, curNode, weight);\n        return time + weight;\n      }\n      let minTime = Number.MAX_VALUE;\n      let bestNeighbor = null;\n      for (let neighbor of neighbors) {\n        let includedCopy = JSON.parse(JSON.stringify(included));\n        let tempGraph = copyGraph(graph);\n        addEdge(curNode, neighbor, euclidDistance(curNode, neighbor));\n        await delay(300);\n        let finishTime = await bruteForce(neighbor, includedCopy, time + euclidDistance(curNode, neighbor));\n        if (finishTime < minTime) {\n          minTime = finishTime;\n          bestNeighbor = neighbor;\n        }\n        graph = copyGraph(tempGraph);\n        await delay(300);\n      }\n      addEdge(curNode, bestNeighbor, euclidDistance(curNode, bestNeighbor));\n      await delay(400);\n      return bruteForce(bestNeighbor, included, time + euclidDistance(curNode, bestNeighbor));\n    }\n\n    async function nearestNeighborImproved() {\n      let curNode = startNode;\n      let included = new Array(graph.V).fill(false);\n      included[curNode.index] = true;\n      //in every iteration add one node\n      for (let i = 0; i<graph.V -1; ++i) {\n        let min = Number.MAX_VALUE;\n        let potentialNextNode = null;\n        let nonIncludedNodes = getNonIncludedNodes(included);\n        //iterate through all non-included nodes\n        for (let v of nonIncludedNodes) {\n          let tempGraph = copyGraph(graph);\n          let includedCopy = JSON.parse(JSON.stringify(included));\n          addEdge(curNode, v, euclidDistance(curNode, v));\n          let time = await nearestNeighbor(v, includedCopy, true);\n          time += euclidDistance(curNode, v);\n          delay(300);\n          if (time < min) {\n            potentialNextNode = v;\n            min = time;\n          }      \n          graph = copyGraph(tempGraph);\n        }\n        \n        addEdge(curNode, potentialNextNode, euclidDistance(curNode, potentialNextNode));\n        curNode = potentialNextNode;\n        included[curNode.index] = true;\n        await delay(300);\n      }\n      addEdge(curNode, startNode, euclidDistance(curNode, startNode));\n    }\n\n    function copyGraph(g) {\n      let newGraph = new Graph(0);\n      for (let node of g.getNodes()){\n        newGraph.addVertex(node);\n      }\n      for (let edge of g.getEdges()) {\n        newGraph.addEdgeFromEdge(edge);\n      }\n      return newGraph;\n    }\n\n    /**\n     * This method finds the closest or farthets Node to curNode, \n     * that is not yet inclueded (true in the included array). The \n     * mode decides if we find closest or farthets and has to be\n     * \"closest\" or \"farthsest\".\n     * @param {*} curNode \n     * @param {*} included \n     * @param {string} mode\n     * @returns \n     */\n    function findNode(curNode, included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n      let minOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\")\n        minOrMax = Number.MIN_VALUE; //max\n      let curClosestOrFarthest = null;\n      for (let node of graph.getNodes()) {\n        if (included[node.index])\n          continue;\n        let dist = euclidDistance(curNode, node);\n        //let dist = graph.findEdge(curNode, node).weight;\n        if (mode == \"closest\") {\n          if (dist < minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n        else {\n          if (dist > minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n      }\n      return curClosestOrFarthest;\n    }\n\n    /**\n     * \n     * @param {Node} node1 \n     * @param {Node} node2 \n     * @returns \n     */\n    function euclidDistance(node1, node2) {\n      if (!node1 || !node2) {\n        throw('a node for dist does not exists');\n        return\n      }\n      let result = (node1.x - node2.x) * (node1.x - node2.x) + (node1.y - node2.y) * (node1.y - node2.y);\n      return Math.sqrt(result);\n    }\n\n    async function christofides() {\n      await computeMST();\n      let nodesWithOddDegree = getNodesWithOddDegree(graph);  \n      await findPerfectMatchingMinWeight();\n      let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n      //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n      edge.color = 255;\n      graph.addEdgeFromEdge(edge);\n      //min-cost-max matching is harder than I thought...\n      \n    }\n\n    /**\n     * \n     * @param {Node} {even number of nodes} \n     */\n    async function findPerfectMatchingMinWeight(nodes) {\n\n\n    } \n\n    function getNodesWithOddDegree(g) {\n      let out = [];\n      for (let node of g.getNodes()) {\n        if (g.getNeighbors(node).length % 2 == 1){\n          out.push(node);\n        }\n      }\n      return out;\n    }\n\n    /**\n     * Computes MST from the global variable totalGraph, that we also initialize here\n     */\n    async function computeMST() {\n      //first fill total graph if not already done\n      fillTotalGraph();\n      let distTo = new Array(graph.V).fill(Number.MAX_VALUE);\n      let included = new Array(graph.V).fill(false);\n      distTo[startNode.index] = 0;\n      included[startNode.index] = true;\n      updateDistances(startNode, distTo);\n      //adding V nodes to MST\n      for (let i = 0; i< graph.V-1; ++i) {\n        let node = shortestAddableNodeToIncluded(distTo, included);\n        let [weight, root] = findClosestNode(node, getIncludedNodes(included));\n        addEdge(root, node, weight);\n        included[node.index] = true;\n        updateDistances(node, distTo);\n        await delay(300);\n      }\n    }\n\n    function updateDistances(node, distTo) {\n      let neighbors = totalGraph.getNeighbors(node);\n      neighbors.forEach(v => {\n        distTo[v.index] = totalGraph.findEdge(v, node).weight;\n      });\n    }\n\n    /**\n     * This function returns a node and the edge connecting this node\n     * with one that is included such that the weight is minimal.\n     * @param {double[]} distTo \n     * @param {boolean[]} included \n     */\n    function shortestAddableNodeToIncluded(distTo, included) {\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      let closestDist = Number.MAX_VALUE;\n      let closestNode = null;\n      for (let node of nonIncludedNodes) {\n        if (distTo[node.index] < closestDist) {\n          closestDist = distTo[node.index];\n          closestNode = node;\n        }\n      }\n      return closestNode;\n    }\n\n    /**\n     * Creates a total graph (edges between all nodes)\n     */\n    function fillTotalGraph() {\n      if (totalGraph.V == 0) {\n        let nodes = graph.getNodes();\n        let allNodesAdded = false;\n        for (let i = 0; i < nodes.length; ++i) {\n          if (!allNodesAdded)\n            totalGraph.addVertex(nodes[i]);\n          for (let j = i+1; j< nodes.length; ++j) {\n            if (!allNodesAdded) \n              totalGraph.addVertex(nodes[j]);\n            let weight = euclidDistance(nodes[i], nodes[j]);\n            let edge = new Edge(nodes[i], nodes[j], weight);\n            totalGraph.addEdgeFromEdge(edge);\n          }\n          if (!allNodesAdded) \n            allNodesAdded = true;\n        }\n      }\n    }\n\n    /**\n     * \n     * @param {number of clusters} k \n     */\n    async function clusterNaively(k) {\n      fillTotalGraph();\n      let nodesPerCluster = totalGraph.V/k;\n      let edges = totalGraph.getEdges();\n      edges.sort((e1, e2) => (e1.weight >= e2.weight) ? 1 : -1);\n      //add small edges to cluster, if it doesn't exceed its size (size is naively n/k)\n      for (let e of edges) {\n        await delay(1000);    \n        let v1 = e.either();\n        let v2 = e.other(v1);\n        console.log(\"v1: \" + v1.index);\n        console.log(\"v2: \" + v2.index);    \n        //case 1, both nodes not included\n        if (!v1.root && !v2.root) {\n          v2.root = v1;\n          v1.isRoot = true;\n          v1.children = 1;\n          addEdge(v1, v2, e.weight);\n          console.log(\"v1 and v2 both had no root. Now children \" + v1.children);\n          continue;\n        }\n        if (v1.isRoot && !v2.root || v1.root && !v2.root) {\n            if (v1.isRoot) {\n              if (v1.children + 1 < nodesPerCluster) {\n                v2.root = v1;\n                v1.children++;\n              }\n            }\n            else {\n              v2.root = v1.root; \n              v1.root.children++;\n            }\n            addEdge(v1, v2, e.weight);\n            continue;\n          }\n        if (v2.isRoot && !v1.root || v2.root && !v1.root) {\n          if (v2.root.children + 1 < nodesPerCluster) {\n            v1.root = v2.root;\n            v2.root.children++;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n        if (v1.root && v2.root) {\n          if (v1.root.children + 1 + v2.root + 1 < nodesPerCluster) {\n            let temp = v1.root.children + 1;\n            v1.root = v2.root;\n            v2.root.children += temp;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n      }\n\n    }\n\n}\n\nexport default sketch;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}