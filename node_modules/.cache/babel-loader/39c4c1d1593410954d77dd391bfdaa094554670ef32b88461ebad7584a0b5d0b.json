{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";import{Edge}from'./Edge.js';export var Graph=/*#__PURE__*/function(){function Graph(V){_classCallCheck(this,Graph);this.V=V;this.E=0;this.AdjList=new Map();}/**\n     * \n     * @param {Node} v \n     */_createClass(Graph,[{key:\"addVertex\",value:function addVertex(v){this.AdjList.set(v,[]);this.V++;}/**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */},{key:\"addEdge\",value:function addEdge(v,w,weight){if(weight==undefined)throw'weight is undefined';var e=new Edge(v,w,weight);this.AdjList.get(v).push(e);this.AdjList.get(w).push(e);this.E++;}},{key:\"addEdgeFromEdge\",value:function addEdgeFromEdge(edge){var v=edge.either();var w=edge.other(v);this.AdjList.get(v).push(edge);this.AdjList.get(w).push(edge);this.E++;}/**\n     * @returns {Edge[]} edges\n     */},{key:\"getEdges\",value:function getEdges(){var edgeList=[];var nodes=this.AdjList.keys();// iterate over the vertices\nvar _iterator=_createForOfIteratorHelper(nodes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var node=_step.value;//get all edges that contain that vertex\nvar edges=this.AdjList.get(node);//iterate over all these edges\nvar _iterator2=_createForOfIteratorHelper(edges),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var e=_step2.value;if(node.index<e.other(node).index)edgeList.push(e);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return edgeList;}},{key:\"removeAllEdges\",value:function removeAllEdges(){var newMap=new Map();var _iterator3=_createForOfIteratorHelper(this.AdjList),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var node=_step3.value;newMap.set(node,[]);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}this.AdjList=newMap;this.E=0;}},{key:\"removeEdge\",value:function removeEdge(v1,v2){var e=this.findEdge(v1,v2);this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e),1);this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e),1);}/**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */},{key:\"findEdge\",value:function findEdge(v1,v2){var edges=this.getEdges();var _iterator4=_createForOfIteratorHelper(edges),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var e=_step4.value;var node1=e.either();var node2=e.other(node1);if(node1.index==v1.index&&node2.index==v2.index||node2.index==v1.index&&node1.index==v2.index)return e;}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}},{key:\"getNeighbors\",value:function getNeighbors(node){var out=[];var _iterator5=_createForOfIteratorHelper(this.AdjList.get(node)),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var edge=_step5.value;out.push(edge.other(node));}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return out;}/**\n     * \n     * @returns {Node[]} nodes \n     */},{key:\"getNodes\",value:function getNodes(){var nodes=[];var _iterator6=_createForOfIteratorHelper(this.AdjList.keys()),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var node=_step6.value;nodes.push(node);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return nodes;}},{key:\"printGraph\",value:function printGraph(){// get all the vertices\nvar get_keys=this.AdjList.keys();// iterate over the vertices\nvar _iterator7=_createForOfIteratorHelper(get_keys),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var node=_step7.value;var str=node.index+\": \";//get all edges that contain that vertex\nvar edges=this.AdjList.get(node);//iterate over all these edges\nvar _iterator8=_createForOfIteratorHelper(edges),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var e=_step8.value;str+=e.other(node).index+\" (w: \"+e.weight+\")  \";}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}console.log(str);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}}}]);return Graph;}();/*\n// Using the above implemented graph class\nvar g = new Graph(6);\nvar vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n \n// adding vertices\nfor (var i = 0; i < vertices.length; i++) {\n    g.addVertex(vertices[i]);\n}\n \n// adding edges\ng.addEdge(vertices[0], vertices[1], 2);\ng.addEdge(vertices[0], vertices[2], 3);\n \n// prints all vertex and\n// its adjacency list\ng.printGraph();\n\n*/","map":{"version":3,"names":["Edge","Graph","V","E","AdjList","Map","v","set","w","weight","undefined","e","get","push","edge","either","other","edgeList","nodes","keys","node","edges","index","newMap","v1","v2","findEdge","splice","indexOf","getEdges","node1","node2","out","get_keys","str","console","log"],"sources":["/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Graph.js"],"sourcesContent":["import {Edge} from './Edge.js'; \n\nexport class Graph {\n    constructor(V) {\n        this.V = V;\n        this.E = 0;\n        this.AdjList = new Map();\n    }\n\n    /**\n     * \n     * @param {Node} v \n     */\n    addVertex(v) {\n        this.AdjList.set(v, []);\n        this.V++;\n    }\n\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */\n    addEdge(v, w, weight) {\n        if (weight == undefined)\n            throw 'weight is undefined';\n        let e = new Edge(v, w, weight); \n        this.AdjList.get(v).push(e);\n        this.AdjList.get(w).push(e);\n        this.E++;\n    }\n\n    addEdgeFromEdge(edge) {\n        let v = edge.either();\n        let w = edge.other(v);\n        this.AdjList.get(v).push(edge);\n        this.AdjList.get(w).push(edge);\n        this.E++;\n    }\n\n    /**\n     * @returns {Edge[]} edges\n     */\n    getEdges() {\n        let edgeList = [];\n        let nodes = this.AdjList.keys();\n        // iterate over the vertices\n        for (let node of nodes) {\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                if (node.index < e.other(node).index)\n                    edgeList.push(e);\n            }\n        }\n        return edgeList;\n    }\n\n    removeAllEdges() {\n        let newMap = new Map();\n        for (let node of this.AdjList) {\n            newMap.set(node, []);\n        }\n        this.AdjList = newMap;\n        this.E = 0;\n    }\n\n    removeEdge(v1, v2) {\n        let e = this.findEdge(v1, v2);\n        this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e), 1);\n        this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e), 1);\n    }\n\n    /**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */\n    findEdge(v1, v2) {\n        let edges = this.getEdges();\n        for (let e of edges) {\n            let node1 = e.either();\n            let node2 = e.other(node1);\n            if (node1.index == v1.index && node2.index == v2.index || node2.index == v1.index && node1.index == v2.index)\n                return e; \n        }\n    }\n\n    getNeighbors(node) {\n        let out = [];\n        for (let edge of this.AdjList.get(node)) {\n            out.push(edge.other(node));\n        }\n        return out;\n    }\n\n    /**\n     * \n     * @returns {Node[]} nodes \n     */\n    getNodes() {\n        let nodes = [];\n        for (let node of this.AdjList.keys()) {\n            nodes.push(node);\n        }\n        return nodes;\n    }\n\n    printGraph() {\n        // get all the vertices\n        var get_keys = this.AdjList.keys();\n \n        // iterate over the vertices\n        for (let node of get_keys) {\n            let str = node.index  + \": \";\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                str += e.other(node).index + \" (w: \" + e.weight + \")  \";\n            }\n            console.log(str);\n        }\n    }\n}\n\n\n/*\n// Using the above implemented graph class\nvar g = new Graph(6);\nvar vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n \n// adding vertices\nfor (var i = 0; i < vertices.length; i++) {\n    g.addVertex(vertices[i]);\n}\n \n// adding edges\ng.addEdge(vertices[0], vertices[1], 2);\ng.addEdge(vertices[0], vertices[2], 3);\n \n// prints all vertex and\n// its adjacency list\ng.printGraph();\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}