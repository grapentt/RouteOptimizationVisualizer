{"ast":null,"code":"export class Edmonds {\n  constructor(edges) {\n    this.maxWeightMatching = function () {\n      for (var t = 0; t < this.nVertex; t++) {\n        //console.log('DEBUG: STAGE ' + t);\n        this.label = this.filledArray(2 * this.nVertex, 0);\n        this.bestEdge = this.filledArray(2 * this.nVertex, -1);\n        this.blossomBestEdges = this.initArrArr(2 * this.nVertex);\n        this.allowEdge = this.filledArray(this.nEdge, false);\n        this.queue = [];\n        for (var v = 0; v < this.nVertex; v++) {\n          if (this.mate[v] === -1 && this.label[this.inBlossom[v]] === 0) {\n            this.assignLabel(v, 1, -1);\n          }\n        }\n        var augmented = false;\n        while (true) {\n          //console.log('DEBUG: SUBSTAGE');\n          while (this.queue.length > 0 && !augmented) {\n            v = this.queue.pop();\n            //console.log('DEBUG: POP ', 'v=' + v);\n            //console.assert(this.label[this.inBlossom[v]] == 1);\n            for (var ii = 0; ii < this.neighbend[v].length; ii++) {\n              var p = this.neighbend[v][ii];\n              var k = ~~(p / 2);\n              var w = this.endpoint[p];\n              if (this.inBlossom[v] === this.inBlossom[w]) continue;\n              if (!this.allowEdge[k]) {\n                var kSlack = this.slack(k);\n                if (kSlack <= 0) {\n                  this.allowEdge[k] = true;\n                }\n              }\n              if (this.allowEdge[k]) {\n                if (this.label[this.inBlossom[w]] === 0) {\n                  this.assignLabel(w, 2, p ^ 1);\n                } else if (this.label[this.inBlossom[w]] === 1) {\n                  var base = this.scanBlossom(v, w);\n                  if (base >= 0) {\n                    this.addBlossom(base, k);\n                  } else {\n                    this.augmentMatching(k);\n                    augmented = true;\n                    break;\n                  }\n                } else if (this.label[w] === 0) {\n                  //console.assert(this.label[this.inBlossom[w]] === 2);\n                  this.label[w] = 2;\n                  this.labelEnd[w] = p ^ 1;\n                }\n              } else if (this.label[this.inBlossom[w]] === 1) {\n                var b = this.inBlossom[v];\n                if (this.bestEdge[b] === -1 || kSlack < this.slack(this.bestEdge[b])) {\n                  this.bestEdge[b] = k;\n                }\n              } else if (this.label[w] === 0) {\n                if (this.bestEdge[w] === -1 || kSlack < this.slack(this.bestEdge[w])) {\n                  this.bestEdge[w] = k;\n                }\n              }\n            }\n          }\n          if (augmented) break;\n          var deltaType = -1;\n          var delta = [];\n          var deltaEdge = [];\n          var deltaBlossom = [];\n          for (v = 0; v < this.nVertex; v++) {\n            if (this.label[this.inBlossom[v]] === 0 && this.bestEdge[v] !== -1) {\n              var d = this.slack(this.bestEdge[v]);\n              if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 2;\n                deltaEdge = this.bestEdge[v];\n              }\n            }\n          }\n          for (b = 0; b < 2 * this.nVertex; b++) {\n            if (this.blossomParent[b] === -1 && this.label[b] === 1 && this.bestEdge[b] !== -1) {\n              kSlack = this.slack(this.bestEdge[b]);\n              ////console.assert((kSlack % 2) == 0);\n              d = kSlack / 2;\n              if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 3;\n                deltaEdge = this.bestEdge[b];\n              }\n            }\n          }\n          for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1 && this.label[b] === 2 && (deltaType === -1 || this.dualVar[b] < delta)) {\n              delta = this.dualVar[b];\n              deltaType = 4;\n              deltaBlossom = b;\n            }\n          }\n          if (deltaType === -1) {\n            deltaType = 1;\n            delta = Math.max(0, this.getMin(this.dualVar, 0, this.nVertex - 1));\n          }\n          for (v = 0; v < this.nVertex; v++) {\n            var curLabel = this.label[this.inBlossom[v]];\n            if (curLabel === 1) {\n              this.dualVar[v] -= delta;\n            } else if (curLabel === 2) {\n              this.dualVar[v] += delta;\n            }\n          }\n          for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1) {\n              if (this.label[b] === 1) {\n                this.dualVar[b] += delta;\n              } else if (this.label[b] === 2) {\n                this.dualVar[b] -= delta;\n              }\n            }\n          }\n          //console.log('DEBUG: deltaType', deltaType, ' delta: ', delta);\n          if (deltaType === 1) {\n            break;\n          } else if (deltaType === 2) {\n            this.allowEdge[deltaEdge] = true;\n            var i = this.edges[deltaEdge][0];\n            var j = this.edges[deltaEdge][1];\n            var wt = this.edges[deltaEdge][2];\n            if (this.label[this.inBlossom[i]] === 0) {\n              i = i ^ j;\n              j = j ^ i;\n              i = i ^ j;\n            }\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n          } else if (deltaType === 3) {\n            this.allowEdge[deltaEdge] = true;\n            i = this.edges[deltaEdge][0];\n            j = this.edges[deltaEdge][1];\n            wt = this.edges[deltaEdge][2];\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n          } else if (deltaType === 4) {\n            this.expandBlossom(deltaBlossom, false);\n          }\n        }\n        if (!augmented) break;\n        for (b = this.nVertex; b < this.nVertex * 2; b++) {\n          if (this.blossomParent[b] === -1 && this.blossomBase[b] >= 0 && this.label[b] === 1 && this.dualVar[b] === 0) {\n            this.expandBlossom(b, true);\n          }\n        }\n      }\n      for (v = 0; v < this.nVertex; v++) {\n        if (this.mate[v] >= 0) {\n          this.mate[v] = this.endpoint[this.mate[v]];\n        }\n      }\n      for (v = 0; v < this.nVertex; v++) {\n        //console.assert(this.mate[v] == -1 || this.mate[this.mate[v]] == v);\n      }\n      return this.mate;\n    };\n    this.slack = function (k) {\n      var i = this.edges[k][0];\n      var j = this.edges[k][1];\n      var wt = this.edges[k][2];\n      return this.dualVar[i] + this.dualVar[j] - 2 * wt;\n    };\n    this.blossomLeaves = function (b) {\n      if (b < this.nVertex) {\n        return [b];\n      }\n      var leaves = [];\n      var childList = this.blossomChilds[b];\n      for (var t = 0; t < childList.length; t++) {\n        if (childList[t] <= this.nVertex) {\n          leaves.push(childList[t]);\n        } else {\n          var leafList = this.blossomLeaves(childList[t]);\n          for (var v = 0; v < leafList.length; v++) {\n            leaves.push(leafList[v]);\n          }\n        }\n      }\n      return leaves;\n    };\n    this.assignLabel = function (w, t, p) {\n      //console.log('DEBUG: assignLabel(' + w + ',' + t + ',' + p + '}');\n      var b = this.inBlossom[w];\n      //console.assert(this.label[w] === 0 && this.label[b] === 0);\n      this.label[w] = this.label[b] = t;\n      this.labelEnd[w] = this.labelEnd[b] = p;\n      this.bestEdge[w] = this.bestEdge[b] = -1;\n      if (t === 1) {\n        this.queue.push.apply(this.queue, this.blossomLeaves(b));\n        //console.log('DEBUG: PUSH ' + this.blossomLeaves(b).toString());\n      } else if (t === 2) {\n        var base = this.blossomBase[b];\n        //console.assert(this.mate[base] >= 0);\n        this.assignLabel(this.endpoint[this.mate[base]], 1, this.mate[base] ^ 1);\n      }\n    };\n    this.scanBlossom = function (v, w) {\n      //console.log('DEBUG: scanBlossom(' + v + ',' + w + ')');\n      var path = [];\n      var base = -1;\n      while (v !== -1 || w !== -1) {\n        var b = this.inBlossom[v];\n        if (this.label[b] & 4) {\n          base = this.blossomBase[b];\n          break;\n        }\n        //console.assert(this.label[b] === 1);\n        path.push(b);\n        this.label[b] = 5;\n        //console.assert(this.labelEnd[b] === this.mate[this.blossomBase[b]]);\n        if (this.labelEnd[b] === -1) {\n          v = -1;\n        } else {\n          v = this.endpoint[this.labelEnd[b]];\n          b = this.inBlossom[v];\n          //console.assert(this.label[b] === 2);\n          //console.assert(this.labelEnd[b] >= 0);\n          v = this.endpoint[this.labelEnd[b]];\n        }\n        if (w !== -1) {\n          v = v ^ w;\n          w = w ^ v;\n          v = v ^ w;\n        }\n      }\n      for (var ii = 0; ii < path.length; ii++) {\n        b = path[ii];\n        this.label[b] = 1;\n      }\n      return base;\n    };\n    this.addBlossom = function (base, k) {\n      var v = this.edges[k][0];\n      var w = this.edges[k][1];\n      var wt = this.edges[k][2];\n      var bb = this.inBlossom[base];\n      var bv = this.inBlossom[v];\n      var bw = this.inBlossom[w];\n      var b = this.unusedBlossoms.pop();\n      //console.log('DEBUG: addBlossom(' + base + ',' + k + ')' + ' (v=' + v + ' w=' + w + ')' + ' -> ' + b);\n      this.blossomBase[b] = base;\n      this.blossomParent[b] = -1;\n      this.blossomParent[bb] = b;\n      var path = this.blossomChilds[b] = [];\n      var endPs = this.blossomEndPs[b] = [];\n      while (bv !== bb) {\n        this.blossomParent[bv] = b;\n        path.push(bv);\n        endPs.push(this.labelEnd[bv]);\n        //console.assert(this.label[bv] === 2 || (this.label[bv] === 1 && this.labelEnd[bv] === this.mate[this.blossomBase[bv]]));\n        //console.assert(this.labelEnd[bv] >= 0);\n        v = this.endpoint[this.labelEnd[bv]];\n        bv = this.inBlossom[v];\n      }\n      path.push(bb);\n      path.reverse();\n      endPs.reverse();\n      endPs.push(2 * k);\n      while (bw !== bb) {\n        this.blossomParent[bw] = b;\n        path.push(bw);\n        endPs.push(this.labelEnd[bw] ^ 1);\n        //console.assert(this.label[bw] === 2 || (this.label[bw] === 1 && this.labelEnd[bw] === this.mate[this.blossomBase[bw]]));\n        //console.assert(this.labelEnd[bw] >= 0);\n        w = this.endpoint[this.labelEnd[bw]];\n        bw = this.inBlossom[w];\n      }\n      //console.assert(this.label[bb] === 1);\n      this.label[b] = 1;\n      this.labelEnd[b] = this.labelEnd[bb];\n      this.dualVar[b] = 0;\n      var leaves = this.blossomLeaves(b);\n      for (var ii = 0; ii < leaves.length; ii++) {\n        v = leaves[ii];\n        if (this.label[this.inBlossom[v]] === 2) {\n          this.queue.push(v);\n        }\n        this.inBlossom[v] = b;\n      }\n      var bestEdgeTo = this.filledArray(2 * this.nVertex, -1);\n      for (ii = 0; ii < path.length; ii++) {\n        bv = path[ii];\n        if (this.blossomBestEdges[bv].length === 0) {\n          var nbLists = [];\n          leaves = this.blossomLeaves(bv);\n          for (var x = 0; x < leaves.length; x++) {\n            v = leaves[x];\n            nbLists[x] = [];\n            for (var y = 0; y < this.neighbend[v].length; y++) {\n              var p = this.neighbend[v][y];\n              nbLists[x].push(~~(p / 2));\n            }\n          }\n        } else {\n          nbLists = [this.blossomBestEdges[bv]];\n        }\n        //console.log('DEBUG: nbLists ' + nbLists.toString());\n        for (x = 0; x < nbLists.length; x++) {\n          var nbList = nbLists[x];\n          for (y = 0; y < nbList.length; y++) {\n            k = nbList[y];\n            var i = this.edges[k][0];\n            var j = this.edges[k][1];\n            wt = this.edges[k][2];\n            if (this.inBlossom[j] === b) {\n              i = i ^ j;\n              j = j ^ i;\n              i = i ^ j;\n            }\n            var bj = this.inBlossom[j];\n            if (bj !== b && this.label[bj] === 1 && (bestEdgeTo[bj] === -1 || this.slack(k) < this.slack(bestEdgeTo[bj]))) {\n              bestEdgeTo[bj] = k;\n            }\n          }\n        }\n        this.blossomBestEdges[bv] = [];\n        this.bestEdge[bv] = -1;\n      }\n      var be = [];\n      for (ii = 0; ii < bestEdgeTo.length; ii++) {\n        k = bestEdgeTo[ii];\n        if (k !== -1) {\n          be.push(k);\n        }\n      }\n      this.blossomBestEdges[b] = be;\n      //console.log('DEBUG: blossomBestEdges[' + b + ']= ' + this.blossomBestEdges[b].toString());\n      this.bestEdge[b] = -1;\n      for (ii = 0; ii < this.blossomBestEdges[b].length; ii++) {\n        k = this.blossomBestEdges[b][ii];\n        if (this.bestEdge[b] === -1 || this.slack(k) < this.slack(this.bestEdge[b])) {\n          this.bestEdge[b] = k;\n        }\n      }\n      //console.log('DEBUG: blossomChilds[' + b + ']= ' + this.blossomChilds[b].toString());\n    };\n    this.expandBlossom = function (b, endStage) {\n      //console.log('DEBUG: expandBlossom(' + b + ',' + endStage + ') ' + this.blossomChilds[b].toString());\n      for (var ii = 0; ii < this.blossomChilds[b].length; ii++) {\n        var s = this.blossomChilds[b][ii];\n        this.blossomParent[s] = -1;\n        if (s < this.nVertex) {\n          this.inBlossom[s] = s;\n        } else if (endStage && this.dualVar[s] === 0) {\n          this.expandBlossom(s, endStage);\n        } else {\n          var leaves = this.blossomLeaves(s);\n          for (var jj = 0; jj < leaves.length; jj++) {\n            var v = leaves[jj];\n            this.inBlossom[v] = s;\n          }\n        }\n      }\n      if (!endStage && this.label[b] === 2) {\n        //console.assert(this.labelEnd[b] >= 0);\n        var entryChild = this.inBlossom[this.endpoint[this.labelEnd[b] ^ 1]];\n        var j = this.blossomChilds[b].indexOf(entryChild);\n        if (j & 1) {\n          j -= this.blossomChilds[b].length;\n          var jStep = 1;\n          var endpTrick = 0;\n        } else {\n          jStep = -1;\n          endpTrick = 1;\n        }\n        var p = this.labelEnd[b];\n        while (j !== 0) {\n          this.label[this.endpoint[p ^ 1]] = 0;\n          this.label[this.endpoint[pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick ^ 1]] = 0;\n          this.assignLabel(this.endpoint[p ^ 1], 2, p);\n          this.allowEdge[~~(pIndex(this.blossomEndPs[b], j - endpTrick) / 2)] = true;\n          j += jStep;\n          p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n          this.allowEdge[~~(p / 2)] = true;\n          j += jStep;\n        }\n        var bv = pIndex(this.blossomChilds[b], j);\n        this.label[this.endpoint[p ^ 1]] = this.label[bv] = 2;\n        this.labelEnd[this.endpoint[p ^ 1]] = this.labelEnd[bv] = p;\n        this.bestEdge[bv] = -1;\n        j += jStep;\n        while (pIndex(this.blossomChilds[b], j) !== entryChild) {\n          bv = pIndex(this.blossomChilds[b], j);\n          if (this.label[bv] === 1) {\n            j += jStep;\n            continue;\n          }\n          leaves = this.blossomLeaves(bv);\n          for (ii = 0; ii < leaves.length; ii++) {\n            v = leaves[ii];\n            if (this.label[v] !== 0) break;\n          }\n          if (this.label[v] !== 0) {\n            //console.assert(this.label[v] === 2);\n            //console.assert(this.inBlossom[v] === bv);\n            this.label[v] = 0;\n            this.label[this.endpoint[this.mate[this.blossomBase[bv]]]] = 0;\n            this.assignLabel(v, 2, this.labelEnd[v]);\n          }\n          j += jStep;\n        }\n      }\n      this.label[b] = this.labelEnd[b] = -1;\n      this.blossomEndPs[b] = this.blossomChilds[b] = [];\n      this.blossomBase[b] = -1;\n      this.blossomBestEdges[b] = [];\n      this.bestEdge[b] = -1;\n      this.unusedBlossoms.push(b);\n    };\n    this.augmentBlossom = function (b, v) {\n      //console.log('DEBUG: augmentBlossom(' + b + ',' + v + ')');\n      var i, j;\n      var t = v;\n      while (this.blossomParent[t] !== b) {\n        t = this.blossomParent[t];\n      }\n      if (t > this.nVertex) {\n        this.augmentBlossom(t, v);\n      }\n      i = j = this.blossomChilds[b].indexOf(t);\n      if (i & 1) {\n        j -= this.blossomChilds[b].length;\n        var jStep = 1;\n        var endpTrick = 0;\n      } else {\n        jStep = -1;\n        endpTrick = 1;\n      }\n      while (j !== 0) {\n        j += jStep;\n        t = pIndex(this.blossomChilds[b], j);\n        var p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n        if (t >= this.nVertex) {\n          this.augmentBlossom(t, this.endpoint[p]);\n        }\n        j += jStep;\n        t = pIndex(this.blossomChilds[b], j);\n        if (t >= this.nVertex) {\n          this.augmentBlossom(t, this.endpoint[p ^ 1]);\n        }\n        this.mate[this.endpoint[p]] = p ^ 1;\n        this.mate[this.endpoint[p ^ 1]] = p;\n      }\n      //console.log('DEBUG: PAIR ' + this.endpoint[p] + ' ' + this.endpoint[p^1] + '(k=' + ~~(p/2) + ')');\n      this.blossomChilds[b] = this.blossomChilds[b].slice(i).concat(this.blossomChilds[b].slice(0, i));\n      this.blossomEndPs[b] = this.blossomEndPs[b].slice(i).concat(this.blossomEndPs[b].slice(0, i));\n      this.blossomBase[b] = this.blossomBase[this.blossomChilds[b][0]];\n      //console.assert(this.blossomBase[b] === v);\n    };\n    this.augmentMatching = function (k) {\n      var v = this.edges[k][0];\n      var w = this.edges[k][1];\n      //console.log('DEBUG: augmentMatching(' + k + ')' + ' (v=' + v + ' ' + 'w=' + w);\n      //console.log('DEBUG: PAIR ' + v + ' ' + w + '(k=' + k + ')');\n      for (var ii = 0; ii < 2; ii++) {\n        if (ii === 0) {\n          var s = v;\n          var p = 2 * k + 1;\n        } else {\n          s = w;\n          p = 2 * k;\n        }\n        while (true) {\n          var bs = this.inBlossom[s];\n          //console.assert(this.label[bs] === 1);\n          //console.assert(this.labelEnd[bs] === this.mate[this.blossomBase[bs]]);\n          if (bs >= this.nVertex) {\n            this.augmentBlossom(bs, s);\n          }\n          this.mate[s] = p;\n          if (this.labelEnd[bs] === -1) break;\n          var t = this.endpoint[this.labelEnd[bs]];\n          var bt = this.inBlossom[t];\n          //console.assert(this.label[bt] === 2);\n          //console.assert(this.labelEnd[bt] >= 0);\n          s = this.endpoint[this.labelEnd[bt]];\n          var j = this.endpoint[this.labelEnd[bt] ^ 1];\n          //console.assert(this.blossomBase[bt] === t);\n          if (bt >= this.nVertex) {\n            this.augmentBlossom(bt, j);\n          }\n          this.mate[j] = this.labelEnd[bt];\n          p = this.labelEnd[bt] ^ 1;\n          //console.log('DEBUG: PAIR ' + s + ' ' + t + '(k=' + ~~(p/2) + ')');\n        }\n      }\n    };\n    this.edges = edges;\n    this.nEdge = edges.length;\n    this.nVertexInit();\n    this.maxWeightInit();\n    this.endpointInit();\n    this.neighbendInit();\n    this.mate = this.filledArray(this.nVertex, -1);\n    this.label = this.filledArray(2 * this.nVertex, 0); //remove?\n    this.labelEnd = this.filledArray(2 * this.nVertex, -1);\n    this.inBlossomInit();\n    this.blossomParent = this.filledArray(2 * this.nVertex, -1);\n    this.blossomChilds = this.initArrArr(2 * this.nVertex);\n    this.blossomBaseInit();\n    this.blossomEndPs = this.initArrArr(2 * this.nVertex);\n    this.bestEdge = this.filledArray(2 * this.nVertex, -1); //remove?\n    this.blossomBestEdges = this.initArrArr(2 * this.nVertex); //remove?\n    this.unusedBlossomsInit();\n    this.dualVarInit();\n    this.allowEdge = this.filledArray(this.nEdge, false); //remove?\n    this.queue = []; //remove?\n  }\n\n  blossomBaseInit() {\n    var base = [];\n    for (var i = 0; i < this.nVertex; i++) {\n      base[i] = i;\n    }\n    var negs = this.filledArray(this.nVertex, -1);\n    this.blossomBase = base.concat(negs);\n  }\n  dualVarInit() {\n    var mw = this.filledArray(this.nVertex, this.maxWeight);\n    var zeros = this.filledArray(this.nVertex, 0);\n    this.dualVar = mw.concat(zeros);\n  }\n  unusedBlossomsInit() {\n    var i,\n      unusedBlossoms = [];\n    for (i = this.nVertex; i < 2 * this.nVertex; i++) {\n      unusedBlossoms.push(i);\n    }\n    this.unusedBlossoms = unusedBlossoms;\n  }\n  inBlossomInit() {\n    var i,\n      inBlossom = [];\n    for (i = 0; i < this.nVertex; i++) {\n      inBlossom[i] = i;\n    }\n    this.inBlossom = inBlossom;\n  }\n  neighbendInit() {\n    var k, i, j;\n    var neighbend = this.initArrArr(this.nVertex);\n    for (k = 0; k < this.nEdge; k++) {\n      i = this.edges[k][0];\n      j = this.edges[k][1];\n      neighbend[i].push(2 * k + 1);\n      neighbend[j].push(2 * k);\n    }\n    this.neighbend = neighbend;\n  }\n  endpointInit() {\n    var p;\n    var endpoint = [];\n    for (p = 0; p < 2 * this.nEdge; p++) {\n      endpoint[p] = this.edges[~~(p / 2)][p % 2];\n    }\n    this.endpoint = endpoint;\n  }\n  nVertexInit() {\n    var nVertex = 0;\n    for (var k = 0; k < this.nEdge; k++) {\n      var i = this.edges[k][0];\n      var j = this.edges[k][1];\n      if (i >= nVertex) nVertex = i + 1;\n      if (j >= nVertex) nVertex = j + 1;\n    }\n    this.nVertex = nVertex;\n  }\n  maxWeightInit() {\n    var maxWeight = 0;\n    for (var k = 0; k < this.nEdge; k++) {\n      var weight = this.edges[k][2];\n      if (weight > maxWeight) {\n        maxWeight = weight;\n      }\n    }\n    this.maxWeight = maxWeight;\n  }\n  //HELPERS//\n  filledArray(len, fill) {\n    var i,\n      newArray = [];\n    for (i = 0; i < len; i++) {\n      newArray[i] = fill;\n    }\n    return newArray;\n  }\n  initArrArr(len) {\n    var arr = [];\n    for (var i = 0; i < len; i++) {\n      arr[i] = [];\n    }\n    return arr;\n  }\n  getMin(arr, start, end) {\n    var min = Infinity;\n    for (var i = start; i <= end; i++) {\n      if (arr[i] < min) {\n        min = arr[i];\n      }\n    }\n    return min;\n  }\n  pIndex(arr, idx) {\n    //if idx is negative, go from the back\n    return idx < 0 ? arr[arr.length + idx] : arr[idx];\n  }\n}\nvar data = [[0, 1, -6], [0, 2, -10], [1, 2, -5], [2, 3, -7], [1, 3, -2]];\n\n// var edmonds = new Edmonds(data);\n\n// var result = edmonds.maxWeightMatching();\n\n// console.log(result)","map":{"version":3,"names":["Edmonds","constructor","edges","maxWeightMatching","t","nVertex","label","filledArray","bestEdge","blossomBestEdges","initArrArr","allowEdge","nEdge","queue","v","mate","inBlossom","assignLabel","augmented","length","pop","ii","neighbend","p","k","w","endpoint","kSlack","slack","base","scanBlossom","addBlossom","augmentMatching","labelEnd","b","deltaType","delta","deltaEdge","deltaBlossom","d","blossomParent","blossomBase","dualVar","Math","max","getMin","curLabel","i","j","wt","push","expandBlossom","blossomLeaves","leaves","childList","blossomChilds","leafList","apply","path","bb","bv","bw","unusedBlossoms","endPs","blossomEndPs","reverse","bestEdgeTo","nbLists","x","y","nbList","bj","be","endStage","s","jj","entryChild","indexOf","jStep","endpTrick","pIndex","augmentBlossom","slice","concat","bs","bt","nVertexInit","maxWeightInit","endpointInit","neighbendInit","inBlossomInit","blossomBaseInit","unusedBlossomsInit","dualVarInit","negs","mw","maxWeight","zeros","weight","len","fill","newArray","arr","start","end","min","Infinity","idx","data"],"sources":["/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Blossom.js"],"sourcesContent":["export class Edmonds {\n\n    constructor(edges) {\n        this.edges = edges;\n        this.nEdge = edges.length;\n        this.nVertexInit();\n        this.maxWeightInit();\n        this.endpointInit();\n        this.neighbendInit();\n        this.mate = this.filledArray(this.nVertex, -1);\n        this.label = this.filledArray(2 * this.nVertex, 0); //remove?\n        this.labelEnd = this.filledArray(2 * this.nVertex, -1);\n        this.inBlossomInit();\n        this.blossomParent = this.filledArray(2 * this.nVertex, -1);\n        this.blossomChilds = this.initArrArr(2 * this.nVertex);\n        this.blossomBaseInit();\n        this.blossomEndPs = this.initArrArr(2 * this.nVertex);\n        this.bestEdge = this.filledArray(2 * this.nVertex, -1); //remove?\n        this.blossomBestEdges = this.initArrArr(2 * this.nVertex); //remove?\n        this.unusedBlossomsInit();\n        this.dualVarInit();\n        this.allowEdge = this.filledArray(this.nEdge, false); //remove?\n        this.queue = []; //remove?\n      }\n\n    \n     maxWeightMatching = function () {\n        for (var t = 0; t < this.nVertex; t++) {\n        //console.log('DEBUG: STAGE ' + t);\n        this.label = this.filledArray(2 * this.nVertex, 0);\n        this.bestEdge = this.filledArray(2 * this.nVertex, -1);\n        this.blossomBestEdges = this.initArrArr(2 * this.nVertex);\n        this.allowEdge = this.filledArray(this.nEdge, false);\n        this.queue = [];\n        for (var v = 0; v < this.nVertex; v++) {\n            if (this.mate[v] === -1 && this.label[this.inBlossom[v]] === 0) {\n            this.assignLabel(v, 1, -1);\n            }\n        }\n        var augmented = false;\n        while (true) {\n            //console.log('DEBUG: SUBSTAGE');\n            while (this.queue.length > 0 && !augmented) {\n            v = this.queue.pop();\n            //console.log('DEBUG: POP ', 'v=' + v);\n            //console.assert(this.label[this.inBlossom[v]] == 1);\n            for (var ii = 0; ii < this.neighbend[v].length; ii++) {\n                var p = this.neighbend[v][ii];\n                var k = ~~(p / 2);\n                var w = this.endpoint[p];\n                if (this.inBlossom[v] === this.inBlossom[w]) continue;\n                if (!this.allowEdge[k]) {\n                var kSlack = this.slack(k);\n                if (kSlack <= 0) {\n                    this.allowEdge[k] = true;\n                }\n                }\n                if (this.allowEdge[k]) {\n                if (this.label[this.inBlossom[w]] === 0) {\n                    this.assignLabel(w, 2, p ^ 1);\n                } else if (this.label[this.inBlossom[w]] === 1) {\n                    var base = this.scanBlossom(v, w);\n                    if (base >= 0) {\n                    this.addBlossom(base, k);\n                    } else {\n                    this.augmentMatching(k);\n                    augmented = true;\n                    break;\n                    }\n                } else if (this.label[w] === 0) {\n                    //console.assert(this.label[this.inBlossom[w]] === 2);\n                    this.label[w] = 2;\n                    this.labelEnd[w] = p ^ 1;\n                }\n                } else if (this.label[this.inBlossom[w]] === 1) {\n                var b = this.inBlossom[v];\n                if (this.bestEdge[b] === -1 || kSlack < this.slack(this.bestEdge[b])) {\n                    this.bestEdge[b] = k;\n                }\n                } else if (this.label[w] === 0) {\n                if (this.bestEdge[w] === -1 || kSlack < this.slack(this.bestEdge[w])) {\n                    this.bestEdge[w] = k;\n                }\n                }\n            }\n            }\n            if (augmented) break;\n            var deltaType = -1;\n            var delta = [];\n            var deltaEdge = [];\n            var deltaBlossom = [];\n            for (v = 0; v < this.nVertex; v++) {\n            if (this.label[this.inBlossom[v]] === 0 && this.bestEdge[v] !== -1) {\n                var d = this.slack(this.bestEdge[v]);\n                if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 2;\n                deltaEdge = this.bestEdge[v];\n                }\n            }\n            }\n            for (b = 0; b < 2 * this.nVertex; b++) {\n            if (this.blossomParent[b] === -1 && this.label[b] === 1 && this.bestEdge[b] !== -1) {\n                kSlack = this.slack(this.bestEdge[b]);\n                ////console.assert((kSlack % 2) == 0);\n                d = kSlack / 2;\n                if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 3;\n                deltaEdge = this.bestEdge[b];\n                }\n            }\n            }\n            for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1 && this.label[b] === 2 && (deltaType === -1 || this.dualVar[b] < delta)) {\n                delta = this.dualVar[b];\n                deltaType = 4;\n                deltaBlossom = b;\n            }\n            }\n            if (deltaType === -1) {\n            deltaType = 1;\n            delta = Math.max(0, this.getMin(this.dualVar, 0, this.nVertex - 1));\n            }\n            for (v = 0; v < this.nVertex; v++) {\n            var curLabel = this.label[this.inBlossom[v]];\n            if (curLabel === 1) {\n                this.dualVar[v] -= delta;\n            } else if (curLabel === 2) {\n                this.dualVar[v] += delta;\n            }\n            }\n            for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1) {\n                if (this.label[b] === 1) {\n                this.dualVar[b] += delta;\n                } else if (this.label[b] === 2) {\n                this.dualVar[b] -= delta;\n                }\n            }\n            }\n            //console.log('DEBUG: deltaType', deltaType, ' delta: ', delta);\n            if (deltaType === 1) {\n            break;\n            } else if (deltaType === 2) {\n            this.allowEdge[deltaEdge] = true;\n            var i = this.edges[deltaEdge][0];\n            var j = this.edges[deltaEdge][1];\n            var wt = this.edges[deltaEdge][2];\n            if (this.label[this.inBlossom[i]] === 0) {\n                i = i ^ j;\n                j = j ^ i;\n                i = i ^ j;\n            }\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n            } else if (deltaType === 3) {\n            this.allowEdge[deltaEdge] = true;\n            i = this.edges[deltaEdge][0];\n            j = this.edges[deltaEdge][1];\n            wt = this.edges[deltaEdge][2];\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n            } else if (deltaType === 4) {\n            this.expandBlossom(deltaBlossom, false);\n            }\n        }\n        if (!augmented) break;\n        for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomParent[b] === -1 && this.blossomBase[b] >= 0 && this.label[b] === 1 && this.dualVar[b] === 0) {\n            this.expandBlossom(b, true);\n            }\n        }\n        }\n        for (v = 0; v < this.nVertex; v++) {\n        if (this.mate[v] >= 0) {\n            this.mate[v] = this.endpoint[this.mate[v]];\n        }\n        }\n        for (v = 0; v < this.nVertex; v++) {\n        //console.assert(this.mate[v] == -1 || this.mate[this.mate[v]] == v);\n        }\n        return this.mate;\n    };\n    \n    slack = function (k) {\n        var i = this.edges[k][0];\n        var j = this.edges[k][1];\n        var wt = this.edges[k][2];\n        return this.dualVar[i] + this.dualVar[j] - 2 * wt;\n    };\n    \n    blossomLeaves = function (b) {\n        if (b < this.nVertex) {\n        return [b];\n        }\n        var leaves = [];\n        var childList = this.blossomChilds[b];\n        for (var t = 0; t < childList.length; t++) {\n        if (childList[t] <= this.nVertex) {\n            leaves.push(childList[t]);\n        } else {\n            var leafList = this.blossomLeaves(childList[t]);\n            for (var v = 0; v < leafList.length; v++) {\n            leaves.push(leafList[v]);\n            }\n        }\n        }\n        return leaves;\n    };\n    \n    assignLabel = function (w, t, p) {\n        //console.log('DEBUG: assignLabel(' + w + ',' + t + ',' + p + '}');\n        var b = this.inBlossom[w];\n        //console.assert(this.label[w] === 0 && this.label[b] === 0);\n        this.label[w] = this.label[b] = t;\n        this.labelEnd[w] = this.labelEnd[b] = p;\n        this.bestEdge[w] = this.bestEdge[b] = -1;\n        if (t === 1) {\n        this.queue.push.apply(this.queue, this.blossomLeaves(b));\n        //console.log('DEBUG: PUSH ' + this.blossomLeaves(b).toString());\n        } else if (t === 2) {\n        var base = this.blossomBase[b];\n        //console.assert(this.mate[base] >= 0);\n        this.assignLabel(this.endpoint[this.mate[base]], 1, this.mate[base] ^ 1);\n        }\n    };\n    \n    scanBlossom = function (v, w) {\n        //console.log('DEBUG: scanBlossom(' + v + ',' + w + ')');\n        var path = [];\n        var base = -1;\n        while (v !== -1 || w !== -1) {\n        var b = this.inBlossom[v];\n        if ((this.label[b] & 4)) {\n            base = this.blossomBase[b];\n            break;\n        }\n        //console.assert(this.label[b] === 1);\n        path.push(b);\n        this.label[b] = 5;\n        //console.assert(this.labelEnd[b] === this.mate[this.blossomBase[b]]);\n        if (this.labelEnd[b] === -1) {\n            v = -1;\n        } else {\n            v = this.endpoint[this.labelEnd[b]];\n            b = this.inBlossom[v];\n            //console.assert(this.label[b] === 2);\n            //console.assert(this.labelEnd[b] >= 0);\n            v = this.endpoint[this.labelEnd[b]];\n        }\n        if (w !== -1) {\n            v = v ^ w;\n            w = w ^ v;\n            v = v ^ w;\n        }\n        }\n        for (var ii = 0; ii < path.length; ii++) {\n        b = path[ii];\n        this.label[b] = 1;\n        }\n        return base;\n    };\n    \n    addBlossom = function (base, k) {\n        var v = this.edges[k][0];\n        var w = this.edges[k][1];\n        var wt = this.edges[k][2];\n        var bb = this.inBlossom[base];\n        var bv = this.inBlossom[v];\n        var bw = this.inBlossom[w];\n        var b = this.unusedBlossoms.pop();\n        //console.log('DEBUG: addBlossom(' + base + ',' + k + ')' + ' (v=' + v + ' w=' + w + ')' + ' -> ' + b);\n        this.blossomBase[b] = base;\n        this.blossomParent[b] = -1;\n        this.blossomParent[bb] = b;\n        var path = this.blossomChilds[b] = [];\n        var endPs = this.blossomEndPs[b] = [];\n        while (bv !== bb) {\n        this.blossomParent[bv] = b;\n        path.push(bv);\n        endPs.push(this.labelEnd[bv]);\n        //console.assert(this.label[bv] === 2 || (this.label[bv] === 1 && this.labelEnd[bv] === this.mate[this.blossomBase[bv]]));\n        //console.assert(this.labelEnd[bv] >= 0);\n        v = this.endpoint[this.labelEnd[bv]];\n        bv = this.inBlossom[v];\n        }\n        path.push(bb);\n        path.reverse();\n        endPs.reverse();\n        endPs.push((2 * k));\n        while (bw !== bb) {\n        this.blossomParent[bw] = b;\n        path.push(bw);\n        endPs.push(this.labelEnd[bw] ^ 1);\n        //console.assert(this.label[bw] === 2 || (this.label[bw] === 1 && this.labelEnd[bw] === this.mate[this.blossomBase[bw]]));\n        //console.assert(this.labelEnd[bw] >= 0);\n        w = this.endpoint[this.labelEnd[bw]];\n        bw = this.inBlossom[w];\n        }\n        //console.assert(this.label[bb] === 1);\n        this.label[b] = 1;\n        this.labelEnd[b] = this.labelEnd[bb];\n        this.dualVar[b] = 0;\n        var leaves = this.blossomLeaves(b);\n        for (var ii = 0; ii < leaves.length; ii++) {\n        v = leaves[ii];\n        if (this.label[this.inBlossom[v]] === 2) {\n            this.queue.push(v);\n        }\n        this.inBlossom[v] = b;\n        }\n        var bestEdgeTo = this.filledArray(2 * this.nVertex, -1);\n        for (ii = 0; ii < path.length; ii++) {\n        bv = path[ii];\n        if (this.blossomBestEdges[bv].length === 0) {\n            var nbLists = [];\n            leaves = this.blossomLeaves(bv);\n            for (var x = 0; x < leaves.length; x++) {\n            v = leaves[x];\n            nbLists[x] = [];\n            for (var y = 0; y < this.neighbend[v].length; y++) {\n                var p = this.neighbend[v][y];\n                nbLists[x].push(~~(p / 2));\n            }\n            }\n        } else {\n            nbLists = [this.blossomBestEdges[bv]];\n        }\n        //console.log('DEBUG: nbLists ' + nbLists.toString());\n        for (x = 0; x < nbLists.length; x++) {\n            var nbList = nbLists[x];\n            for (y = 0; y < nbList.length; y++) {\n            k = nbList[y];\n            var i = this.edges[k][0];\n            var j = this.edges[k][1];\n            wt = this.edges[k][2];\n            if (this.inBlossom[j] === b) {\n                i = i ^ j;\n                j = j ^ i;\n                i = i ^ j;\n            }\n            var bj = this.inBlossom[j];\n            if (bj !== b && this.label[bj] === 1 && (bestEdgeTo[bj] === -1 || this.slack(k) < this.slack(bestEdgeTo[bj]))) {\n                bestEdgeTo[bj] = k;\n            }\n            }\n        }\n        this.blossomBestEdges[bv] = [];\n        this.bestEdge[bv] = -1;\n        }\n        var be = [];\n        for (ii = 0; ii < bestEdgeTo.length; ii++) {\n        k = bestEdgeTo[ii];\n        if (k !== -1) {\n            be.push(k);\n        }\n        }\n        this.blossomBestEdges[b] = be;\n        //console.log('DEBUG: blossomBestEdges[' + b + ']= ' + this.blossomBestEdges[b].toString());\n        this.bestEdge[b] = -1;\n        for (ii = 0; ii < this.blossomBestEdges[b].length; ii++) {\n        k = this.blossomBestEdges[b][ii];\n        if (this.bestEdge[b] === -1 || this.slack(k) < this.slack(this.bestEdge[b])) {\n            this.bestEdge[b] = k;\n        }\n        }\n        //console.log('DEBUG: blossomChilds[' + b + ']= ' + this.blossomChilds[b].toString());\n    };\n    \n    expandBlossom = function (b, endStage) {\n        //console.log('DEBUG: expandBlossom(' + b + ',' + endStage + ') ' + this.blossomChilds[b].toString());\n        for (var ii = 0; ii < this.blossomChilds[b].length; ii++) {\n        var s = this.blossomChilds[b][ii];\n        this.blossomParent[s] = -1;\n        if (s < this.nVertex) {\n            this.inBlossom[s] = s;\n        } else if (endStage && this.dualVar[s] === 0) {\n            this.expandBlossom(s, endStage);\n        } else {\n            var leaves = this.blossomLeaves(s);\n            for (var jj = 0; jj < leaves.length; jj++) {\n            var v = leaves[jj];\n            this.inBlossom[v] = s;\n            }\n        }\n        }\n        if (!endStage && this.label[b] === 2) {\n        //console.assert(this.labelEnd[b] >= 0);\n        var entryChild = this.inBlossom[this.endpoint[this.labelEnd[b] ^ 1]];\n        var j = this.blossomChilds[b].indexOf(entryChild);\n        if ((j & 1)) {\n            j -= this.blossomChilds[b].length;\n            var jStep = 1;\n            var endpTrick = 0;\n        } else {\n            jStep = -1;\n            endpTrick = 1;\n        }\n        var p = this.labelEnd[b];\n        while (j !== 0) {\n            this.label[this.endpoint[p ^ 1]] = 0;\n            this.label[this.endpoint[pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick ^ 1]] = 0;\n            this.assignLabel(this.endpoint[p ^ 1], 2, p);\n            this.allowEdge[~~(pIndex(this.blossomEndPs[b], j - endpTrick) / 2)] = true;\n            j += jStep;\n            p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n            this.allowEdge[~~(p / 2)] = true;\n            j += jStep;\n        }\n        var bv = pIndex(this.blossomChilds[b], j);\n        this.label[this.endpoint[p ^ 1]] = this.label[bv] = 2;\n    \n        this.labelEnd[this.endpoint[p ^ 1]] = this.labelEnd[bv] = p;\n        this.bestEdge[bv] = -1;\n        j += jStep;\n        while (pIndex(this.blossomChilds[b], j) !== entryChild) {\n            bv = pIndex(this.blossomChilds[b], j);\n            if (this.label[bv] === 1) {\n            j += jStep;\n            continue;\n            }\n            leaves = this.blossomLeaves(bv);\n            for (ii = 0; ii < leaves.length; ii++) {\n            v = leaves[ii];\n            if (this.label[v] !== 0) break;\n            }\n            if (this.label[v] !== 0) {\n            //console.assert(this.label[v] === 2);\n            //console.assert(this.inBlossom[v] === bv);\n            this.label[v] = 0;\n            this.label[this.endpoint[this.mate[this.blossomBase[bv]]]] = 0;\n            this.assignLabel(v, 2, this.labelEnd[v]);\n            }\n            j += jStep;\n        }\n        }\n        this.label[b] = this.labelEnd[b] = -1;\n        this.blossomEndPs[b] = this.blossomChilds[b] = [];\n        this.blossomBase[b] = -1;\n        this.blossomBestEdges[b] = [];\n        this.bestEdge[b] = -1;\n        this.unusedBlossoms.push(b);\n    };\n    \n    augmentBlossom = function (b, v) {\n        //console.log('DEBUG: augmentBlossom(' + b + ',' + v + ')');\n        var i, j;\n        var t = v;\n        while (this.blossomParent[t] !== b) {\n        t = this.blossomParent[t];\n        }\n        if (t > this.nVertex) {\n        this.augmentBlossom(t, v);\n        }\n        i = j = this.blossomChilds[b].indexOf(t);\n        if ((i & 1)) {\n        j -= this.blossomChilds[b].length;\n        var jStep = 1;\n        var endpTrick = 0;\n        } else {\n        jStep = -1;\n        endpTrick = 1;\n        }\n        while (j !== 0) {\n        j += jStep;\n        t = pIndex(this.blossomChilds[b], j);\n        var p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n        if (t >= this.nVertex) {\n            this.augmentBlossom(t, this.endpoint[p]);\n        }\n        j += jStep;\n        t = pIndex(this.blossomChilds[b], j);\n        if (t >= this.nVertex) {\n            this.augmentBlossom(t, this.endpoint[p ^ 1]);\n        }\n        this.mate[this.endpoint[p]] = p ^ 1;\n        this.mate[this.endpoint[p ^ 1]] = p;\n        }\n        //console.log('DEBUG: PAIR ' + this.endpoint[p] + ' ' + this.endpoint[p^1] + '(k=' + ~~(p/2) + ')');\n        this.blossomChilds[b] = this.blossomChilds[b].slice(i).concat(this.blossomChilds[b].slice(0, i));\n        this.blossomEndPs[b] = this.blossomEndPs[b].slice(i).concat(this.blossomEndPs[b].slice(0, i));\n        this.blossomBase[b] = this.blossomBase[this.blossomChilds[b][0]];\n        //console.assert(this.blossomBase[b] === v);\n    };\n    \n    augmentMatching = function (k) {\n        var v = this.edges[k][0];\n        var w = this.edges[k][1];\n        //console.log('DEBUG: augmentMatching(' + k + ')' + ' (v=' + v + ' ' + 'w=' + w);\n        //console.log('DEBUG: PAIR ' + v + ' ' + w + '(k=' + k + ')');\n        for (var ii = 0; ii < 2; ii++) {\n        if (ii === 0) {\n            var s = v;\n            var p = 2 * k + 1;\n        } else {\n            s = w;\n            p = 2 * k;\n        }\n        while (true) {\n            var bs = this.inBlossom[s];\n            //console.assert(this.label[bs] === 1);\n            //console.assert(this.labelEnd[bs] === this.mate[this.blossomBase[bs]]);\n            if (bs >= this.nVertex) {\n            this.augmentBlossom(bs, s);\n            }\n            this.mate[s] = p;\n            if (this.labelEnd[bs] === -1) break;\n            var t = this.endpoint[this.labelEnd[bs]];\n            var bt = this.inBlossom[t];\n            //console.assert(this.label[bt] === 2);\n            //console.assert(this.labelEnd[bt] >= 0);\n            s = this.endpoint[this.labelEnd[bt]];\n            var j = this.endpoint[this.labelEnd[bt] ^ 1];\n            //console.assert(this.blossomBase[bt] === t);\n            if (bt >= this.nVertex) {\n            this.augmentBlossom(bt, j);\n            }\n            this.mate[j] = this.labelEnd[bt];\n            p = this.labelEnd[bt] ^ 1;\n            //console.log('DEBUG: PAIR ' + s + ' ' + t + '(k=' + ~~(p/2) + ')');\n    \n    \n        }\n        }\n    };\n    \n    \n    blossomBaseInit () {\n        var base = [];\n        for (var i = 0; i < this.nVertex; i++) {\n        base[i] = i;\n        }\n        var negs = this.filledArray(this.nVertex, -1);\n        this.blossomBase = base.concat(negs);\n    };\n    dualVarInit () {\n        var mw = this.filledArray(this.nVertex, this.maxWeight);\n        var zeros = this.filledArray(this.nVertex, 0);\n        this.dualVar = mw.concat(zeros);\n    };\n    unusedBlossomsInit  () {\n        var i, unusedBlossoms = [];\n        for (i = this.nVertex; i < 2 * this.nVertex; i++) {\n        unusedBlossoms.push(i);\n        }\n        this.unusedBlossoms = unusedBlossoms;\n    };\n    inBlossomInit () {\n        var i, inBlossom = [];\n        for (i = 0; i < this.nVertex; i++) {\n        inBlossom[i] = i;\n        }\n        this.inBlossom = inBlossom;\n    };\n    neighbendInit() {\n        var k, i, j;\n        var neighbend = this.initArrArr(this.nVertex);\n        for (k = 0; k < this.nEdge; k++) {\n        i = this.edges[k][0];\n        j = this.edges[k][1];\n        neighbend[i].push(2 * k + 1);\n        neighbend[j].push(2 * k);\n        }\n        this.neighbend = neighbend;\n    };\n    endpointInit() {\n        var p;\n        var endpoint = [];\n        for (p = 0; p < 2 * this.nEdge; p++) {\n        endpoint[p] = this.edges[~~(p / 2)][p % 2];\n        }\n        this.endpoint = endpoint;\n    };\n    nVertexInit () {\n        var nVertex = 0;\n        for (var k = 0; k < this.nEdge; k++) {\n        var i = this.edges[k][0];\n        var j = this.edges[k][1];\n        if (i >= nVertex) nVertex = i + 1;\n        if (j >= nVertex) nVertex = j + 1;\n        }\n        this.nVertex = nVertex;\n    };\n    maxWeightInit() {\n        var maxWeight = 0;\n        for (var k = 0; k < this.nEdge; k++) {\n        var weight = this.edges[k][2];\n        if (weight > maxWeight) {\n            maxWeight = weight;\n        }\n        }\n        this.maxWeight = maxWeight;\n    };\n    \n    //HELPERS//\n    filledArray(len, fill) {\n        var i, newArray = [];\n        for (i = 0; i < len; i++) {\n        newArray[i] = fill;\n        }\n        return newArray;\n    }\n    \n    initArrArr(len) {\n        var arr = [];\n        for (var i = 0; i < len; i++) {\n        arr[i] = [];\n        }\n        return arr;\n    }\n    \n    getMin(arr, start, end) {\n        var min = Infinity;\n        for (var i = start; i <= end; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        }\n        return min;\n    }\n    \n    pIndex(arr, idx) {\n        //if idx is negative, go from the back\n        return idx < 0 ? arr[arr.length + idx] : arr[idx];\n    }\n}\n\n  var data = [\n    [0, 1, -6],\n    [0, 2, -10],\n    [1, 2, -5],\n    [2, 3, -7],\n    [1, 3, -2]\n  ];\n\n// var edmonds = new Edmonds(data);\n\n// var result = edmonds.maxWeightMatching();\n\n// console.log(result)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}