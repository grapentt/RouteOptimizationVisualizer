[{"/home/thomas/Desktop/GIT_Projects/my-app/src/index.js":"1","/home/thomas/Desktop/GIT_Projects/my-app/src/App.js":"2","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/index.js":"3","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/App.js":"4","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js":"5","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Graph.js":"6","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Edge.js":"7","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Node.js":"8"},{"size":535,"mtime":1676507566902,"results":"9","hashOfConfig":"10"},{"size":528,"mtime":1676507566902,"results":"11","hashOfConfig":"10"},{"size":169,"mtime":1661174117362,"results":"12","hashOfConfig":"13"},{"size":4195,"mtime":1676514433023,"results":"14","hashOfConfig":"13"},{"size":22494,"mtime":1676514531948,"results":"15","hashOfConfig":"13"},{"size":3509,"mtime":1666381479580,"results":"16","hashOfConfig":"13"},{"size":489,"mtime":1662486077226,"results":"17","hashOfConfig":"13"},{"size":122,"mtime":1662403525155,"results":"18","hashOfConfig":"13"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4x4cdi",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13t4la7",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/thomas/Desktop/GIT_Projects/my-app/src/index.js",[],[],"/home/thomas/Desktop/GIT_Projects/my-app/src/App.js",[],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/index.js",[],[],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/App.js",["46"],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Graph.js",["74","75","76","77","78","79","80","81","82","83"],[],"import {Edge} from './Edge.js'; \n\nexport class Graph {\n    constructor(V) {\n        this.V = V;\n        this.E = 0;\n        this.AdjList = new Map();\n    }\n\n    /**\n     * \n     * @param {Node} v \n     */\n    addVertex(v) {\n        this.AdjList.set(v, []);\n        this.V++;\n    }\n\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */\n    addEdge(v, w, weight) {\n        if (weight == undefined)\n            throw 'weight is undefined';\n        let e = new Edge(v, w, weight); \n        this.AdjList.get(v).push(e);\n        this.AdjList.get(w).push(e);\n        this.E++;\n    }\n\n    addEdgeFromEdge(edge) {\n        let v = edge.either();\n        let w = edge.other(v);\n        this.AdjList.get(v).push(edge);\n        this.AdjList.get(w).push(edge);\n        this.E++;\n    }\n\n    /**\n     * @returns {Edge[]} edges\n     */\n    getEdges() {\n        let edgeList = [];\n        let nodes = this.AdjList.keys();\n        // iterate over the vertices\n        for (let node of nodes) {\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                if (node.index < e.other(node).index)\n                    edgeList.push(e);\n            }\n        }\n        return edgeList;\n    }\n\n    removeAllEdges() {\n        let newMap = new Map();\n        for (let node of this.AdjList) {\n            newMap.set(node, []);\n        }\n        this.AdjList = newMap;\n        this.E = 0;\n    }\n\n    removeEdge(v1, v2) {\n        let e = this.findEdge(v1, v2);\n        this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e), 1);\n        this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e), 1);\n    }\n\n    /**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */\n    findEdge(v1, v2) {\n        let edges = this.getEdges();\n        for (let e of edges) {\n            let node1 = e.either();\n            let node2 = e.other(node1);\n            if (node1.index == v1.index && node2.index == v2.index || node2.index == v1.index && node1.index == v2.index)\n                return e; \n        }\n    }\n\n    getNeighbors(node) {\n        let out = [];\n        for (let edge of this.AdjList.get(node)) {\n            out.push(edge.other(node));\n        }\n        return out;\n    }\n\n    /**\n     * \n     * @returns {Node[]} nodes \n     */\n    getNodes() {\n        let nodes = [];\n        for (let node of this.AdjList.keys()) {\n            nodes.push(node);\n        }\n        return nodes;\n    }\n\n    printGraph() {\n        // get all the vertices\n        var get_keys = this.AdjList.keys();\n \n        // iterate over the vertices\n        for (let node of get_keys) {\n            let str = node.index  + \": \";\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                str += e.other(node).index + \" (w: \" + e.weight + \")  \";\n            }\n            console.log(str);\n        }\n    }\n}\n\n\n/*\n// Using the above implemented graph class\nvar g = new Graph(6);\nvar vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n \n// adding vertices\nfor (var i = 0; i < vertices.length; i++) {\n    g.addVertex(vertices[i]);\n}\n \n// adding edges\ng.addEdge(vertices[0], vertices[1], 2);\ng.addEdge(vertices[0], vertices[2], 3);\n \n// prints all vertex and\n// its adjacency list\ng.printGraph();\n\n*/","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Edge.js",["84"],[],"export class Edge {\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight \n     */\n    constructor(v, w, weight) {\n      this.v = v;\n      this.w = w;\n      this.weight = weight;\n    }\n\n    either() {\n        return this.v;\n    }\n\n    other(node) {\n        if (node.index == this.v.index)\n            return this.w;\n        return this.v;\n    }\n\n    toString() {\n        return this.v.index + \"-\" + this.w.index + \" (\" + this.weight + \")\";\n    }\n  }","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Node.js",[],[],{"ruleId":"85","severity":1,"message":"86","line":41,"column":14,"nodeType":"87","messageId":"88","endLine":41,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":170,"column":17,"nodeType":"87","messageId":"88","endLine":170,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":189,"column":14,"nodeType":"91","messageId":"92","endLine":189,"endColumn":26},{"ruleId":"93","severity":1,"message":"94","line":283,"column":9,"nodeType":"95","messageId":"96","endLine":283,"endColumn":93},{"ruleId":"85","severity":1,"message":"86","line":286,"column":16,"nodeType":"87","messageId":"88","endLine":286,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":298,"column":18,"nodeType":"87","messageId":"88","endLine":298,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":305,"column":18,"nodeType":"87","messageId":"88","endLine":305,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":316,"column":28,"nodeType":"87","messageId":"88","endLine":316,"endColumn":30},{"ruleId":"85","severity":1,"message":"86","line":358,"column":23,"nodeType":"87","messageId":"88","endLine":358,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":359,"column":7,"nodeType":"95","messageId":"96","endLine":359,"endColumn":41},{"ruleId":"85","severity":1,"message":"86","line":374,"column":31,"nodeType":"87","messageId":"88","endLine":374,"endColumn":33},{"ruleId":"85","severity":1,"message":"86","line":457,"column":28,"nodeType":"87","messageId":"88","endLine":457,"endColumn":30},{"ruleId":"93","severity":1,"message":"94","line":537,"column":9,"nodeType":"95","messageId":"96","endLine":537,"endColumn":93},{"ruleId":"85","severity":1,"message":"86","line":539,"column":16,"nodeType":"87","messageId":"88","endLine":539,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":547,"column":18,"nodeType":"87","messageId":"88","endLine":547,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":571,"column":9,"nodeType":"95","messageId":"96","endLine":571,"endColumn":50},{"ruleId":"97","severity":1,"message":"98","line":572,"column":9,"nodeType":"99","messageId":"100","endLine":572,"endColumn":15},{"ruleId":"89","severity":1,"message":"101","line":578,"column":20,"nodeType":"91","messageId":"92","endLine":578,"endColumn":32},{"ruleId":"85","severity":1,"message":"86","line":602,"column":45,"nodeType":"87","messageId":"88","endLine":602,"endColumn":47},{"ruleId":"85","severity":1,"message":"86","line":661,"column":24,"nodeType":"87","messageId":"88","endLine":661,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":705,"column":23,"nodeType":"104","messageId":"105","endLine":705,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":705,"column":35,"nodeType":"104","messageId":"105","endLine":705,"endColumn":37},{"ruleId":"102","severity":1,"message":"106","line":705,"column":35,"nodeType":"104","messageId":"105","endLine":705,"endColumn":37},{"ruleId":"102","severity":1,"message":"106","line":705,"column":46,"nodeType":"104","messageId":"105","endLine":705,"endColumn":48},{"ruleId":"102","severity":1,"message":"103","line":719,"column":23,"nodeType":"104","messageId":"105","endLine":719,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":719,"column":35,"nodeType":"104","messageId":"105","endLine":719,"endColumn":37},{"ruleId":"102","severity":1,"message":"106","line":719,"column":35,"nodeType":"104","messageId":"105","endLine":719,"endColumn":37},{"ruleId":"102","severity":1,"message":"106","line":719,"column":46,"nodeType":"104","messageId":"105","endLine":719,"endColumn":48},{"ruleId":"85","severity":1,"message":"86","line":26,"column":20,"nodeType":"87","messageId":"88","endLine":26,"endColumn":22},{"ruleId":"93","severity":1,"message":"94","line":27,"column":13,"nodeType":"95","messageId":"96","endLine":27,"endColumn":41},{"ruleId":"85","severity":1,"message":"86","line":87,"column":29,"nodeType":"87","messageId":"88","endLine":87,"endColumn":31},{"ruleId":"102","severity":1,"message":"103","line":87,"column":41,"nodeType":"104","messageId":"105","endLine":87,"endColumn":43},{"ruleId":"85","severity":1,"message":"86","line":87,"column":56,"nodeType":"87","messageId":"88","endLine":87,"endColumn":58},{"ruleId":"102","severity":1,"message":"103","line":87,"column":68,"nodeType":"104","messageId":"105","endLine":87,"endColumn":70},{"ruleId":"102","severity":1,"message":"106","line":87,"column":68,"nodeType":"104","messageId":"105","endLine":87,"endColumn":70},{"ruleId":"85","severity":1,"message":"86","line":87,"column":83,"nodeType":"87","messageId":"88","endLine":87,"endColumn":85},{"ruleId":"102","severity":1,"message":"106","line":87,"column":95,"nodeType":"104","messageId":"105","endLine":87,"endColumn":97},{"ruleId":"85","severity":1,"message":"86","line":87,"column":110,"nodeType":"87","messageId":"88","endLine":87,"endColumn":112},{"ruleId":"85","severity":1,"message":"86","line":19,"column":24,"nodeType":"87","messageId":"88","endLine":19,"endColumn":26},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'displayNodes' is defined but never used.","Identifier","unusedVar","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'christofides' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations."]