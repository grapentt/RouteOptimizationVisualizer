[{"/home/thomas/Desktop/GIT_Projects/my-app/src/index.js":"1","/home/thomas/Desktop/GIT_Projects/my-app/src/App.js":"2","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/index.js":"3","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/App.js":"4","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js":"5","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Graph.js":"6","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Edge.js":"7","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Node.js":"8","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Blossom.js":"9"},{"size":535,"mtime":1676507566902,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":1676507566902,"results":"12","hashOfConfig":"11"},{"size":172,"mtime":1681919238452,"results":"13","hashOfConfig":"14"},{"size":4204,"mtime":1681919238452,"results":"15","hashOfConfig":"14"},{"size":26827,"mtime":1681918616587,"results":"16","hashOfConfig":"14"},{"size":3578,"mtime":1681919238452,"results":"17","hashOfConfig":"14"},{"size":527,"mtime":1681919238452,"results":"18","hashOfConfig":"14"},{"size":122,"mtime":1662403525155,"results":"19","hashOfConfig":"14"},{"size":22925,"mtime":1681919238452,"results":"20","hashOfConfig":"14"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4x4cdi",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13t4la7",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"/home/thomas/Desktop/GIT_Projects/my-app/src/index.js",[],[],"/home/thomas/Desktop/GIT_Projects/my-app/src/App.js",[],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/index.js",[],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/App.js",["54"],[],"import React, {useState, useEffect, useRef} from \"react\";\nimport './App.css';\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport sketch from \"./sketch.js\";\nimport Select from \"react-select\";\nimport ReactSlider from \"react-slider\";\nimport 'rc-slider/assets/index.css';\n\nexport function App() {\n\n\n  const [addingNodes, setAddingNodes] = useState(false);\n  const [isRunning, setIsRunning] = useState(false);\n  const [clearingBoard, setClearingBoard] = useState(false);\n  //const algo = 'Nearest Neighbor';\n  const [algo, setSelectedAlgo] = useState(\"Not Selected\");\n  const [speed, setSpeed] = useState(5);\n  const algoOptions = [\n    { value: \"0\", label: \"Select Algorithm\" },\n    { value: \"1\", label: \"Nearest Insertion\" },\n    { value: \"2\", label: \"Farthest Insertion\" },\n    { value: \"3\", label: \"Nearest Neighbor\" },\n    { value: \"4\", label: \"Nearest Neighbor Look Ahead (made up)\" },\n    { value: \"5\", label: \"Brute Force\" },\n   // { value: \"6\", label: \"Cluster naively\" },\n    { value: \"7\", label: \"Christofides\" }\n  ];\n  const handleAlgoSelect = (e) => {\n    setAddingNodes(false);\n    setIsRunning(false);\n    setSelectedAlgo(e.label);\n  };\n  const handleSpeedSelect = (value) => {\n    setIsRunning(false);\n    setSpeed(value);\n  };\n  const [text, setText] = useState(\"Run Algorithm\");\n  const handleRunAlgoButton = () => {\n    setAddingNodes(false);\n    setClearingBoard(false);\n    if (text == \"Run Algorithm\") {\n      setremoveEdges(false);\n      setIsRunning(true);\n      setText(\"Remove Edges\");\n    }\n    else {\n      setremoveEdges(true);\n      setIsRunning(false);\n      setText(\"Run Algorithm\");\n    }\n  };\n\n  const [removeEdges, setremoveEdges] = useState(false);\n\n\n  //in the beginning we click the AddNodesButton 2, because of weird bug that it only works after clicking at least once\n  const btn =useRef();\n  useEffect(() => {btn.current.click(); setTimeout(() => btn.current.click(), 3);},[]); //setTimeout(() => {console.log('ha'); inputRef.current.handleClick() ; setAddingNodes(false); },2000);}, []);\n  \n  return (\n    <>\n    \n    <div className=\"banner\">\n      <div className=\"banner__container\">\n        <h id=\"banner\">Route Optimization Visualizer</h>\n      </div>\n    </div>\n\n      \n      <div className = \"dropdownContainer\"> \n        <Select className = \"dropdown\"\n          options={algoOptions}\n          onChange={handleAlgoSelect}        \n          value={algoOptions.find(function (option) {\n            return option.value === algo;\n          })}\n          defaultValue={{ label: \"Select Algorithm\", value: 0 }}\n          label=\"Single select\"\n        />\n      </div>\n\n\n      <div className = \"sliderContainer\">\n      <label id=\"slider-label\">Chose speed by sliding</label>\n        <ReactSlider className = \"slider\"\n        ariaLabelledby=\"slider-label\"\n        thumbClassName=\"example-thumb\"\n        trackClassName=\"example-track\"\n        max = {50}\n        renderThumb={(props, state) => <div {...props}>{state.valueNow}</div>}\n        defaultValue= {5}\n        onChange ={handleSpeedSelect}\n        />\n      </div>\n    \n\n    <div className = \"Main\">\n      <div className=\"Canvas\">\n        <ReactP5Wrapper sketch={sketch} addingNodes = {addingNodes} isRunning = {isRunning} clearinBoard = {clearingBoard} algo = {algo} speed = {speed} removeEdges = {removeEdges} /> \n      </div>\n    </div>\n\n  \n    <div className = \"Buttons\">\n      <button ref = {btn} className = \"AddNodesButton\" \n        onClick={()=>{\n                  setAddingNodes(!addingNodes);\n                  setIsRunning(false);\n                  setClearingBoard(false);\n                  } }>\n                    {addingNodes ? 'Stop adding Nodes' : 'Add Nodes'}\n        </button>\n        <button className = \"RunAlgoButton\" \n                onClick={()=>{\n                  handleRunAlgoButton();\n                  } }>\n                    {text}\n        </button>\n        <button className = \"ClearBoardButton\" \n                onClick={()=>{\n                  setAddingNodes(false);\n                  setIsRunning(false);\n                  setClearingBoard(!clearingBoard);\n                } }>\n          Clear Bord\n        </button>\n      </div>\n      \n    </>\n  );\n};\n\nexport default App;","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/sketch.js",["55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],[],"import {Graph} from './Graph.js';\nimport {Node} from './Node.js';\nimport {Edge} from './Edge.js';\nimport {Edmonds} from './Blossom.js'; \n\nlet WIDTH = window.innerWidth; //\"static variables\" like in java\nlet HEIGHT = window.innerHeight *3/ 5;\nlet speed = 5; \n\nlet startNode = new Node(WIDTH / 2, HEIGHT / 2, 0);\nlet count = 1; //count the nodes\nlet graph = new Graph(0);\nlet totalGraph = new Graph(0);\nlet startDefined = false;\nlet algo = \"Not Defined\";\nlet eulerCycle = [];\n\nconst sketch = (p) => {\n\n  let addingNodes = false;\n  let isRunning = false;\n  let clearingBoard = false;\n  //let algoFinished = false;\n\n\n  p.setup = () => {\n    p.createCanvas(WIDTH, HEIGHT);\n  };\n\n  p.windowResized = () => {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight *3/5;\n    p.resizeCanvas(WIDTH, HEIGHT);\n  }\n\n  p.draw = async () => {\n    console.log(\"props are: addingNodes \" + addingNodes + \" isRunnung: \" + isRunning);\n    p.background(220);\n    //draw the nodes\n    //mouse position and already added nodes white\n    p.fill(\"#fff\");\n    p.circle(p.mouseX, p.mouseY, 10);\n    if (startDefined) {\n      let nodes = graph.getNodes();\n      for (let node of nodes) {\n        if (node.color)\n          p.fill(node.color);\n        else \n          p.fill(\"#fff\");\n        p.circle(node.x, node.y, 10);\n      }\n      //draw edges \n      drawEdges(p);\n    }\n     //start node pink\n     p.fill(255, 0, 200);\n     p.circle(startNode.x, startNode.y, 10);\n\n     if (isRunning) {\n      isRunning = false;\n      console.log(\"hi, cur algo is: \" + algo);\n      switch(algo) {\n        case 'Nearest Insertion':\n          await insertion(\"nearest\");\n          break;\n          case 'Farthest Insertion':\n            await insertion(\"farthest\");\n            break;\n          case 'Nearest Neighbor':\n            await nearestNeighbor(startNode, new Array(graph.V).fill(false), false);\n            break;\n          case 'Nearest Neighbor Look Ahead (made up)':\n            await nearestNeighborImproved();\n            break;\n          case 'Brute Force':\n            await bruteForce(startNode, new Array(graph.V).fill(false), 0);\n            break;\n          case 'Cluster naively':\n            await clusterNaively();\n            break;\n          case 'Christofides':\n            await christofides();\n            break;\n          default:\n            isRunning = false;\n      }\n      isRunning = false;\n            //christofides();\n    }\n\n  };\n\n\n  function anyNodeHasNeighbors() {\n    return graph.E > 0;\n  }\n\n\n  function drawEdges(p) {\n    //displayNeihbors(startNode);\n    if (anyNodeHasNeighbors()) {\n      let edges = graph.getEdges();\n      for (let e of edges) {\n        if (e.color) {\n          p.stroke(e.color);\n        }\n        else \n          p.stroke('black');\n        let v1 = e.either();\n        let v2 = e.other(v1);\n        let x1 = v1.x;\n        let y1 = v1.y;\n        let x2 = v2.x;\n        let y2 = v2.y;\n        p.line(x1, y1, x2, y2);\n      }\n    }\n  }\n\n\n  function removeAllEdges() {\n    let tempGraph = new Graph(0);\n    for (let node of graph.getNodes())\n      tempGraph.addVertex(node);\n    graph = tempGraph;\n    totalGraph = new Graph(0);\n  }\n\n\n  \n  p.mouseClicked = async () => {\n    if (addingNodes) \n      addNodes(p);\n    //the algorithm updates the paths that p.draw() displays\n  };\n\n  /**\n   * Adding nodes to canvas\n   * @param {}\n   */\n  function addNodes(p) {\n    if (!startDefined) {\n      graph.addVertex(startNode);\n      startDefined = true;\n    }\n    p.loop();\n    //if Y is smaller than HEIGHT, the click was outside of canvas (probably on button) and the don't add\n    if (p.mouseY < HEIGHT && p.mouseY > 0) {\n      let node = new Node(p.mouseX, p.mouseY, count++);\n      graph.addVertex(node);\n    }\n  }\n\n    //this function \"sends\" data/additional parameters to our function. When ever the props change, the change is passed here\n    p.updateWithProps = function (newProps) {\n      if (newProps.removeEdges) {\n        removeAllEdges();\n      }\n      addingNodes = newProps.addingNodes;\n      isRunning = newProps.isRunning;\n      clearingBoard = newProps.clearinBoard;\n      if (clearingBoard) {\n        startNode = new Node(WIDTH / 2, HEIGHT / 2, 0, []);\n        count = 1; //count the nodes\n        graph = new Graph(0);\n        startDefined = false;\n        totalGraph = new Graph(0);\n      }\n      if (!newProps.algo !== algo)\n        algo = newProps.algo;\n      if (!newProps.speed !== speed) \n        speed = newProps.speed;\n      if (speed == 0)\n        speed = 1;\n      //whenever a prop changes we start the loop again (it's only stopped after the path got displayed)\n      p.loop();\n    }\n/*\n    async function runAlgorithm() {\n      for (let i = 0; i < nodes.length; ++i) {\n        adj[i] = nodes[i];\n      }\n      adj[nodes.length] = nodes[0];\n    }\n*/\n\n    async function delay(time) {\n      return new Promise(resolve => setTimeout(resolve, time/speed));\n    }\n    \n    \n    function displayNodes() {\n      graph.printGraph();\n    }\n\n    /**\n     * Mode has to be \"nearest\" or \"farthest\" and decides\n     * whether we run nearestInsertion or farthestInsertion.\n     * @param {string} mode \n     */\n    async function insertion(mode) {\n      //add the startNode\n      let toAdd = startNode;\n      var included = new Array(graph.V).fill(false);\n      included[toAdd.index] = true;\n\n      //add the first node\n      let node = null;\n      switch(mode) {\n        case \"nearest\":\n          node = findNode(startNode, included, \"closest\");\n          break;\n        case \"farthest\":\n          node = findNode(startNode, included, \"farthest\");\n          break;\n        default:\n\n      }\n      addEdge(startNode, node, euclidDistance(startNode, node));\n      included[node.index] = true;\n      await delay(1000);\n\n      //the second node is inserted slightly different than the remaining ones\n      let arr = null;\n      switch(mode) {\n        case \"nearest\":\n          arr = findClosestOrFarthestToIncluded(included, \"closest\");\n          break;\n        case \"farthest\":\n          arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n          break;\n        default:\n      }\n      let root = arr[0];\n      toAdd = arr[1];\n      let followUp = arr[2];\n      addEdge(root, toAdd, euclidDistance(root, toAdd));\n      addEdge(followUp, toAdd, euclidDistance(followUp, toAdd));\n      included[toAdd.index] = true;\n      await delay(1000);\n\n      //we know how many nodes well have to add, so for loop\n      for (let i = 0; i< graph.V-3; ++i) {\n        let arr = null;\n        switch(mode) {\n          case \"nearest\":\n            arr = findClosestOrFarthestToIncluded(included, \"closest\");\n            break;\n          case \"farthest\":\n            arr = findClosestOrFarthestToIncluded(included, \"farthest\");\n            break;\n          default:\n\n        }\n        let root = arr[0];\n        let toAdd = arr[1];\n        let followUp = arr[2];\n        //remove edge between root and followUp\n        removeEdge(root, followUp);\n        //mark the three nodes\n        toAdd.color = \"#ae2a0d\";\n        root.color = \"#0f61e8\";\n        followUp.color = \"#0f61e8\";\n        await delay(1000);\n        //add edges\n        addEdge(root, toAdd, euclidDistance(root, toAdd));\n        await delay(400);\n        addEdge(toAdd, followUp, euclidDistance(toAdd, followUp)); \n        included[toAdd.index] = true;\n        await delay(1000);\n        toAdd.color = \"#fff\";\n        root.color = \"#fff\";\n        followUp.color = \"#fff\";\n      }\n      //algoFinished = true;\n    }\n\n    /**\n     * \n     * @param {boolean[]} included \n     * @param {string} mode \n     * @returns \n     */\n    function findClosestOrFarthestToIncluded(included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n\n      let curMinOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\") {\n        curMinOrMax = Number.MIN_VALUE; //max\n      }\n      let root = null;\n      let closestToRoot = null;\n      \n      //iterating through all non - included nodes\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let node of nonIncludedNodes) {\n        //and find closest distance to included \n        let [closestDist, potentialRoot] = findClosestNode(node, getIncludedNodes(included));\n        //if that cloeset dist is greate than curMax, than the node is considered to be farther from included\n        if (mode == \"closest\") {\n          if (closestDist < curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n        if (mode == \"farthest\") {\n          if (closestDist > curMinOrMax) {\n            curMinOrMax = closestDist;\n            root = potentialRoot;\n            closestToRoot = node;\n          }\n        }\n      }\n      let rootEdges = graph.AdjList.get(root);\n\n      let firstRootNeighbor = rootEdges[0].other(root);\n      if (rootEdges.length == 1)\n        return [root, closestToRoot, firstRootNeighbor];\n      let secondRootNeighbor =  rootEdges[1].other(root);\n      let newDist1 = euclidDistance(closestToRoot, firstRootNeighbor);\n      let newDist2 = euclidDistance(closestToRoot, secondRootNeighbor);\n      let oldDist1 = euclidDistance(root, firstRootNeighbor);\n      let oldDist2 = euclidDistance(root, secondRootNeighbor);\n\n      if (newDist1 - oldDist1 < newDist2 -oldDist2)\n        return [root, closestToRoot, firstRootNeighbor];\n      return [root, closestToRoot, secondRootNeighbor];\n    }\n\n    /**\n     * \n     * @param {Node} node \n     * @param {Node} nodes \n     * @returns [closestDist, closestNode]\n     */\n    function findClosestNode(node, nodes) {\n      let closestNode = null;\n      let closestDist = Number.MAX_VALUE;\n      for (let v of nodes) {\n        let dist = euclidDistance(node, v);\n        if (dist < closestDist) {\n          closestDist = dist;\n          closestNode = v;\n        }\n      }\n      return [closestDist, closestNode];\n    }\n\n    function removeEdge(node1, node2) {\n      graph.removeEdge(node1, node2);\n    }\n\n    /**\n     * Adds an edge between the node node1 and node2 that have to exist in the graph\n     * @param {Node} node1 \n     * @param {Node} node2\n     */\n    function addEdge (node1, node2, weight) {\n      if (node1.index == node2.index)\n        throw('nodes cannot be the same');\n      graph.addEdge(node1, node2, weight);\n    }\n    \n    /**\n     * This function runs nearestNeigbor on the global graph, starting from\n     * curNode, only visiting non-included nodes (as given by the included array).\n     * The boolean value timeOnlyFromCurNode specifies whether the function returns the\n     * total travel time from startNode to startNode, or only from curNode to startNode.\n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {boolean} timeOnlyFromCurNode \n     * @returns \n     */\n    async function nearestNeighbor(curNode, included, timeOnlyFromCurNode) {\n      if (timeOnlyFromCurNode == undefined)\n        timeOnlyFromCurNode = false;\n      let time = 0;\n      //algoFinished = false;\n      included[curNode.index] = true;\n      //adj.push(curNode);\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      for (let i = 0; i < nonIncludedNodes.length; ++i) {\n        let node = findNode(curNode, included, \"closest\");\n        //add an edge between node and curNode\n        let weight = euclidDistance(node, curNode);\n        time += weight;\n        addEdge(node, curNode, weight);\n\n        curNode = node;\n        included[curNode.index] = true;\n\n        //adj.push(curNode);\n        await delay(300);\n      }\n      let weight = euclidDistance(curNode, startNode);\n      time += weight;\n      addEdge(curNode, startNode, weight);\n      await delay(300);\n      if (timeOnlyFromCurNode)\n        return time;\n      return await calculateTravelTime();\n      //algoFinished = true;\n    }\n\n    \n    async function calculateTravelTime(start) {\n      let time = 0;\n      let V = graph.V;\n      let included = new Array(V).fill(false);\n      included[startNode.index] = true;\n      let curNode = startNode;\n      //adding all nodes\n      for (let i = 0; i<graph.V-1; ++i) {\n        let edgesToCurNode = graph.AdjList.get(curNode);\n        for (let edge of edgesToCurNode) {\n          let neighbor = edge.other(curNode);\n          if (!included[neighbor.index]) {\n            time += edge.weight;\n            included[neighbor.index] = true;\n            curNode = neighbor;\n            break;\n          }\n        }\n      }\n      let lastEdge = graph.findEdge(curNode, startNode);\n      time += lastEdge.weight;\n      return time;\n    }\n\n    function getNonIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (!included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    function getIncludedNodes(included) {\n      let out = [];\n      for (let v of graph.getNodes()) {\n        if (included[v.index])\n          out.push(v);\n      }\n      return out;\n    }\n\n    /**\n     * \n     * @param {Node} curNode \n     * @param {boolean[]} included \n     * @param {double} time \n     * @returns \n     */\n    async function bruteForce(curNode, included, time) {\n      included[curNode.index] = true;\n      let neighbors = getNonIncludedNodes(included);\n      if (neighbors.length == 0) {\n        let weight = euclidDistance(startNode, curNode);\n        addEdge(startNode, curNode, weight);\n        return time + weight;\n      }\n      let minTime = Number.MAX_VALUE;\n      let bestNeighbor = null;\n      for (let neighbor of neighbors) {\n        let includedCopy = JSON.parse(JSON.stringify(included));\n        let tempGraph = copyGraph(graph);\n        addEdge(curNode, neighbor, euclidDistance(curNode, neighbor));\n        await delay(300);\n        let finishTime = await bruteForce(neighbor, includedCopy, time + euclidDistance(curNode, neighbor));\n        if (finishTime < minTime) {\n          minTime = finishTime;\n          bestNeighbor = neighbor;\n        }\n        graph = copyGraph(tempGraph);\n        await delay(300);\n      }\n      addEdge(curNode, bestNeighbor, euclidDistance(curNode, bestNeighbor));\n      await delay(400);\n      return bruteForce(bestNeighbor, included, time + euclidDistance(curNode, bestNeighbor));\n    }\n\n    async function nearestNeighborImproved() {\n      let curNode = startNode;\n      let included = new Array(graph.V).fill(false);\n      included[curNode.index] = true;\n      //in every iteration add one node\n      for (let i = 0; i<graph.V -1; ++i) {\n        let min = Number.MAX_VALUE;\n        let potentialNextNode = null;\n        let nonIncludedNodes = getNonIncludedNodes(included);\n        //iterate through all non-included nodes\n        for (let v of nonIncludedNodes) {\n          let tempGraph = copyGraph(graph);\n          let includedCopy = JSON.parse(JSON.stringify(included));\n          addEdge(curNode, v, euclidDistance(curNode, v));\n          let time = await nearestNeighbor(v, includedCopy, true);\n          time += euclidDistance(curNode, v);\n          delay(300);\n          if (time < min) {\n            potentialNextNode = v;\n            min = time;\n          }      \n          graph = copyGraph(tempGraph);\n        }\n        \n        addEdge(curNode, potentialNextNode, euclidDistance(curNode, potentialNextNode));\n        curNode = potentialNextNode;\n        included[curNode.index] = true;\n        await delay(300);\n      }\n      addEdge(curNode, startNode, euclidDistance(curNode, startNode));\n    }\n\n    function copyGraph(g) {\n      let newGraph = new Graph(0);\n      for (let node of g.getNodes()){\n        newGraph.addVertex(node);\n      }\n      for (let edge of g.getEdges()) {\n        newGraph.addEdgeFromEdge(edge);\n      }\n      return newGraph;\n    }\n\n    /**\n     * This method finds the closest or farthets Node to curNode, \n     * that is not yet inclueded (true in the included array). The \n     * mode decides if we find closest or farthets and has to be\n     * \"closest\" or \"farthsest\".\n     * @param {*} curNode \n     * @param {*} included \n     * @param {string} mode\n     * @returns \n     */\n    function findNode(curNode, included, mode) {\n      if (mode !== \"closest\" && mode !== \"farthest\")\n        throw('Invalid Input. Mode is: ' + mode + ' but has to be \"closest\" or \"farthest\"');\n      let minOrMax = Number.MAX_VALUE; //min\n      if (mode == \"farthest\")\n        minOrMax = Number.MIN_VALUE; //max\n      let curClosestOrFarthest = null;\n      for (let node of graph.getNodes()) {\n        if (included[node.index])\n          continue;\n        let dist = euclidDistance(curNode, node);\n        //let dist = graph.findEdge(curNode, node).weight;\n        if (mode == \"closest\") {\n          if (dist < minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n        else {\n          if (dist > minOrMax) {\n            minOrMax = dist;\n            curClosestOrFarthest = node;\n          }\n        }\n      }\n      return curClosestOrFarthest;\n    }\n\n    /**\n     * \n     * @param {Node} node1 \n     * @param {Node} node2 \n     * @returns \n     */\n    function euclidDistance(node1, node2) {\n      if (!node1 || !node2) {\n        throw('a node for dist does not exists');\n        return\n      }\n      let result = (node1.x - node2.x) * (node1.x - node2.x) + (node1.y - node2.y) * (node1.y - node2.y);\n      return Math.sqrt(result);\n    }\n\n    async function christofides() {\n      await computeMST();\n\n\n      let nodesWithOddDegree = await getNodesWithOddDegree(graph);  \n\n      for (var node of nodesWithOddDegree) {\n        await delay(3000);\n        console.log(\"yoo\");\n        node.color = \"#ae2a0d\";\n      }\n      // await delay(15000);\n      await findPerfectMatchingMinWeight(nodesWithOddDegree);\n      await findEulerianCycle();\n    \n      for (node of eulerCycle) {\n        console.log(node.index+  \"-\");\n      }\n      let included = new Array(graph.V).fill(false);\n      var curNode = eulerCycle.pop();\n      var temp = curNode;\n      // we have to go back to this one in the end\n      var first = curNode;\n      included[curNode.index] = true;\n      while (eulerCycle.length > 0) {\n        curNode = eulerCycle.pop();\n        if (!included[curNode.index]) {\n          included[curNode.index] = true;\n          console.log(\"Now adding: \" + temp.index +\" to \" + curNode.index);\n          addEdge(temp, curNode, euclidDistance(temp, curNode));\n          temp = curNode;\n        }\n      }\n      console.log(\"Now adding: \" + curNode.index +\" to \" + first.index);\n\n      addEdge(temp, first, euclidDistance(curNode, first));\n      // let edge = new Edge(nodesWithOddDegree[0], nodesWithOddDegree[1], euclidDistance(nodesWithOddDegree[0], nodesWithOddDegree[1]));\n      // //console.log('there are nodes with odd degree: ' + nodesWithOddDegree.length);\n      // edge.color = 255;\n      // graph.addEdgeFromEdge(edge);\n      \n    }\n\n    async function findEulerianCycle() {\n      // Find a vertex with odd degree\n      let v = graph.getNodes()[0];\n      for (var node of graph.getNodes()) {\n        if (graph.getNeighbors(node).length % 2== 1) {\n          v = node;\n          break;\n        }\n      }\n      // Print tour starting from oddv\n      await printEulerUtil(v);\n    \n    }\n\n    async function printEulerUtil(v) {\n      console.log(\"Pushing: \" + v.index);\n      eulerCycle.push(v);\n\n      //Print Euler tour starting from vertex u\n    \n      // Recur for all the vertices adjacent to\n      // this vertex\n      for (let node of graph.getNeighbors(v)) {\n        await delay(3000);\n        // If edge u-v is not removed and it's a\n        // valid next edge\n        if (await isValidNextEdge(v, node)) {\n          console.log(v.index + \"-\" + node.index);\n          graph.removeEdge(v, node);\n          await printEulerUtil(node);\n          break;\n        }\n      }\n    }\n\n\n    // The function to check if edge u-v can be considered\n    // as next edge in Euler Tout\n    async function isValidNextEdge(u, v) {\n      // The edge u-v is valid in one of the following\n      // two cases:\n      // 1) If v is the only adjacent vertex of u\n      let count = graph.getNeighbors(u).length; \n      if (count == 1) \n        return true;\n\n      // 2) If there are multiple adjacents, then u-v\n      //    is not a bridge\n      // Do following steps to check if u-v is a bridge\n      \n      // 2.a) count of vertices reachable from u\n      let visited = new Array(graph.V);\n      visited.fill(false);\n      let count1 = await DFSCount(u, visited);\n      \n      // 2.b) Remove edge (u, v) and after removing\n      // the edge, count vertices reachable from u\n      graph.removeEdge(u, v);\n      visited.fill(false);\n      let count2 = await DFSCount(u, visited);\n\n      // 2.c) Add the edge back to the graph\n      graph.addEdge(u, v, euclidDistance(u, v));\n      // 2.d) If count1 is greater, then edge (u, v)\n      // is a bridge\n      return count1 > count2 ? false : true;\n    }\n\n\n    async function DFSCount(v, visited) {\n      // Mark the current node as visited\n      visited[v.index] = true;\n      let count = 1;\n      \n      // Recur for all vertices adjacent to this vertex\n      \n      for (let node of graph.getNeighbors(v)) {\n        if (!visited[node.index]) \n          count += await DFSCount(node, visited);\n      }\n      return count;\n    }\n\n    /**\n     * \n     * @param {Node} {even number of nodes} \n     */\n    async function findPerfectMatchingMinWeight(nodes) {\n      var edmondsEdges = [];\n      for (var i = 0; i< nodes.length-1; ++i) {\n        for (var j = i+1; j < nodes.length; ++j) {\n          var v = nodes[i];\n          var w = nodes[j];\n          var weight = euclidDistance(v, w);\n          edmondsEdges.push([v.index, w.index, - weight])\n        }\n      }\n      var edmonds = new Edmonds(edmondsEdges);\n\n      var result = edmonds.maxWeightMatching();\n      \n      console.log(result)\n\n      for (var i = 0; i < result.length; ++i) {\n        var indexV = i;\n        var indexW = result[i];\n        var v = graph.getNodes().find(node => node.index === indexV);\n        var w = graph.getNodes().find(node => node.index === indexW);\n        if (indexV < indexW) {\n          addEdge(v, w, euclidDistance(v, w));\n        }\n      }\n    } \n\n    async function getNodesWithOddDegree(g) {\n      // g.printGraph();\n      let out = [];\n      for (let node of graph.getNodes()) {\n        if (graph.getNeighbors(node).length % 2 == 1){\n          out.push(node);\n        }\n      }\n      return out;\n    }\n\n    /**\n     * Computes MST from the global variable totalGraph, that we also initialize here\n     */\n    async function computeMST() {\n      //first fill total graph if not already done\n      fillTotalGraph();\n      let distTo = new Array(graph.V).fill(Number.MAX_VALUE);\n      let included = new Array(graph.V).fill(false);\n      distTo[startNode.index] = 0;\n      included[startNode.index] = true;\n      updateDistances(startNode, distTo);\n      //adding V nodes to MST\n      for (let i = 0; i< graph.V-1; ++i) {\n        let node = shortestAddableNodeToIncluded(distTo, included);\n        let [weight, root] = findClosestNode(node, getIncludedNodes(included));\n        addEdge(root, node, weight);\n        included[node.index] = true;\n        updateDistances(node, distTo);\n        graph.printGraph();\n        await delay(300);\n      }\n    }\n\n    function updateDistances(node, distTo) {\n      let neighbors = totalGraph.getNeighbors(node);\n      neighbors.forEach(v => {\n        distTo[v.index] = totalGraph.findEdge(v, node).weight;\n      });\n    }\n\n    /**\n     * This function returns a node and the edge connecting this node\n     * with one that is included such that the weight is minimal.\n     * @param {double[]} distTo \n     * @param {boolean[]} included \n     */\n    function shortestAddableNodeToIncluded(distTo, included) {\n      let nonIncludedNodes = getNonIncludedNodes(included);\n      let closestDist = Number.MAX_VALUE;\n      let closestNode = null;\n      for (let node of nonIncludedNodes) {\n        if (distTo[node.index] < closestDist) {\n          closestDist = distTo[node.index];\n          closestNode = node;\n        }\n      }\n      return closestNode;\n    }\n\n    /**\n     * Creates a total graph (edges between all nodes)\n     */\n    function fillTotalGraph() {\n      if (totalGraph.V == 0) {\n        let nodes = graph.getNodes();\n        let allNodesAdded = false;\n        for (let i = 0; i < nodes.length; ++i) {\n          if (!allNodesAdded)\n            totalGraph.addVertex(nodes[i]);\n          for (let j = i+1; j< nodes.length; ++j) {\n            if (!allNodesAdded) \n              totalGraph.addVertex(nodes[j]);\n            let weight = euclidDistance(nodes[i], nodes[j]);\n            let edge = new Edge(nodes[i], nodes[j], weight);\n            totalGraph.addEdgeFromEdge(edge);\n          }\n          if (!allNodesAdded) \n            allNodesAdded = true;\n        }\n      }\n    }\n\n    /**\n     * \n     * @param {number of clusters} k \n     */\n    async function clusterNaively(k) {\n      fillTotalGraph();\n      let nodesPerCluster = totalGraph.V/k;\n      let edges = totalGraph.getEdges();\n      edges.sort((e1, e2) => (e1.weight >= e2.weight) ? 1 : -1);\n      //add small edges to cluster, if it doesn't exceed its size (size is naively n/k)\n      for (let e of edges) {\n        await delay(1000);    \n        let v1 = e.either();\n        let v2 = e.other(v1);\n        console.log(\"v1: \" + v1.index);\n        console.log(\"v2: \" + v2.index);    \n        //case 1, both nodes not included\n        if (!v1.root && !v2.root) {\n          v2.root = v1;\n          v1.isRoot = true;\n          v1.children = 1;\n          addEdge(v1, v2, e.weight);\n          console.log(\"v1 and v2 both had no root. Now children \" + v1.children);\n          continue;\n        }\n        if (v1.isRoot && !v2.root || v1.root && !v2.root) {\n            if (v1.isRoot) {\n              if (v1.children + 1 < nodesPerCluster) {\n                v2.root = v1;\n                v1.children++;\n              }\n            }\n            else {\n              v2.root = v1.root; \n              v1.root.children++;\n            }\n            addEdge(v1, v2, e.weight);\n            continue;\n          }\n        if (v2.isRoot && !v1.root || v2.root && !v1.root) {\n          if (v2.root.children + 1 < nodesPerCluster) {\n            v1.root = v2.root;\n            v2.root.children++;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n        if (v1.root && v2.root) {\n          if (v1.root.children + 1 + v2.root + 1 < nodesPerCluster) {\n            let temp = v1.root.children + 1;\n            v1.root = v2.root;\n            v2.root.children += temp;\n            addEdge(v1, v2, e.weight);\n          }\n          continue;\n        }\n      }\n\n    }\n\n}\n\nexport default sketch;","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Graph.js",["88","89","90","91","92","93","94","95","96","97"],[],"import {Edge} from './Edge.js'; \n// import {Node} from './Node.js'; \n\nexport class Graph {\n    constructor(V) {\n        this.V = V;\n        this.E = 0;\n        this.AdjList = new Map();\n    }\n\n    /**\n     * \n     * @param {Node} v \n     */\n    addVertex(v) {\n        this.AdjList.set(v, []);\n        this.V++;\n    }\n\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight\n     */\n    addEdge(v, w, weight) {\n        if (weight == undefined)\n            throw 'weight is undefined';\n        let e = new Edge(v, w, weight); \n        this.AdjList.get(v).push(e);\n        this.AdjList.get(w).push(e);\n        this.E++;\n    }\n\n    addEdgeFromEdge(edge) {\n        let v = edge.either();\n        let w = edge.other(v);\n        this.AdjList.get(v).push(edge);\n        this.AdjList.get(w).push(edge);\n        this.E++;\n    }\n\n    /**\n     * @returns {Edge[]} edges\n     */\n    getEdges() {\n        let edgeList = [];\n        let nodes = this.AdjList.keys();\n        // iterate over the vertices\n        for (let node of nodes) {\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                if (node.index < e.other(node).index)\n                    edgeList.push(e);\n            }\n        }\n        return edgeList;\n    }\n\n    removeAllEdges() {\n        let newMap = new Map();\n        for (let node of this.AdjList) {\n            newMap.set(node, []);\n        }\n        this.AdjList = newMap;\n        this.E = 0;\n    }\n\n    removeEdge(v1, v2) {\n        let e = this.findEdge(v1, v2);\n        this.AdjList.get(v1).splice(this.AdjList.get(v1).indexOf(e), 1);\n        this.AdjList.get(v2).splice(this.AdjList.get(v2).indexOf(e), 1);\n    }\n\n    /**\n     * \n     * @param {Node} v1 \n     * @param {Node} v2 \n     * @returns \n     */\n    findEdge(v1, v2) {\n        let edges = this.getEdges();\n        for (let e of edges) {\n            let node1 = e.either();\n            let node2 = e.other(node1);\n            if (node1.index == v1.index && node2.index == v2.index || node2.index == v1.index && node1.index == v2.index)\n                return e; \n        }\n    }\n\n    getNeighbors(node) {\n        let out = [];\n        for (let edge of this.AdjList.get(node)) {\n            out.push(edge.other(node));\n        }\n        return out;\n    }\n\n    /**\n     * \n     * @returns {Node[]} nodes \n     */\n    getNodes() {\n        let nodes = [];\n        for (let node of this.AdjList.keys()) {\n            nodes.push(node);\n        }\n        return nodes;\n    }\n\n    printGraph() {\n        // get all the vertices\n        var get_keys = this.AdjList.keys();\n \n        // iterate over the vertices\n        for (let node of get_keys) {\n            let str = node.index  + \": \";\n            //get all edges that contain that vertex\n            let edges = this.AdjList.get(node);\n            //iterate over all these edges\n            for (let e of edges) {\n                str += e.other(node).index + \" (w: \" + e.weight + \")  \";\n            }\n            console.log(str);\n        }\n    }\n}\n\n// // Using the above implemented graph class\n// var g = new Graph(6);\n// var vertices = [ new Node(1,1,1), new Node(2,2,2), new Node(3,3,3) ];\n \n// // adding vertices\n// for (var i = 0; i < vertices.length; i++) {\n//     g.addVertex(vertices[i]);\n// }\n \n// // adding edges\n// g.addEdge(vertices[0], vertices[1], 2);\n// g.addEdge(vertices[0], vertices[2], 3);\n \n// // prints all vertex and\n// // its adjacency list\n// g.printGraph();\n\n","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Edge.js",["98"],[],"// import {Node} from './Node.js'; \n\n\nexport class Edge {\n    /**\n     * \n     * @param {Node} v \n     * @param {Node} w \n     * @param {double} weight \n     */\n    constructor(v, w, weight) {\n      this.v = v;\n      this.w = w;\n      this.weight = weight;\n    }\n\n    either() {\n        return this.v;\n    }\n\n    other(node) {\n        if (node.index == this.v.index)\n            return this.w;\n        return this.v;\n    }\n\n    toString() {\n        return this.v.index + \"-\" + this.w.index + \" (\" + this.weight + \")\";\n    }\n  }","/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Node.js",[],[],[],"/home/thomas/Desktop/GIT_Projects/RouteOptimizationVisualizer/src/Blossom.js",["99","100","101"],[],"export class Edmonds {\n\n    constructor(edges) {\n        this.edges = edges;\n        this.nEdge = edges.length;\n        this.nVertexInit();\n        this.maxWeightInit();\n        this.endpointInit();\n        this.neighbendInit();\n        this.mate = this.filledArray(this.nVertex, -1);\n        this.label = this.filledArray(2 * this.nVertex, 0); //remove?\n        this.labelEnd = this.filledArray(2 * this.nVertex, -1);\n        this.inBlossomInit();\n        this.blossomParent = this.filledArray(2 * this.nVertex, -1);\n        this.blossomChilds = this.initArrArr(2 * this.nVertex);\n        this.blossomBaseInit();\n        this.blossomEndPs = this.initArrArr(2 * this.nVertex);\n        this.bestEdge = this.filledArray(2 * this.nVertex, -1); //remove?\n        this.blossomBestEdges = this.initArrArr(2 * this.nVertex); //remove?\n        this.unusedBlossomsInit();\n        this.dualVarInit();\n        this.allowEdge = this.filledArray(this.nEdge, false); //remove?\n        this.queue = []; //remove?\n      }\n\n    \n     maxWeightMatching = function () {\n        for (var t = 0; t < this.nVertex; t++) {\n        //console.log('DEBUG: STAGE ' + t);\n        this.label = this.filledArray(2 * this.nVertex, 0);\n        this.bestEdge = this.filledArray(2 * this.nVertex, -1);\n        this.blossomBestEdges = this.initArrArr(2 * this.nVertex);\n        this.allowEdge = this.filledArray(this.nEdge, false);\n        this.queue = [];\n        for (var v = 0; v < this.nVertex; v++) {\n            if (this.mate[v] === -1 && this.label[this.inBlossom[v]] === 0) {\n            this.assignLabel(v, 1, -1);\n            }\n        }\n        var augmented = false;\n        while (true) {\n            //console.log('DEBUG: SUBSTAGE');\n            while (this.queue.length > 0 && !augmented) {\n            v = this.queue.pop();\n            //console.log('DEBUG: POP ', 'v=' + v);\n            //console.assert(this.label[this.inBlossom[v]] == 1);\n            for (var ii = 0; ii < this.neighbend[v].length; ii++) {\n                var p = this.neighbend[v][ii];\n                var k = ~~(p / 2);\n                var w = this.endpoint[p];\n                if (this.inBlossom[v] === this.inBlossom[w]) continue;\n                if (!this.allowEdge[k]) {\n                var kSlack = this.slack(k);\n                if (kSlack <= 0) {\n                    this.allowEdge[k] = true;\n                }\n                }\n                if (this.allowEdge[k]) {\n                if (this.label[this.inBlossom[w]] === 0) {\n                    this.assignLabel(w, 2, p ^ 1);\n                } else if (this.label[this.inBlossom[w]] === 1) {\n                    var base = this.scanBlossom(v, w);\n                    if (base >= 0) {\n                    this.addBlossom(base, k);\n                    } else {\n                    this.augmentMatching(k);\n                    augmented = true;\n                    break;\n                    }\n                } else if (this.label[w] === 0) {\n                    //console.assert(this.label[this.inBlossom[w]] === 2);\n                    this.label[w] = 2;\n                    this.labelEnd[w] = p ^ 1;\n                }\n                } else if (this.label[this.inBlossom[w]] === 1) {\n                var b = this.inBlossom[v];\n                if (this.bestEdge[b] === -1 || kSlack < this.slack(this.bestEdge[b])) {\n                    this.bestEdge[b] = k;\n                }\n                } else if (this.label[w] === 0) {\n                if (this.bestEdge[w] === -1 || kSlack < this.slack(this.bestEdge[w])) {\n                    this.bestEdge[w] = k;\n                }\n                }\n            }\n            }\n            if (augmented) break;\n            var deltaType = -1;\n            var delta = [];\n            var deltaEdge = [];\n            var deltaBlossom = [];\n            for (v = 0; v < this.nVertex; v++) {\n            if (this.label[this.inBlossom[v]] === 0 && this.bestEdge[v] !== -1) {\n                var d = this.slack(this.bestEdge[v]);\n                if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 2;\n                deltaEdge = this.bestEdge[v];\n                }\n            }\n            }\n            for (b = 0; b < 2 * this.nVertex; b++) {\n            if (this.blossomParent[b] === -1 && this.label[b] === 1 && this.bestEdge[b] !== -1) {\n                kSlack = this.slack(this.bestEdge[b]);\n                ////console.assert((kSlack % 2) == 0);\n                d = kSlack / 2;\n                if (deltaType === -1 || d < delta) {\n                delta = d;\n                deltaType = 3;\n                deltaEdge = this.bestEdge[b];\n                }\n            }\n            }\n            for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1 && this.label[b] === 2 && (deltaType === -1 || this.dualVar[b] < delta)) {\n                delta = this.dualVar[b];\n                deltaType = 4;\n                deltaBlossom = b;\n            }\n            }\n            if (deltaType === -1) {\n            deltaType = 1;\n            delta = Math.max(0, this.getMin(this.dualVar, 0, this.nVertex - 1));\n            }\n            for (v = 0; v < this.nVertex; v++) {\n            var curLabel = this.label[this.inBlossom[v]];\n            if (curLabel === 1) {\n                this.dualVar[v] -= delta;\n            } else if (curLabel === 2) {\n                this.dualVar[v] += delta;\n            }\n            }\n            for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1) {\n                if (this.label[b] === 1) {\n                this.dualVar[b] += delta;\n                } else if (this.label[b] === 2) {\n                this.dualVar[b] -= delta;\n                }\n            }\n            }\n            //console.log('DEBUG: deltaType', deltaType, ' delta: ', delta);\n            if (deltaType === 1) {\n            break;\n            } else if (deltaType === 2) {\n            this.allowEdge[deltaEdge] = true;\n            var i = this.edges[deltaEdge][0];\n            var j = this.edges[deltaEdge][1];\n            var wt = this.edges[deltaEdge][2];\n            if (this.label[this.inBlossom[i]] === 0) {\n                i = i ^ j;\n                j = j ^ i;\n                i = i ^ j;\n            }\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n            } else if (deltaType === 3) {\n            this.allowEdge[deltaEdge] = true;\n            i = this.edges[deltaEdge][0];\n            j = this.edges[deltaEdge][1];\n            wt = this.edges[deltaEdge][2];\n            //console.assert(this.label[this.inBlossom[i]] == 1);\n            this.queue.push(i);\n            } else if (deltaType === 4) {\n            this.expandBlossom(deltaBlossom, false);\n            }\n        }\n        if (!augmented) break;\n        for (b = this.nVertex; b < this.nVertex * 2; b++) {\n            if (this.blossomParent[b] === -1 && this.blossomBase[b] >= 0 && this.label[b] === 1 && this.dualVar[b] === 0) {\n            this.expandBlossom(b, true);\n            }\n        }\n        }\n        for (v = 0; v < this.nVertex; v++) {\n        if (this.mate[v] >= 0) {\n            this.mate[v] = this.endpoint[this.mate[v]];\n        }\n        }\n        for (v = 0; v < this.nVertex; v++) {\n        //console.assert(this.mate[v] == -1 || this.mate[this.mate[v]] == v);\n        }\n        return this.mate;\n    };\n    \n    slack = function (k) {\n        var i = this.edges[k][0];\n        var j = this.edges[k][1];\n        var wt = this.edges[k][2];\n        return this.dualVar[i] + this.dualVar[j] - 2 * wt;\n    };\n    \n    blossomLeaves = function (b) {\n        if (b < this.nVertex) {\n        return [b];\n        }\n        var leaves = [];\n        var childList = this.blossomChilds[b];\n        for (var t = 0; t < childList.length; t++) {\n        if (childList[t] <= this.nVertex) {\n            leaves.push(childList[t]);\n        } else {\n            var leafList = this.blossomLeaves(childList[t]);\n            for (var v = 0; v < leafList.length; v++) {\n            leaves.push(leafList[v]);\n            }\n        }\n        }\n        return leaves;\n    };\n    \n    assignLabel = function (w, t, p) {\n        //console.log('DEBUG: assignLabel(' + w + ',' + t + ',' + p + '}');\n        var b = this.inBlossom[w];\n        //console.assert(this.label[w] === 0 && this.label[b] === 0);\n        this.label[w] = this.label[b] = t;\n        this.labelEnd[w] = this.labelEnd[b] = p;\n        this.bestEdge[w] = this.bestEdge[b] = -1;\n        if (t === 1) {\n        this.queue.push.apply(this.queue, this.blossomLeaves(b));\n        //console.log('DEBUG: PUSH ' + this.blossomLeaves(b).toString());\n        } else if (t === 2) {\n        var base = this.blossomBase[b];\n        //console.assert(this.mate[base] >= 0);\n        this.assignLabel(this.endpoint[this.mate[base]], 1, this.mate[base] ^ 1);\n        }\n    };\n    \n    scanBlossom = function (v, w) {\n        //console.log('DEBUG: scanBlossom(' + v + ',' + w + ')');\n        var path = [];\n        var base = -1;\n        while (v !== -1 || w !== -1) {\n        var b = this.inBlossom[v];\n        if ((this.label[b] & 4)) {\n            base = this.blossomBase[b];\n            break;\n        }\n        //console.assert(this.label[b] === 1);\n        path.push(b);\n        this.label[b] = 5;\n        //console.assert(this.labelEnd[b] === this.mate[this.blossomBase[b]]);\n        if (this.labelEnd[b] === -1) {\n            v = -1;\n        } else {\n            v = this.endpoint[this.labelEnd[b]];\n            b = this.inBlossom[v];\n            //console.assert(this.label[b] === 2);\n            //console.assert(this.labelEnd[b] >= 0);\n            v = this.endpoint[this.labelEnd[b]];\n        }\n        if (w !== -1) {\n            v = v ^ w;\n            w = w ^ v;\n            v = v ^ w;\n        }\n        }\n        for (var ii = 0; ii < path.length; ii++) {\n        b = path[ii];\n        this.label[b] = 1;\n        }\n        return base;\n    };\n    \n    addBlossom = function (base, k) {\n        var v = this.edges[k][0];\n        var w = this.edges[k][1];\n        var wt = this.edges[k][2];\n        var bb = this.inBlossom[base];\n        var bv = this.inBlossom[v];\n        var bw = this.inBlossom[w];\n        var b = this.unusedBlossoms.pop();\n        //console.log('DEBUG: addBlossom(' + base + ',' + k + ')' + ' (v=' + v + ' w=' + w + ')' + ' -> ' + b);\n        this.blossomBase[b] = base;\n        this.blossomParent[b] = -1;\n        this.blossomParent[bb] = b;\n        var path = this.blossomChilds[b] = [];\n        var endPs = this.blossomEndPs[b] = [];\n        while (bv !== bb) {\n        this.blossomParent[bv] = b;\n        path.push(bv);\n        endPs.push(this.labelEnd[bv]);\n        //console.assert(this.label[bv] === 2 || (this.label[bv] === 1 && this.labelEnd[bv] === this.mate[this.blossomBase[bv]]));\n        //console.assert(this.labelEnd[bv] >= 0);\n        v = this.endpoint[this.labelEnd[bv]];\n        bv = this.inBlossom[v];\n        }\n        path.push(bb);\n        path.reverse();\n        endPs.reverse();\n        endPs.push((2 * k));\n        while (bw !== bb) {\n        this.blossomParent[bw] = b;\n        path.push(bw);\n        endPs.push(this.labelEnd[bw] ^ 1);\n        //console.assert(this.label[bw] === 2 || (this.label[bw] === 1 && this.labelEnd[bw] === this.mate[this.blossomBase[bw]]));\n        //console.assert(this.labelEnd[bw] >= 0);\n        w = this.endpoint[this.labelEnd[bw]];\n        bw = this.inBlossom[w];\n        }\n        //console.assert(this.label[bb] === 1);\n        this.label[b] = 1;\n        this.labelEnd[b] = this.labelEnd[bb];\n        this.dualVar[b] = 0;\n        var leaves = this.blossomLeaves(b);\n        for (var ii = 0; ii < leaves.length; ii++) {\n        v = leaves[ii];\n        if (this.label[this.inBlossom[v]] === 2) {\n            this.queue.push(v);\n        }\n        this.inBlossom[v] = b;\n        }\n        var bestEdgeTo = this.filledArray(2 * this.nVertex, -1);\n        for (ii = 0; ii < path.length; ii++) {\n        bv = path[ii];\n        if (this.blossomBestEdges[bv].length === 0) {\n            var nbLists = [];\n            leaves = this.blossomLeaves(bv);\n            for (var x = 0; x < leaves.length; x++) {\n            v = leaves[x];\n            nbLists[x] = [];\n            for (var y = 0; y < this.neighbend[v].length; y++) {\n                var p = this.neighbend[v][y];\n                nbLists[x].push(~~(p / 2));\n            }\n            }\n        } else {\n            nbLists = [this.blossomBestEdges[bv]];\n        }\n        //console.log('DEBUG: nbLists ' + nbLists.toString());\n        for (x = 0; x < nbLists.length; x++) {\n            var nbList = nbLists[x];\n            for (y = 0; y < nbList.length; y++) {\n            k = nbList[y];\n            var i = this.edges[k][0];\n            var j = this.edges[k][1];\n            wt = this.edges[k][2];\n            if (this.inBlossom[j] === b) {\n                i = i ^ j;\n                j = j ^ i;\n                i = i ^ j;\n            }\n            var bj = this.inBlossom[j];\n            if (bj !== b && this.label[bj] === 1 && (bestEdgeTo[bj] === -1 || this.slack(k) < this.slack(bestEdgeTo[bj]))) {\n                bestEdgeTo[bj] = k;\n            }\n            }\n        }\n        this.blossomBestEdges[bv] = [];\n        this.bestEdge[bv] = -1;\n        }\n        var be = [];\n        for (ii = 0; ii < bestEdgeTo.length; ii++) {\n        k = bestEdgeTo[ii];\n        if (k !== -1) {\n            be.push(k);\n        }\n        }\n        this.blossomBestEdges[b] = be;\n        //console.log('DEBUG: blossomBestEdges[' + b + ']= ' + this.blossomBestEdges[b].toString());\n        this.bestEdge[b] = -1;\n        for (ii = 0; ii < this.blossomBestEdges[b].length; ii++) {\n        k = this.blossomBestEdges[b][ii];\n        if (this.bestEdge[b] === -1 || this.slack(k) < this.slack(this.bestEdge[b])) {\n            this.bestEdge[b] = k;\n        }\n        }\n        //console.log('DEBUG: blossomChilds[' + b + ']= ' + this.blossomChilds[b].toString());\n    };\n    \n    expandBlossom = function (b, endStage) {\n        //console.log('DEBUG: expandBlossom(' + b + ',' + endStage + ') ' + this.blossomChilds[b].toString());\n        for (var ii = 0; ii < this.blossomChilds[b].length; ii++) {\n        var s = this.blossomChilds[b][ii];\n        this.blossomParent[s] = -1;\n        if (s < this.nVertex) {\n            this.inBlossom[s] = s;\n        } else if (endStage && this.dualVar[s] === 0) {\n            this.expandBlossom(s, endStage);\n        } else {\n            var leaves = this.blossomLeaves(s);\n            for (var jj = 0; jj < leaves.length; jj++) {\n            var v = leaves[jj];\n            this.inBlossom[v] = s;\n            }\n        }\n        }\n        if (!endStage && this.label[b] === 2) {\n        //console.assert(this.labelEnd[b] >= 0);\n        var entryChild = this.inBlossom[this.endpoint[this.labelEnd[b] ^ 1]];\n        var j = this.blossomChilds[b].indexOf(entryChild);\n        if ((j & 1)) {\n            j -= this.blossomChilds[b].length;\n            var jStep = 1;\n            var endpTrick = 0;\n        } else {\n            jStep = -1;\n            endpTrick = 1;\n        }\n        var p = this.labelEnd[b];\n        while (j !== 0) {\n            this.label[this.endpoint[p ^ 1]] = 0;\n            this.label[this.endpoint[this.indexW(this.blossomEndPs[b], j - endpTrick) ^ endpTrick ^ 1]] = 0;\n            this.assignLabel(this.endpoint[p ^ 1], 2, p);\n            this.allowEdge[~~(this.indexW(this.blossomEndPs[b], j - endpTrick) / 2)] = true;\n            j += jStep;\n            p = this.indexW(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n            this.allowEdge[~~(p / 2)] = true;\n            j += jStep;\n        }\n        var bv = this.indexW(this.blossomChilds[b], j);\n        this.label[this.endpoint[p ^ 1]] = this.label[bv] = 2;\n    \n        this.labelEnd[this.endpoint[p ^ 1]] = this.labelEnd[bv] = p;\n        this.bestEdge[bv] = -1;\n        j += jStep;\n        while (this.indexW(this.blossomChilds[b], j) !== entryChild) {\n            bv = this.indexW(this.blossomChilds[b], j);\n            if (this.label[bv] === 1) {\n            j += jStep;\n            continue;\n            }\n            leaves = this.blossomLeaves(bv);\n            for (ii = 0; ii < leaves.length; ii++) {\n            v = leaves[ii];\n            if (this.label[v] !== 0) break;\n            }\n            if (this.label[v] !== 0) {\n            //console.assert(this.label[v] === 2);\n            //console.assert(this.inBlossom[v] === bv);\n            this.label[v] = 0;\n            this.label[this.endpoint[this.mate[this.blossomBase[bv]]]] = 0;\n            this.assignLabel(v, 2, this.labelEnd[v]);\n            }\n            j += jStep;\n        }\n        }\n        this.label[b] = this.labelEnd[b] = -1;\n        this.blossomEndPs[b] = this.blossomChilds[b] = [];\n        this.blossomBase[b] = -1;\n        this.blossomBestEdges[b] = [];\n        this.bestEdge[b] = -1;\n        this.unusedBlossoms.push(b);\n    };\n    \n    augmentBlossom = function (b, v) {\n        //console.log('DEBUG: augmentBlossom(' + b + ',' + v + ')');\n        var i, j;\n        var t = v;\n        while (this.blossomParent[t] !== b) {\n        t = this.blossomParent[t];\n        }\n        if (t > this.nVertex) {\n        this.augmentBlossom(t, v);\n        }\n        i = j = this.blossomChilds[b].indexOf(t);\n        if ((i & 1)) {\n        j -= this.blossomChilds[b].length;\n        var jStep = 1;\n        var endpTrick = 0;\n        } else {\n        jStep = -1;\n        endpTrick = 1;\n        }\n        while (j !== 0) {\n        j += jStep;\n        t = this.indexW(this.blossomChilds[b], j);\n        var p = this.indexW(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;\n        if (t >= this.nVertex) {\n            this.augmentBlossom(t, this.endpoint[p]);\n        }\n        j += jStep;\n        t = this.indexW(this.blossomChilds[b], j);\n        if (t >= this.nVertex) {\n            this.augmentBlossom(t, this.endpoint[p ^ 1]);\n        }\n        this.mate[this.endpoint[p]] = p ^ 1;\n        this.mate[this.endpoint[p ^ 1]] = p;\n        }\n        //console.log('DEBUG: PAIR ' + this.endpoint[p] + ' ' + this.endpoint[p^1] + '(k=' + ~~(p/2) + ')');\n        this.blossomChilds[b] = this.blossomChilds[b].slice(i).concat(this.blossomChilds[b].slice(0, i));\n        this.blossomEndPs[b] = this.blossomEndPs[b].slice(i).concat(this.blossomEndPs[b].slice(0, i));\n        this.blossomBase[b] = this.blossomBase[this.blossomChilds[b][0]];\n        //console.assert(this.blossomBase[b] === v);\n    };\n    \n    augmentMatching = function (k) {\n        var v = this.edges[k][0];\n        var w = this.edges[k][1];\n        //console.log('DEBUG: augmentMatching(' + k + ')' + ' (v=' + v + ' ' + 'w=' + w);\n        //console.log('DEBUG: PAIR ' + v + ' ' + w + '(k=' + k + ')');\n        for (var ii = 0; ii < 2; ii++) {\n        if (ii === 0) {\n            var s = v;\n            var p = 2 * k + 1;\n        } else {\n            s = w;\n            p = 2 * k;\n        }\n        while (true) {\n            var bs = this.inBlossom[s];\n            //console.assert(this.label[bs] === 1);\n            //console.assert(this.labelEnd[bs] === this.mate[this.blossomBase[bs]]);\n            if (bs >= this.nVertex) {\n            this.augmentBlossom(bs, s);\n            }\n            this.mate[s] = p;\n            if (this.labelEnd[bs] === -1) break;\n            var t = this.endpoint[this.labelEnd[bs]];\n            var bt = this.inBlossom[t];\n            //console.assert(this.label[bt] === 2);\n            //console.assert(this.labelEnd[bt] >= 0);\n            s = this.endpoint[this.labelEnd[bt]];\n            var j = this.endpoint[this.labelEnd[bt] ^ 1];\n            //console.assert(this.blossomBase[bt] === t);\n            if (bt >= this.nVertex) {\n            this.augmentBlossom(bt, j);\n            }\n            this.mate[j] = this.labelEnd[bt];\n            p = this.labelEnd[bt] ^ 1;\n            //console.log('DEBUG: PAIR ' + s + ' ' + t + '(k=' + ~~(p/2) + ')');\n    \n    \n        }\n        }\n    };\n    \n    \n    blossomBaseInit () {\n        var base = [];\n        for (var i = 0; i < this.nVertex; i++) {\n        base[i] = i;\n        }\n        var negs = this.filledArray(this.nVertex, -1);\n        this.blossomBase = base.concat(negs);\n    };\n    dualVarInit () {\n        var mw = this.filledArray(this.nVertex, this.maxWeight);\n        var zeros = this.filledArray(this.nVertex, 0);\n        this.dualVar = mw.concat(zeros);\n    };\n    unusedBlossomsInit  () {\n        var i, unusedBlossoms = [];\n        for (i = this.nVertex; i < 2 * this.nVertex; i++) {\n        unusedBlossoms.push(i);\n        }\n        this.unusedBlossoms = unusedBlossoms;\n    };\n    inBlossomInit () {\n        var i, inBlossom = [];\n        for (i = 0; i < this.nVertex; i++) {\n        inBlossom[i] = i;\n        }\n        this.inBlossom = inBlossom;\n    };\n    neighbendInit() {\n        var k, i, j;\n        var neighbend = this.initArrArr(this.nVertex);\n        for (k = 0; k < this.nEdge; k++) {\n        i = this.edges[k][0];\n        j = this.edges[k][1];\n        neighbend[i].push(2 * k + 1);\n        neighbend[j].push(2 * k);\n        }\n        this.neighbend = neighbend;\n    };\n    endpointInit() {\n        var p;\n        var endpoint = [];\n        for (p = 0; p < 2 * this.nEdge; p++) {\n        endpoint[p] = this.edges[~~(p / 2)][p % 2];\n        }\n        this.endpoint = endpoint;\n    };\n    nVertexInit () {\n        var nVertex = 0;\n        for (var k = 0; k < this.nEdge; k++) {\n        var i = this.edges[k][0];\n        var j = this.edges[k][1];\n        if (i >= nVertex) nVertex = i + 1;\n        if (j >= nVertex) nVertex = j + 1;\n        }\n        this.nVertex = nVertex;\n    };\n    maxWeightInit() {\n        var maxWeight = 0;\n        for (var k = 0; k < this.nEdge; k++) {\n        var weight = this.edges[k][2];\n        if (weight > maxWeight) {\n            maxWeight = weight;\n        }\n        }\n        this.maxWeight = maxWeight;\n    };\n    \n    //HELPERS//\n    filledArray(len, fill) {\n        var i, newArray = [];\n        for (i = 0; i < len; i++) {\n        newArray[i] = fill;\n        }\n        return newArray;\n    }\n    \n    initArrArr(len) {\n        var arr = [];\n        for (var i = 0; i < len; i++) {\n        arr[i] = [];\n        }\n        return arr;\n    }\n    \n    getMin(arr, start, end) {\n        var min = Infinity;\n        for (var i = start; i <= end; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        }\n        return min;\n    }\n    \n    indexW(arr, idx) {\n        //if idx is negative, go from the back\n        return idx < 0 ? arr[arr.length + idx] : arr[idx];\n    }\n}\n\n  var data = [\n    [0, 1, -6],\n    [0, 2, -10],\n    [1, 2, -5],\n    [2, 3, -7],\n    [1, 3, -2]\n  ];\n\n// var edmonds = new Edmonds(data);\n\n// var result = edmonds.maxWeightMatching();\n\n// console.log(result)",{"ruleId":"102","severity":1,"message":"103","line":41,"column":14,"nodeType":"104","messageId":"105","endLine":41,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":173,"column":17,"nodeType":"104","messageId":"105","endLine":173,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":192,"column":14,"nodeType":"108","messageId":"109","endLine":192,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":286,"column":9,"nodeType":"112","messageId":"113","endLine":286,"endColumn":93},{"ruleId":"102","severity":1,"message":"103","line":289,"column":16,"nodeType":"104","messageId":"105","endLine":289,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":301,"column":18,"nodeType":"104","messageId":"105","endLine":301,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":308,"column":18,"nodeType":"104","messageId":"105","endLine":308,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":319,"column":28,"nodeType":"104","messageId":"105","endLine":319,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":361,"column":23,"nodeType":"104","messageId":"105","endLine":361,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":362,"column":9,"nodeType":"112","messageId":"113","endLine":362,"endColumn":43},{"ruleId":"102","severity":1,"message":"103","line":377,"column":31,"nodeType":"104","messageId":"105","endLine":377,"endColumn":33},{"ruleId":"102","severity":1,"message":"103","line":460,"column":28,"nodeType":"104","messageId":"105","endLine":460,"endColumn":30},{"ruleId":"110","severity":1,"message":"111","line":540,"column":9,"nodeType":"112","messageId":"113","endLine":540,"endColumn":93},{"ruleId":"102","severity":1,"message":"103","line":542,"column":16,"nodeType":"104","messageId":"105","endLine":542,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":550,"column":18,"nodeType":"104","messageId":"105","endLine":550,"endColumn":20},{"ruleId":"110","severity":1,"message":"111","line":574,"column":9,"nodeType":"112","messageId":"113","endLine":574,"endColumn":50},{"ruleId":"114","severity":1,"message":"115","line":575,"column":9,"nodeType":"116","messageId":"117","endLine":575,"endColumn":15},{"ruleId":"102","severity":1,"message":"103","line":628,"column":48,"nodeType":"104","messageId":"105","endLine":628,"endColumn":50},{"ruleId":"102","severity":1,"message":"103","line":667,"column":17,"nodeType":"104","messageId":"105","endLine":667,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":727,"column":16,"nodeType":"108","messageId":"120","endLine":727,"endColumn":17},{"ruleId":"118","severity":1,"message":"121","line":730,"column":13,"nodeType":"108","messageId":"120","endLine":730,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":730,"column":39,"nodeType":"124","messageId":"125","endLine":730,"endColumn":68},{"ruleId":"118","severity":1,"message":"126","line":731,"column":13,"nodeType":"108","messageId":"120","endLine":731,"endColumn":14},{"ruleId":"122","severity":1,"message":"127","line":731,"column":39,"nodeType":"124","messageId":"125","endLine":731,"endColumn":68},{"ruleId":"102","severity":1,"message":"103","line":742,"column":49,"nodeType":"104","messageId":"105","endLine":742,"endColumn":51},{"ruleId":"102","severity":1,"message":"103","line":802,"column":24,"nodeType":"104","messageId":"105","endLine":802,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":846,"column":23,"nodeType":"130","messageId":"131","endLine":846,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":846,"column":35,"nodeType":"130","messageId":"131","endLine":846,"endColumn":37},{"ruleId":"128","severity":1,"message":"132","line":846,"column":35,"nodeType":"130","messageId":"131","endLine":846,"endColumn":37},{"ruleId":"128","severity":1,"message":"132","line":846,"column":46,"nodeType":"130","messageId":"131","endLine":846,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":860,"column":23,"nodeType":"130","messageId":"131","endLine":860,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":860,"column":35,"nodeType":"130","messageId":"131","endLine":860,"endColumn":37},{"ruleId":"128","severity":1,"message":"132","line":860,"column":35,"nodeType":"130","messageId":"131","endLine":860,"endColumn":37},{"ruleId":"128","severity":1,"message":"132","line":860,"column":46,"nodeType":"130","messageId":"131","endLine":860,"endColumn":48},{"ruleId":"102","severity":1,"message":"103","line":27,"column":20,"nodeType":"104","messageId":"105","endLine":27,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":28,"column":13,"nodeType":"112","messageId":"113","endLine":28,"endColumn":41},{"ruleId":"102","severity":1,"message":"103","line":88,"column":29,"nodeType":"104","messageId":"105","endLine":88,"endColumn":31},{"ruleId":"128","severity":1,"message":"129","line":88,"column":41,"nodeType":"130","messageId":"131","endLine":88,"endColumn":43},{"ruleId":"102","severity":1,"message":"103","line":88,"column":56,"nodeType":"104","messageId":"105","endLine":88,"endColumn":58},{"ruleId":"128","severity":1,"message":"129","line":88,"column":68,"nodeType":"130","messageId":"131","endLine":88,"endColumn":70},{"ruleId":"128","severity":1,"message":"132","line":88,"column":68,"nodeType":"130","messageId":"131","endLine":88,"endColumn":70},{"ruleId":"102","severity":1,"message":"103","line":88,"column":83,"nodeType":"104","messageId":"105","endLine":88,"endColumn":85},{"ruleId":"128","severity":1,"message":"132","line":88,"column":95,"nodeType":"130","messageId":"131","endLine":88,"endColumn":97},{"ruleId":"102","severity":1,"message":"103","line":88,"column":110,"nodeType":"104","messageId":"105","endLine":88,"endColumn":112},{"ruleId":"102","severity":1,"message":"103","line":22,"column":24,"nodeType":"104","messageId":"105","endLine":22,"endColumn":26},{"ruleId":"106","severity":1,"message":"133","line":161,"column":13,"nodeType":"108","messageId":"109","endLine":161,"endColumn":15},{"ruleId":"106","severity":1,"message":"133","line":337,"column":13,"nodeType":"108","messageId":"109","endLine":337,"endColumn":15},{"ruleId":"106","severity":1,"message":"134","line":629,"column":7,"nodeType":"108","messageId":"109","endLine":629,"endColumn":11},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'displayNodes' is defined but never used.","Identifier","unusedVar","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-redeclare","'i' is already defined.","redeclared","'v' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'indexV'.","ArrowFunctionExpression","unsafeRefs","'w' is already defined.","Function declared in a loop contains unsafe references to variable(s) 'indexW'.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'wt' is assigned a value but never used.","'data' is assigned a value but never used."]